<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="metagraph__mock_8py" kind="file" language="Python">
    <compoundname>metagraph_mock.py</compoundname>
    <innerclass refid="classbittensor_1_1__metagraph_1_1metagraph__mock_1_1_mock_metagraph" prot="public">bittensor::_metagraph::metagraph_mock::MockMetagraph</innerclass>
    <innernamespace refid="namespacebittensor">bittensor</innernamespace>
    <innernamespace refid="namespacebittensor_1_1__metagraph">bittensor::_metagraph</innernamespace>
    <innernamespace refid="namespacebittensor_1_1__metagraph_1_1metagraph__mock">bittensor::_metagraph::metagraph_mock</innernamespace>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacebittensor_1_1__metagraph_1_1metagraph__mock_1aca8673e27366e30367c47406f6f3914a" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int bittensor::_metagraph::metagraph_mock.RAOPERTAO</definition>
        <argsstring></argsstring>
        <name>RAOPERTAO</name>
        <qualifiedname>bittensor._metagraph.metagraph_mock.RAOPERTAO</qualifiedname>
        <initializer>=  1000000000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/macthrasher/bittensor/bittensor/_metagraph/metagraph_mock.py" line="32" column="1" bodyfile="/Users/macthrasher/bittensor/bittensor/_metagraph/metagraph_mock.py" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacebittensor_1_1__metagraph_1_1metagraph__mock_1a0da9905f93be9903b9e21228d7557320" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int bittensor::_metagraph::metagraph_mock.U64MAX</definition>
        <argsstring></argsstring>
        <name>U64MAX</name>
        <qualifiedname>bittensor._metagraph.metagraph_mock.U64MAX</qualifiedname>
        <initializer>=  18446744073709551615</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/macthrasher/bittensor/bittensor/_metagraph/metagraph_mock.py" line="33" column="1" bodyfile="/Users/macthrasher/bittensor/bittensor/_metagraph/metagraph_mock.py" bodystart="33" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="namespacebittensor_1_1__metagraph_1_1metagraph__mock" refkind="compound"><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>Maintains<sp/>mocked<sp/>chain<sp/>state<sp/>as<sp/>a<sp/>torch.nn.Module.</highlight></codeline>
<codeline lineno="3"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">#<sp/>The<sp/>MIT<sp/>License<sp/>(MIT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Copyright<sp/>©<sp/>2021<sp/>Yuma<sp/>Rao</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/>obtaining<sp/>a<sp/>copy<sp/>of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">#<sp/>documentation<sp/>files<sp/>(the<sp/>“Software”),<sp/>to<sp/>deal<sp/>in<sp/>the<sp/>Software<sp/>without<sp/>restriction,<sp/>including<sp/>without<sp/>limitation<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">#<sp/>the<sp/>rights<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>merge,<sp/>publish,<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/>sell<sp/>copies<sp/>of<sp/>the<sp/>Software,<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">#<sp/>and<sp/>to<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is<sp/>furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">#<sp/>The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/>included<sp/>in<sp/>all<sp/>copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">#<sp/>the<sp/>Software.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">#<sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>“AS<sp/>IS”,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">#<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">#<sp/>THE<sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">#<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">#<sp/>DEALINGS<sp/>IN<sp/>THE<sp/>SOFTWARE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>os</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>typing<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>List</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>loguru<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>logger</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>pandas</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>torch</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>.<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>metagraph_impl</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>bittensor</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/><ref refid="namespacebittensor_1_1utils_1_1networking" kindref="compound">bittensor.utils.networking</ref><sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>net</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal">RAOPERTAO<sp/>=<sp/>1000000000</highlight></codeline>
<codeline lineno="33"><highlight class="normal">U64MAX<sp/>=<sp/>18446744073709551615</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="classbittensor_1_1__metagraph_1_1metagraph__mock_1_1_mock_metagraph" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classbittensor_1_1__metagraph_1_1metagraph__mock_1_1_mock_metagraph" kindref="compound">MockMetagraph</ref>(<sp/><ref refid="classbittensor_1_1__metagraph_1_1metagraph__impl_1_1_metagraph" kindref="compound">metagraph_impl.Metagraph</ref><sp/>):</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&quot;&quot;&quot;<sp/>MOCKED<sp/>VERSION<sp/>OF<sp/>THE<sp/>METAGRAPH</highlight></codeline>
<codeline lineno="37"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="38"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="39"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbittensor_1_1__metagraph_1_1metagraph__mock_1_1_mock_metagraph_1ad5aa9de326c31c751f2aeb4ea775a62d" kindref="member">__init__</ref>(<sp/>self<sp/>):</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&quot;&quot;&quot;<sp/>Initializes<sp/>a<sp/>new<sp/>Metagraph<sp/>torch<sp/>chain<sp/>interface<sp/>object.</highlight></codeline>
<codeline lineno="41"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="42"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>super(MockMetagraph,<sp/>self).<ref refid="classbittensor_1_1__metagraph_1_1metagraph__mock_1_1_mock_metagraph_1ad5aa9de326c31c751f2aeb4ea775a62d" kindref="member">__init__</ref>(subtensor=</highlight><highlight class="keywordtype">None</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tn<sp/>=<sp/>torch.tensor(<sp/>2000,<sp/>dtype=torch.int64<sp/>)</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tblock<sp/>=<sp/>torch.tensor(<sp/>0,<sp/>dtype=torch.int64<sp/>)</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tuids<sp/>=<sp/>torch.tensor(<sp/>list(<sp/>range(<sp/>2000<sp/>)),<sp/>dtype=torch.int64<sp/>)</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tactive<sp/>=<sp/>torch.tensor(<sp/>[<sp/>1<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>_<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range<sp/>(2000)],<sp/>dtype=torch.int64<sp/>)</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tstake<sp/>=<sp/>torch.tensor(<sp/>[<sp/>1.0<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>_<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range<sp/>(2000)<sp/>],<sp/>dtype=torch.float32<sp/>)</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tranks<sp/>=<sp/>torch.tensor(<sp/><sp/>[1.0/2000<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>_<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range<sp/>(2000)<sp/>],<sp/>dtype=torch.float32<sp/>)</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ttrust<sp/>=<sp/>torch.tensor(<sp/>[<sp/>1.0<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>_<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range<sp/>(2000)<sp/>],<sp/>dtype=torch.float32<sp/>)</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tconsensus<sp/>=<sp/>torch.tensor(<sp/>[1.0<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>_<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range<sp/>(2000)<sp/>],<sp/>dtype=torch.float32<sp/>)</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tincentive<sp/>=<sp/>torch.tensor(<sp/>[1.0/2000<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>_<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range<sp/>(2000)<sp/>],<sp/>dtype=torch.float32<sp/>)</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temission<sp/>=<sp/>torch.tensor(<sp/>[1.0/2000<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>_<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range<sp/>(2000)<sp/>],<sp/>dtype=torch.float32<sp/>)</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tdividends<sp/>=<sp/>torch.tensor(<sp/>[1.0/2000<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>_<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range<sp/>(2000)<sp/>],<sp/>dtype=torch.float32<sp/>)</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tlast_update<sp/>=<sp/>torch.tensor(<sp/>[0<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>_<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range<sp/>(2000)<sp/>],<sp/>dtype=torch.int64<sp/>)</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tbonds<sp/>=<sp/>torch.tensor(<sp/>[<sp/>[1<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>_<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range<sp/>(2000)<sp/>]<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>_<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range<sp/>(2000)<sp/>],<sp/>dtype=torch.int64<sp/>)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tweights<sp/>=<sp/>torch.tensor(<sp/>[<sp/>[1.0/2000<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>_<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range<sp/>(2000)<sp/>]<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>_<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range<sp/>(2000)<sp/>],<sp/>dtype=torch.float32<sp/>)</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__metagraph_1_1metagraph__impl_1_1_metagraph_1ac90ef36e9b9992d0677ed954fe064305" kindref="member">_endpoint_objs</ref><ref refid="classbittensor_1_1__metagraph_1_1metagraph__mock_1_1_mock_metagraph_1a8914133f11ded3b9489fb5b6ef13ef53" kindref="member">_endpoint_objs</ref><sp/>=<sp/>[<sp/>bittensor.endpoint.dummy()<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>_<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range<sp/>(2000)<sp/>]</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tendpoints<sp/>=<sp/>torch.tensor(<sp/>[<sp/>end.to_tensor().tolist()<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>end<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classbittensor_1_1__metagraph_1_1metagraph__impl_1_1_metagraph_1ac90ef36e9b9992d0677ed954fe064305" kindref="member">_endpoint_objs</ref><ref refid="classbittensor_1_1__metagraph_1_1metagraph__mock_1_1_mock_metagraph_1a8914133f11ded3b9489fb5b6ef13ef53" kindref="member">_endpoint_objs</ref><sp/>],<sp/>dtype=torch.int64<sp/>)</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__metagraph_1_1metagraph__impl_1_1_metagraph_1a651a9f930b6474beeadee90ac3be0b63" kindref="member">n</ref><ref refid="classbittensor_1_1__metagraph_1_1metagraph__mock_1_1_mock_metagraph_1a817ec1c8d5a5304f9b4c3e8832bd11e9" kindref="member">n</ref><sp/>=<sp/>torch.nn.Parameter(<sp/>tn,<sp/>requires_grad=</highlight><highlight class="keyword">False</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__metagraph_1_1metagraph__impl_1_1_metagraph_1ab7ae47be11a28f4f446a1e14eb4ca449" kindref="member">block</ref><ref refid="classbittensor_1_1__metagraph_1_1metagraph__mock_1_1_mock_metagraph_1a77197965a8775ef718db3a07681a8424" kindref="member">block</ref><sp/>=<sp/>torch.nn.Parameter(<sp/>tblock,<sp/>requires_grad=</highlight><highlight class="keyword">False</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__metagraph_1_1metagraph__impl_1_1_metagraph_1a0f06479517f3ac4c5011c1fc4b0f7328" kindref="member">uids</ref><ref refid="classbittensor_1_1__metagraph_1_1metagraph__mock_1_1_mock_metagraph_1ab4ce4f9a4395b29e0c06879110fc343e" kindref="member">uids</ref><sp/>=<sp/>torch.nn.Parameter(<sp/>tuids,<sp/>requires_grad=</highlight><highlight class="keyword">False</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__metagraph_1_1metagraph__impl_1_1_metagraph_1a185ca62f18cad4f1ada8cb73208d466f" kindref="member">stake</ref><ref refid="classbittensor_1_1__metagraph_1_1metagraph__mock_1_1_mock_metagraph_1ae7edf9cd7e41ec6cefd3ce26c8ac5cb5" kindref="member">stake</ref><sp/>=<sp/>torch.nn.Parameter(<sp/>tstake,<sp/>requires_grad=</highlight><highlight class="keyword">False</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__metagraph_1_1metagraph__impl_1_1_metagraph_1a82219c98ff57f15a0d74e599630c1fcb" kindref="member">ranks</ref><ref refid="classbittensor_1_1__metagraph_1_1metagraph__mock_1_1_mock_metagraph_1a2bf67c349961b2868f3815c30aacbe7f" kindref="member">ranks</ref><sp/>=<sp/>torch.nn.Parameter(<sp/>tranks,<sp/>requires_grad=</highlight><highlight class="keyword">False</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__metagraph_1_1metagraph__impl_1_1_metagraph_1a3c6d23cfc981532eed5c7563a79820eb" kindref="member">trust</ref><ref refid="classbittensor_1_1__metagraph_1_1metagraph__mock_1_1_mock_metagraph_1aedb12482754167178446b808fa401203" kindref="member">trust</ref><sp/>=<sp/>torch.nn.Parameter(<sp/>ttrust,<sp/>requires_grad=</highlight><highlight class="keyword">False</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__metagraph_1_1metagraph__impl_1_1_metagraph_1aeb7bb38790a29bc561ed3ad9f4860b4f" kindref="member">consensus</ref><ref refid="classbittensor_1_1__metagraph_1_1metagraph__mock_1_1_mock_metagraph_1adb06f0d23b3f1c23bac545b88f3f8342" kindref="member">consensus</ref><sp/>=<sp/>torch.nn.Parameter(<sp/>tconsensus,<sp/>requires_grad=</highlight><highlight class="keyword">False</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__metagraph_1_1metagraph__impl_1_1_metagraph_1a91bdcaa5b2a344403f1a09fa3ea4f961" kindref="member">incentive</ref><ref refid="classbittensor_1_1__metagraph_1_1metagraph__mock_1_1_mock_metagraph_1a2769534c5ba59908852f0633111218a9" kindref="member">incentive</ref><sp/>=<sp/>torch.nn.Parameter(<sp/>tincentive,<sp/>requires_grad=</highlight><highlight class="keyword">False</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__metagraph_1_1metagraph__impl_1_1_metagraph_1a2b130f5f585a9427c60c90757e844544" kindref="member">emission</ref><ref refid="classbittensor_1_1__metagraph_1_1metagraph__mock_1_1_mock_metagraph_1aa04c8ea40a5bed81d6eef4872154d07c" kindref="member">emission</ref><sp/>=<sp/>torch.nn.Parameter(<sp/>temission,<sp/>requires_grad=</highlight><highlight class="keyword">False</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__metagraph_1_1metagraph__impl_1_1_metagraph_1adf4008ea148a33631e41b20ddb00e9f4" kindref="member">dividends</ref><ref refid="classbittensor_1_1__metagraph_1_1metagraph__mock_1_1_mock_metagraph_1a87c5d79f7137c25da6494df8d2c7df6e" kindref="member">dividends</ref><sp/>=<sp/>torch.nn.Parameter(<sp/>tdividends,<sp/>requires_grad=</highlight><highlight class="keyword">False</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__metagraph_1_1metagraph__impl_1_1_metagraph_1a3466add2861b4ea82f24bd53afb69ec8" kindref="member">active</ref><ref refid="classbittensor_1_1__metagraph_1_1metagraph__mock_1_1_mock_metagraph_1af511084ff616c47bc50ae25fb508a363" kindref="member">active</ref><sp/>=<sp/>torch.nn.Parameter(<sp/>tactive,<sp/>requires_grad=</highlight><highlight class="keyword">False</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__metagraph_1_1metagraph__impl_1_1_metagraph_1ad444e71fb042eed110700b0956f2f301" kindref="member">last_update</ref><ref refid="classbittensor_1_1__metagraph_1_1metagraph__mock_1_1_mock_metagraph_1a6c41f5bf65c630afdbfd13a39ee388a2" kindref="member">last_update</ref><sp/>=<sp/>torch.nn.Parameter(<sp/>tlast_update,<sp/>requires_grad=</highlight><highlight class="keyword">False</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__metagraph_1_1metagraph__impl_1_1_metagraph_1a5aca6de2c3773ba3e3896b1759dfab69" kindref="member">weights</ref><ref refid="classbittensor_1_1__metagraph_1_1metagraph__mock_1_1_mock_metagraph_1aa9145451f15f9c2a0365359cd05304a4" kindref="member">weights</ref><sp/>=<sp/>torch.nn.Parameter(<sp/>tweights,<sp/>requires_grad=</highlight><highlight class="keyword">False</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__metagraph_1_1metagraph__impl_1_1_metagraph_1a5839f65d24c057bff0997a53a755ec47" kindref="member">bonds</ref><ref refid="classbittensor_1_1__metagraph_1_1metagraph__mock_1_1_mock_metagraph_1a0a19adf9647187ed1107edd35aacf358" kindref="member">bonds</ref><sp/>=<sp/>torch.nn.Parameter(<sp/>tbonds,<sp/>requires_grad=</highlight><highlight class="keyword">False</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__metagraph_1_1metagraph__impl_1_1_metagraph_1aad0b83db87c6c1b3126f9f0b6eb5a84e" kindref="member">endpoints</ref><ref refid="classbittensor_1_1__metagraph_1_1metagraph__mock_1_1_mock_metagraph_1a43b0f0d5a538f9f3103bc93b946122cb" kindref="member">endpoints</ref><sp/>=<sp/>torch.nn.Parameter(<sp/>tendpoints,<sp/>requires_grad=</highlight><highlight class="keyword">False</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;----<sp/>MOCKED<sp/>METAGRAPH<sp/>INITIALIZED<sp/>----&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbittensor_1_1__metagraph_1_1metagraph__mock_1_1_mock_metagraph_1a6b2665ea4cd6ec6c24b59562dcf55403" kindref="member">clear</ref>(<sp/>self<sp/>)<sp/>-&gt;<sp/>&apos;Metagraph&apos;:</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&quot;&quot;&quot;<sp/>Erases<sp/>Metagraph<sp/>state.</highlight></codeline>
<codeline lineno="79"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="80"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__metagraph_1_1metagraph__impl_1_1_metagraph_1ac389fe277d31ef7ab8cafb54a5eeccb9" kindref="member">version</ref><ref refid="classbittensor_1_1__metagraph_1_1metagraph__mock_1_1_mock_metagraph_1a8cc6d855e4ae7e989d2f50ddcbceb0b5" kindref="member">version</ref><sp/>=<sp/>torch.nn.Parameter(<sp/>torch.tensor(<sp/>[<sp/>bittensor.__version_as_int__<sp/>],<sp/>dtype=torch.int64),<sp/>requires_grad=</highlight><highlight class="keyword">False</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__metagraph_1_1metagraph__impl_1_1_metagraph_1a651a9f930b6474beeadee90ac3be0b63" kindref="member">n</ref><ref refid="classbittensor_1_1__metagraph_1_1metagraph__mock_1_1_mock_metagraph_1a817ec1c8d5a5304f9b4c3e8832bd11e9" kindref="member">n</ref><sp/>=<sp/>torch.nn.Parameter(<sp/>torch.tensor(<sp/>[0],<sp/>dtype=torch.int64),<sp/>requires_grad<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__metagraph_1_1metagraph__impl_1_1_metagraph_1a3b5fd7515d5a7b5f9f5383589bba85bb" kindref="member">tau</ref><ref refid="classbittensor_1_1__metagraph_1_1metagraph__mock_1_1_mock_metagraph_1a808ba440173e71c4418655646ee6e014" kindref="member">tau</ref><sp/>=<sp/>torch.nn.Parameter(<sp/>torch.tensor(<sp/>[1],<sp/>dtype=torch.float32),<sp/>requires_grad<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__metagraph_1_1metagraph__impl_1_1_metagraph_1ab7ae47be11a28f4f446a1e14eb4ca449" kindref="member">block</ref><ref refid="classbittensor_1_1__metagraph_1_1metagraph__mock_1_1_mock_metagraph_1a77197965a8775ef718db3a07681a8424" kindref="member">block</ref><sp/>=<sp/>torch.nn.Parameter(<sp/>torch.tensor(<sp/>[0],<sp/>dtype=torch.int64),<sp/>requires_grad<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__metagraph_1_1metagraph__impl_1_1_metagraph_1a185ca62f18cad4f1ada8cb73208d466f" kindref="member">stake</ref><ref refid="classbittensor_1_1__metagraph_1_1metagraph__mock_1_1_mock_metagraph_1ae7edf9cd7e41ec6cefd3ce26c8ac5cb5" kindref="member">stake</ref><sp/>=<sp/>torch.nn.Parameter(<sp/><sp/>torch.tensor(<sp/>[],<sp/>dtype=torch.float32),<sp/>requires_grad=</highlight><highlight class="keyword">False</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__metagraph_1_1metagraph__impl_1_1_metagraph_1a82219c98ff57f15a0d74e599630c1fcb" kindref="member">ranks</ref><ref refid="classbittensor_1_1__metagraph_1_1metagraph__mock_1_1_mock_metagraph_1a2bf67c349961b2868f3815c30aacbe7f" kindref="member">ranks</ref><sp/>=<sp/>torch.nn.Parameter(<sp/><sp/>torch.tensor(<sp/>[],<sp/>dtype=torch.float32),<sp/>requires_grad=</highlight><highlight class="keyword">False</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__metagraph_1_1metagraph__impl_1_1_metagraph_1a3c6d23cfc981532eed5c7563a79820eb" kindref="member">trust</ref><ref refid="classbittensor_1_1__metagraph_1_1metagraph__mock_1_1_mock_metagraph_1aedb12482754167178446b808fa401203" kindref="member">trust</ref><sp/>=<sp/>torch.nn.Parameter(<sp/><sp/>torch.tensor(<sp/>[],<sp/>dtype=torch.float32),<sp/>requires_grad=</highlight><highlight class="keyword">False</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__metagraph_1_1metagraph__impl_1_1_metagraph_1aeb7bb38790a29bc561ed3ad9f4860b4f" kindref="member">consensus</ref><ref refid="classbittensor_1_1__metagraph_1_1metagraph__mock_1_1_mock_metagraph_1adb06f0d23b3f1c23bac545b88f3f8342" kindref="member">consensus</ref><sp/>=<sp/>torch.nn.Parameter(<sp/><sp/>torch.tensor(<sp/>[],<sp/>dtype=torch.float32),<sp/>requires_grad=</highlight><highlight class="keyword">False</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__metagraph_1_1metagraph__impl_1_1_metagraph_1a91bdcaa5b2a344403f1a09fa3ea4f961" kindref="member">incentive</ref><ref refid="classbittensor_1_1__metagraph_1_1metagraph__mock_1_1_mock_metagraph_1a2769534c5ba59908852f0633111218a9" kindref="member">incentive</ref><sp/>=<sp/>torch.nn.Parameter(<sp/><sp/>torch.tensor(<sp/>[],<sp/>dtype=torch.float32),<sp/>requires_grad=</highlight><highlight class="keyword">False</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__metagraph_1_1metagraph__impl_1_1_metagraph_1a2b130f5f585a9427c60c90757e844544" kindref="member">emission</ref><ref refid="classbittensor_1_1__metagraph_1_1metagraph__mock_1_1_mock_metagraph_1aa04c8ea40a5bed81d6eef4872154d07c" kindref="member">emission</ref><sp/>=<sp/>torch.nn.Parameter(<sp/><sp/>torch.tensor(<sp/>[],<sp/>dtype=torch.float32),<sp/>requires_grad=</highlight><highlight class="keyword">False</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__metagraph_1_1metagraph__impl_1_1_metagraph_1adf4008ea148a33631e41b20ddb00e9f4" kindref="member">dividends</ref><ref refid="classbittensor_1_1__metagraph_1_1metagraph__mock_1_1_mock_metagraph_1a87c5d79f7137c25da6494df8d2c7df6e" kindref="member">dividends</ref><sp/>=<sp/>torch.nn.Parameter(<sp/><sp/>torch.tensor(<sp/>[],<sp/>dtype=torch.float32),<sp/>requires_grad=</highlight><highlight class="keyword">False</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__metagraph_1_1metagraph__impl_1_1_metagraph_1a3466add2861b4ea82f24bd53afb69ec8" kindref="member">active</ref><ref refid="classbittensor_1_1__metagraph_1_1metagraph__mock_1_1_mock_metagraph_1af511084ff616c47bc50ae25fb508a363" kindref="member">active</ref><sp/>=<sp/>torch.nn.Parameter(<sp/><sp/>torch.tensor(<sp/>[],<sp/>dtype=torch.int64),<sp/>requires_grad=</highlight><highlight class="keyword">False</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__metagraph_1_1metagraph__impl_1_1_metagraph_1ad444e71fb042eed110700b0956f2f301" kindref="member">last_update</ref><ref refid="classbittensor_1_1__metagraph_1_1metagraph__mock_1_1_mock_metagraph_1a6c41f5bf65c630afdbfd13a39ee388a2" kindref="member">last_update</ref><sp/>=<sp/>torch.nn.Parameter(<sp/><sp/>torch.tensor(<sp/>[],<sp/>dtype=torch.int64),<sp/>requires_grad=</highlight><highlight class="keyword">False</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__metagraph_1_1metagraph__impl_1_1_metagraph_1a5aca6de2c3773ba3e3896b1759dfab69" kindref="member">weights</ref><ref refid="classbittensor_1_1__metagraph_1_1metagraph__mock_1_1_mock_metagraph_1aa9145451f15f9c2a0365359cd05304a4" kindref="member">weights</ref><sp/>=<sp/>torch.nn.Parameter(<sp/><sp/>torch.tensor(<sp/>[],<sp/>dtype=torch.float32),<sp/>requires_grad=</highlight><highlight class="keyword">False</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__metagraph_1_1metagraph__impl_1_1_metagraph_1a5839f65d24c057bff0997a53a755ec47" kindref="member">bonds</ref><ref refid="classbittensor_1_1__metagraph_1_1metagraph__mock_1_1_mock_metagraph_1a0a19adf9647187ed1107edd35aacf358" kindref="member">bonds</ref><sp/>=<sp/>torch.nn.Parameter(<sp/><sp/>torch.tensor(<sp/>[],<sp/>dtype=torch.int64),<sp/>requires_grad=</highlight><highlight class="keyword">False</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__metagraph_1_1metagraph__impl_1_1_metagraph_1aad0b83db87c6c1b3126f9f0b6eb5a84e" kindref="member">endpoints</ref><ref refid="classbittensor_1_1__metagraph_1_1metagraph__mock_1_1_mock_metagraph_1a43b0f0d5a538f9f3103bc93b946122cb" kindref="member">endpoints</ref><sp/>=<sp/>torch.nn.Parameter(<sp/>torch.tensor(<sp/>[],<sp/>dtype=torch.int64),<sp/>requires_grad=</highlight><highlight class="keyword">False</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__metagraph_1_1metagraph__impl_1_1_metagraph_1a0f06479517f3ac4c5011c1fc4b0f7328" kindref="member">uids</ref><ref refid="classbittensor_1_1__metagraph_1_1metagraph__mock_1_1_mock_metagraph_1ab4ce4f9a4395b29e0c06879110fc343e" kindref="member">uids</ref><sp/>=<sp/>torch.nn.Parameter(<sp/>torch.tensor([],<sp/>dtype<sp/>=<sp/>torch.int64),requires_grad=</highlight><highlight class="keyword">False</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__metagraph_1_1metagraph__impl_1_1_metagraph_1ac90ef36e9b9992d0677ed954fe064305" kindref="member">_endpoint_objs</ref><ref refid="classbittensor_1_1__metagraph_1_1metagraph__mock_1_1_mock_metagraph_1a8914133f11ded3b9489fb5b6ef13ef53" kindref="member">_endpoint_objs</ref><sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbittensor_1_1__metagraph_1_1metagraph__mock_1_1_mock_metagraph_1ab7db4705cd3e222262db487abf3d28a3" kindref="member">load</ref>(<sp/>self,<sp/>network:str<sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"><sp/><sp/>)<sp/>-&gt;<sp/></highlight><highlight class="stringliteral">&apos;Metagraph&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&quot;&quot;&quot;<sp/>Loads<sp/>this<sp/>metagraph<sp/>object&apos;s<sp/>state_dict<sp/>from<sp/>bittensor<sp/>root<sp/>dir.</highlight></codeline>
<codeline lineno="102"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args:<sp/></highlight></codeline>
<codeline lineno="103"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>network:<sp/>(:obj:`str`,<sp/>required):</highlight></codeline>
<codeline lineno="104"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Name<sp/>of<sp/>state_dict<sp/>to<sp/>load,<sp/>defaults<sp/>to<sp/>kusanagi</highlight></codeline>
<codeline lineno="105"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="106"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>network<sp/>==<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>network<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;mock&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>metagraph_path<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;~/.bittensor/&apos;</highlight><highlight class="normal"><sp/>+<sp/>str(network)<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;.pt&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>metagraph_path<sp/>=<sp/>os.path.expanduser(metagraph_path)</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>os.path.isfile(metagraph_path):</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__metagraph_1_1metagraph__impl_1_1_metagraph_1a455ff12130131fcd2e1d5d43a6881efb" kindref="member">load_from_path</ref>(<sp/>path<sp/>=<sp/>metagraph_path<sp/>)</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logger.warning(</highlight><highlight class="stringliteral">&apos;Did<sp/>not<sp/>load<sp/>metagraph<sp/>from<sp/>path:<sp/>{},<sp/>file<sp/>does<sp/>not<sp/>exist.<sp/>Run<sp/>metagraph.save()<sp/>first.&apos;</highlight><highlight class="normal">,<sp/>metagraph_path)</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>Exception<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>e:</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logger.exception(e)</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbittensor_1_1__metagraph_1_1metagraph__mock_1_1_mock_metagraph_1a0efd55ceaf680f8454edbb8842fb9ea7" kindref="member">save</ref>(<sp/>self,<sp/>network:str<sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"><sp/>)<sp/>-&gt;<sp/></highlight><highlight class="stringliteral">&apos;Metagraph&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&quot;&quot;&quot;<sp/>Saves<sp/>this<sp/>metagraph<sp/>object&apos;s<sp/>state_dict<sp/>under<sp/>bittensor<sp/>root<sp/>dir.</highlight></codeline>
<codeline lineno="121"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args:<sp/></highlight></codeline>
<codeline lineno="122"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>network:<sp/>(:obj:`str`,<sp/>required):</highlight></codeline>
<codeline lineno="123"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Name<sp/>of<sp/>state_dict,<sp/>defaults<sp/>to<sp/>kusanagi</highlight></codeline>
<codeline lineno="124"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="125"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>network<sp/>==<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>network<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;mock&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.<ref refid="classbittensor_1_1__metagraph_1_1metagraph__impl_1_1_metagraph_1a2883fe5417b02b40365c79e2a6894c95" kindref="member">save_to_path</ref>(<sp/>path<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;~/.bittensor/&apos;</highlight><highlight class="normal">,<sp/>filename<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;mock.pt&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbittensor_1_1__metagraph_1_1metagraph__mock_1_1_mock_metagraph_1a1d1f31ff458b9149e04553f2121a0686" kindref="member">sync</ref><sp/>(<sp/>self,<sp/>block:<sp/>int<sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">,<sp/>cached:<sp/>bool<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"><sp/>)<sp/>-&gt;<sp/></highlight><highlight class="stringliteral">&apos;Metagraph&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self</highlight></codeline>
    </programlisting>
    <location file="/Users/macthrasher/bittensor/bittensor/_metagraph/metagraph_mock.py"/>
  </compounddef>
</doxygen>
