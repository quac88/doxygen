<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="text__causallmnext__impl_8py" kind="file" language="Python">
    <compoundname>text_causallmnext_impl.py</compoundname>
    <innerclass refid="classbittensor_1_1__synapse_1_1text__causallmnext__impl_1_1_text_causal_l_m_next" prot="public">bittensor::_synapse::text_causallmnext_impl::TextCausalLMNext</innerclass>
    <innernamespace refid="namespacebittensor">bittensor</innernamespace>
    <innernamespace refid="namespacebittensor_1_1__synapse">bittensor::_synapse</innernamespace>
    <innernamespace refid="namespacebittensor_1_1__synapse_1_1text__causallmnext__impl">bittensor::_synapse::text_causallmnext_impl</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">#<sp/>The<sp/>MIT<sp/>License<sp/>(MIT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Copyright<sp/>©<sp/>2021<sp/>Yuma<sp/>Rao</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/>obtaining<sp/>a<sp/>copy<sp/>of<sp/>this<sp/>software<sp/>and<sp/>associated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">#<sp/>documentation<sp/>files<sp/>(the<sp/>“Software”),<sp/>to<sp/>deal<sp/>in<sp/>the<sp/>Software<sp/>without<sp/>restriction,<sp/>including<sp/>without<sp/>limitation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">#<sp/>the<sp/>rights<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>merge,<sp/>publish,<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/>sell<sp/>copies<sp/>of<sp/>the<sp/>Software,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">#<sp/>and<sp/>to<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is<sp/>furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">#<sp/>The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/>included<sp/>in<sp/>all<sp/>copies<sp/>or<sp/>substantial<sp/>portions<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">#<sp/>the<sp/>Software.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">#<sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>“AS<sp/>IS”,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">#<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">#<sp/>THE<sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">#<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">#<sp/>DEALINGS<sp/>IN<sp/>THE<sp/>SOFTWARE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>bittensor</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>torch</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>.synapse_impl<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>Synapse</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacebittensor_1_1utils_1_1tokenizer__utils" kindref="compound">bittensor.utils.tokenizer_utils</ref><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>compact_topk_token_phrases,<sp/>unravel_topk_token_phrases</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="classbittensor_1_1__synapse_1_1text__causallmnext__impl_1_1_text_causal_l_m_next" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classbittensor_1_1__synapse_1_1text__causallmnext__impl_1_1_text_causal_l_m_next" kindref="compound">TextCausalLMNext</ref>(<ref refid="classbittensor_1_1__synapse_1_1synapse__impl_1_1_synapse" kindref="compound">Synapse</ref>):</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>TextCausalLMNext<sp/>Synapse<sp/>type<sp/>for<sp/>next<sp/>token<sp/>prediction<sp/>from<sp/>language<sp/>models.</highlight></codeline>
<codeline lineno="26"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="27"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>synapse_type:<sp/>bittensor.proto.Synapse.SynapseType<sp/>=<sp/>bittensor.proto.Synapse.SynapseType.TEXT_CAUSAL_LM_NEXT</highlight></codeline>
<codeline lineno="28"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="29"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbittensor_1_1__synapse_1_1text__causallmnext__impl_1_1_text_causal_l_m_next_1ae9f525aff3fca9b069b5161e065b149f" kindref="member">__init__</ref>(</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self,</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>topk:<sp/>int<sp/>=<sp/>4096,</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forward_request_serializer_type:<sp/></highlight><highlight class="stringliteral">&apos;bittensor.proto.Serializer.Type&apos;</highlight><highlight class="normal"><sp/>=<sp/>bittensor.proto.Serializer.MSGPACK,</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forward_response_serializer_type:<sp/></highlight><highlight class="stringliteral">&apos;bittensor.proto.Serializer.Type&apos;</highlight><highlight class="normal"><sp/>=<sp/>bittensor.proto.Serializer.MSGPACK,</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>backward_request_serializer_type:<sp/></highlight><highlight class="stringliteral">&apos;bittensor.proto.Serializer.Type&apos;</highlight><highlight class="normal"><sp/>=<sp/>bittensor.proto.Serializer.MSGPACK,</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>backward_response_serializer_type:<sp/></highlight><highlight class="stringliteral">&apos;bittensor.proto.Serializer.Type&apos;</highlight><highlight class="normal"><sp/>=<sp/>bittensor.proto.Serializer.MSGPACK,</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>):</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>TextCausalLMNext<sp/>Synapse<sp/>initializer.</highlight></codeline>
<codeline lineno="38"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="39"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>topk<sp/>(:obj:`int`):</highlight></codeline>
<codeline lineno="40"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Specifies<sp/>the<sp/>number<sp/>of<sp/>topk<sp/>server<sp/>token<sp/>phrases<sp/>to<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">.</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forward_request_serializer_type<sp/>(:obj:`bittensor.proto.Serializer.Type`<sp/>of<sp/>shape<sp/>:obj:`(1)`,<sp/>`optional`,<sp/>:default:<sp/>`bittensor.proto.Serializer.MSGPACK`):</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serializer<sp/>used<sp/>to<sp/>pack<sp/>torch<sp/>tensors<sp/>on<sp/>forward<sp/>request.</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forward_response_serializer_type<sp/>(:obj:`bittensor.proto.Serializer.Type`<sp/>of<sp/>shape<sp/>:obj:`(1)`,<sp/>`optional`,<sp/>:default:<sp/>`bittensor.proto.Serializer.MSGPACK`):</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serializer<sp/>used<sp/>to<sp/>pack<sp/>torch<sp/>tensors<sp/>on<sp/>forward<sp/>response.</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>backward_request_serializer_type<sp/>(:obj:`bittensor.proto.Serializer.Type`<sp/>of<sp/>shape<sp/>:obj:`(1)`,<sp/>`optional`,<sp/>:default:<sp/>`bittensor.proto.Serializer.MSGPACK`):</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serializer<sp/>used<sp/>to<sp/>pack<sp/>torch<sp/>tensors<sp/>on<sp/>forward<sp/>request.</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>backward_response_serializer_type<sp/>(:obj:`bittensor.proto.Serializer.Type`<sp/>of<sp/>shape<sp/>:obj:`(1)`,<sp/>`optional`,<sp/>:default:<sp/>`bittensor.proto.Serializer.MSGPACK`):</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serializer<sp/>used<sp/>to<sp/>pack<sp/>torch<sp/>tensors<sp/>on<sp/>backward<sp/>response.</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns:</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TextCausalLMNext<sp/>(:obj:`TextCausalLMNext`,<sp/>`required`):</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TextCausalLMNext<sp/>instance<sp/>adapter<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">.</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="53"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>super().<ref refid="classbittensor_1_1__synapse_1_1text__causallmnext__impl_1_1_text_causal_l_m_next_1ae9f525aff3fca9b069b5161e065b149f" kindref="member">__init__</ref>(</highlight></codeline>
<codeline lineno="54"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forward_request_serializer_type,</highlight></codeline>
<codeline lineno="55"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forward_response_serializer_type,</highlight></codeline>
<codeline lineno="56"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>backward_request_serializer_type,</highlight></codeline>
<codeline lineno="57"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>backward_response_serializer_type</highlight></codeline>
<codeline lineno="58"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="59"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__synapse_1_1text__causallmnext__impl_1_1_text_causal_l_m_next_1a57a4c683206b65be8de467c2f95c7fa3" kindref="member">topk</ref><sp/>=<sp/>topk</highlight></codeline>
<codeline lineno="60"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__synapse_1_1synapse__impl_1_1_synapse_1af413630b0f381839eebcbf2c8431d181" kindref="member">synapse_type</ref><ref refid="classbittensor_1_1__synapse_1_1text__causallmnext__impl_1_1_text_causal_l_m_next_1a95e05ba2bb3a75605515337a82516bf1" kindref="member">synapse_type</ref><ref refid="classbittensor_1_1__synapse_1_1text__causallmnext__impl_1_1_text_causal_l_m_next_1a689e650e07b8cdb6d932713bf098c532" kindref="member">synapse_type</ref><sp/>=<sp/>TextCausalLMNext.synapse_type</highlight></codeline>
<codeline lineno="61"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="62"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">__repr__(self)<sp/>-&gt;<sp/>str:</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.<ref refid="classbittensor_1_1__synapse_1_1synapse__impl_1_1_synapse_1a49b7378ad62c7b9dd4aae80f81703234" kindref="member">__str__</ref><ref refid="classbittensor_1_1__synapse_1_1text__causallmnext__impl_1_1_text_causal_l_m_next_1ab738a828349de66bcd0c43c96220d901" kindref="member">__str__</ref>()</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">__str__(self)<sp/>-&gt;<sp/>str:</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;TextCausalLMNext&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">@staticmethod</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbittensor_1_1__synapse_1_1text__causallmnext__impl_1_1_text_causal_l_m_next_1aa8628f53b5c826bba85685bb3703e80d" kindref="member">deserialize_from_instance_proto</ref>(instance_proto:<sp/>bittensor.proto.Synapse)<sp/>-&gt;<sp/></highlight><highlight class="stringliteral">&apos;TextCausalLMNext&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classbittensor_1_1__synapse_1_1text__causallmnext__impl_1_1_text_causal_l_m_next" kindref="compound">TextCausalLMNext</ref>(</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>topk=instance_proto.topk,</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forward_request_serializer_type=instance_proto.forward_request_serializer_type,</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forward_response_serializer_type=instance_proto.forward_response_serializer_type,</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>backward_request_serializer_type=instance_proto.backward_request_serializer_type,</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>backward_response_serializer_type=instance_proto.backward_response_serializer_type,</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">@staticmethod</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbittensor_1_1__synapse_1_1text__causallmnext__impl_1_1_text_causal_l_m_next_1a809012c249cd991ee6ca7bdc61a5acfc" kindref="member">deserialize_from_wire_proto</ref>(wire_proto:<sp/>bittensor.proto.Synapse)<sp/>-&gt;<sp/></highlight><highlight class="stringliteral">&apos;TextCausalLMNext&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>instance_proto<sp/>=<sp/>bittensor.proto.Synapse.TextCausalLMNext()</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>instance_proto.ParseFromString(wire_proto.synapse_data)</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TextCausalLMNext.deserialize_from_instance_proto(instance_proto)</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbittensor_1_1__synapse_1_1text__causallmnext__impl_1_1_text_causal_l_m_next_1a68dbcc0b874707d3304df86a47955ea8" kindref="member">serialize_to_instance_proto</ref>(self)<sp/>-&gt;<sp/>&apos;bittensor.proto.Synapse.TextCausalLMNext&apos;:</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bittensor.proto.Synapse.TextCausalLMNext(</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>topk=self.<ref refid="classbittensor_1_1__synapse_1_1text__causallmnext__impl_1_1_text_causal_l_m_next_1a57a4c683206b65be8de467c2f95c7fa3" kindref="member">topk</ref>,</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forward_request_serializer_type=self.<ref refid="classbittensor_1_1__synapse_1_1synapse__impl_1_1_synapse_1ad3dd23864f4620b0622bea9777aa63b6" kindref="member">forward_request_serializer_type</ref>,</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forward_response_serializer_type=self.<ref refid="classbittensor_1_1__synapse_1_1synapse__impl_1_1_synapse_1af89940deb45bd9d18a7e1c15090a8466" kindref="member">forward_response_serializer_type</ref>,</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>backward_request_serializer_type=self.<ref refid="classbittensor_1_1__synapse_1_1synapse__impl_1_1_synapse_1a6ac9ff8fb2e6cf1d01b1d6fba4bead9e" kindref="member">backward_request_serializer_type</ref>,</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>backward_response_serializer_type=self.<ref refid="classbittensor_1_1__synapse_1_1synapse__impl_1_1_synapse_1a7a08c81b8b0a17e7913c52d17735aed5" kindref="member">backward_response_serializer_type</ref>,</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbittensor_1_1__synapse_1_1text__causallmnext__impl_1_1_text_causal_l_m_next_1a5e95672266c3ac309400b0daa7e19d8d" kindref="member">serialize_to_wire_proto</ref>(self,<sp/>code:<sp/></highlight><highlight class="stringliteral">&apos;bittensor.proto.ReturnCode&apos;</highlight><highlight class="normal"><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message:<sp/>str<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">)<sp/>-&gt;<sp/>bittensor.proto.Synapse:</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bittensor.proto.Synapse(</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>synapse_data=self.<ref refid="classbittensor_1_1__synapse_1_1synapse__impl_1_1_synapse_1a9e2c93dbd788e9fb778997874f6429fb" kindref="member">serialize_to_instance_proto</ref><ref refid="classbittensor_1_1__synapse_1_1text__causallmnext__impl_1_1_text_causal_l_m_next_1a68dbcc0b874707d3304df86a47955ea8" kindref="member">serialize_to_instance_proto</ref>().SerializeToString(),</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>synapse_type=TextCausalLMNext.synapse_type,</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_code=code,</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message=message</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">check_forward_request_tensor(self,<sp/>forward_request_tensor):</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>forward_request_tensor:<sp/>[batch_size,<sp/>sequence_len]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len(forward_request_tensor.shape)<sp/>!=<sp/>2<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forward_request_tensor.shape[0]<sp/>==<sp/>0<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forward_request_tensor.shape[1]<sp/>==<sp/>0</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>):</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>ValueError(f</highlight><highlight class="stringliteral">&quot;forward_request_tensor.shape<sp/>must<sp/>be<sp/>in<sp/>[-1,<sp/>-1],<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&quot;got:<sp/>{list(forward_request_tensor.shape)}<sp/>for<sp/>synapse:<sp/>{self}&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">check_forward_response_tensor(self,<sp/>forward_request_tensor,<sp/>forward_response_tensor):</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>forward_request_tensor:<sp/>[batch_size,<sp/>sequence_len]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>forward_response_tensor:<sp/>[<sp/>&gt;=<sp/>batch_size<sp/>*<sp/>(2<sp/>*<sp/>topk<sp/>+<sp/>1)]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>forward_response_tensor<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>ValueError(</highlight><highlight class="stringliteral">&quot;Empty<sp/>Response&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len(forward_response_tensor.shape)<sp/>!=<sp/>1<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forward_response_tensor.size(0)<sp/>&lt;<sp/>forward_request_tensor.shape[0]<sp/>*<sp/>(2<sp/>*<sp/>self.<ref refid="classbittensor_1_1__synapse_1_1text__causallmnext__impl_1_1_text_causal_l_m_next_1a57a4c683206b65be8de467c2f95c7fa3" kindref="member">topk</ref><sp/>+<sp/>1)</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>):</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>ValueError(f</highlight><highlight class="stringliteral">&quot;forward_response_tensor.shape<sp/>must<sp/>be<sp/>in<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&quot;[&gt;={forward_request_tensor.shape[0]}<sp/>x<sp/>(2<sp/>x<sp/>{self.topk}<sp/>+<sp/>1)],<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&quot;got:<sp/>{forward_response_tensor.size(0)}<sp/>for<sp/>synapse:<sp/>{self}&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>atol<sp/>=<sp/>1e-6<sp/><sp/></highlight><highlight class="comment">#<sp/>absolute<sp/>tolerance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(forward_response_tensor<sp/>&lt;<sp/>-atol).any():</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>ValueError(</highlight><highlight class="stringliteral">&quot;forward_response_tensor<sp/>values<sp/>below<sp/>tolerance.&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">check_backward_request_gradient(self,<sp/>forward_request_tensor,<sp/>backward_request_gradient):</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>forward_request_tensor:<sp/>[batch_size,<sp/>sequence_len]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>backward_request_gradient:<sp/>[batch_size,<sp/>(topk<sp/>+<sp/>1),<sp/>max_len]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len(backward_request_gradient.shape)<sp/>!=<sp/>3<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>backward_request_gradient.size(0)<sp/>!=<sp/>forward_request_tensor.shape[0]<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>backward_request_gradient.size(1)<sp/>!=<sp/>(self.<ref refid="classbittensor_1_1__synapse_1_1text__causallmnext__impl_1_1_text_causal_l_m_next_1a57a4c683206b65be8de467c2f95c7fa3" kindref="member">topk</ref><sp/>+<sp/>1)</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>):</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>ValueError(f</highlight><highlight class="stringliteral">&quot;backward_request_gradient.shape<sp/>must<sp/>be<sp/>in<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&quot;[{forward_request_tensor.shape[0]},<sp/>({self.topk}<sp/>+<sp/>1),<sp/>max_len],<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&quot;got:<sp/>{backward_request_gradient.shape}<sp/>for<sp/>synapse:<sp/>{self}&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">encode_forward_request_tensor(self,<sp/>forward_request_tensor:<sp/>torch.Tensor)<sp/>-&gt;<sp/>torch.Tensor:</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>forward_request_tensor</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">decode_forward_request_tensor(self,<sp/>forward_request_tensor:<sp/>torch.Tensor)<sp/>-&gt;<sp/>torch.Tensor:</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>forward_request_tensor</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbittensor_1_1__synapse_1_1text__causallmnext__impl_1_1_text_causal_l_m_next_1aa09a1f4173c55a677c4de0e3cb7ffa2b" kindref="member">encode_forward_response_tensor</ref>(self,<sp/>forward_response_tensor:<sp/>torch.Tensor)<sp/>-&gt;<sp/>torch.Tensor:</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>Compact<sp/>[batch_size,<sp/>(topk<sp/>+<sp/>1),<sp/>max_len]<sp/>topk<sp/>std_token_phrases<sp/>to<sp/>[<sp/>&gt;=<sp/>batch_size<sp/>*<sp/>(2<sp/>*<sp/>topk<sp/>+<sp/>1)].<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compact_topk<sp/>=<sp/>compact_topk_token_phrases(forward_response_tensor)</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>compact_topk:<sp/>[sum_b(sum_k(len(phrase_k)<sp/>+<sp/>1)_b)]<sp/>Compacted<sp/>1-D<sp/>tensor<sp/>&gt;=<sp/>batch_size<sp/>*<sp/>(2<sp/>*<sp/>topk<sp/>+<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>compact_topk</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbittensor_1_1__synapse_1_1text__causallmnext__impl_1_1_text_causal_l_m_next_1a81a958ebdd205c9f0d2871646a43e253" kindref="member">decode_forward_response_tensor</ref>(self,<sp/>forward_response_tensor:<sp/>torch.Tensor)<sp/>-&gt;<sp/>torch.Tensor:</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>Unravel<sp/>[<sp/>&gt;=<sp/>batch_size<sp/>*<sp/>(2<sp/>*<sp/>topk<sp/>+<sp/>1)]<sp/>into<sp/>[batch_size,<sp/>(topk<sp/>+<sp/>1),<sp/>max_len]<sp/>topk<sp/>std_token_phrases.<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>topk_tensor<sp/>=<sp/>unravel_topk_token_phrases(forward_response_tensor,<sp/>topk=self.<ref refid="classbittensor_1_1__synapse_1_1text__causallmnext__impl_1_1_text_causal_l_m_next_1a57a4c683206b65be8de467c2f95c7fa3" kindref="member">topk</ref>)</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>topk_tensor<sp/><sp/></highlight><highlight class="comment">#<sp/>[batch_size,<sp/>(topk<sp/>+<sp/>1),<sp/>max_len]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">encode_backward_response_gradient(self,<sp/>backward_request_gradient:<sp/>torch.Tensor)<sp/>-&gt;<sp/>torch.Tensor:</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>backward_request_gradient</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">decode_backward_response_gradient(self,<sp/>backward_request_gradient:<sp/>torch.Tensor)<sp/>-&gt;<sp/>torch.Tensor:</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>backward_request_gradient</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbittensor_1_1__synapse_1_1text__causallmnext__impl_1_1_text_causal_l_m_next_1a31ad56adec5f43d64bcd6a9b9215a14c" kindref="member">encode_backward_request_gradient</ref>(self,<sp/>backward_response_gradient:<sp/>torch.Tensor)<sp/>-&gt;<sp/>torch.Tensor:</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>Compact<sp/>gradients<sp/>of<sp/>[batch_size,<sp/>(topk<sp/>+<sp/>1),<sp/>max_len]<sp/>to<sp/>[2<sp/>+<sp/>batch_size<sp/>*<sp/>(topk<sp/>+<sp/>1)].<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>batch_size,<sp/>topk_p1,<sp/>max_len<sp/>=<sp/>backward_response_gradient.shape</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dims<sp/>=<sp/>torch.tensor([batch_size,<sp/>max_len]).to(backward_response_gradient.device)</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prob_grads<sp/>=<sp/>backward_response_gradient[:,<sp/>:,<sp/>0]<sp/><sp/></highlight><highlight class="comment">#<sp/>[batch_size,<sp/>topk<sp/>+<sp/>1]<sp/>first<sp/>column<sp/>w/<sp/>prob<sp/>grads</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>encoded_gradient<sp/>=<sp/>torch.hstack((dims,<sp/>prob_grads.flatten()))<sp/><sp/></highlight><highlight class="comment">#<sp/>[2<sp/>+<sp/>batch_size<sp/>*<sp/>(topk<sp/>+<sp/>1)]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>encoded_gradient<sp/><sp/></highlight><highlight class="comment">#<sp/>[2<sp/>+<sp/>batch_size<sp/>*<sp/>(topk<sp/>+<sp/>1)]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbittensor_1_1__synapse_1_1text__causallmnext__impl_1_1_text_causal_l_m_next_1ae83d4fadedfb6991b11e4493e2de3422" kindref="member">decode_backward_request_gradient</ref>(self,<sp/>backward_response_gradient:<sp/>torch.Tensor)<sp/>-&gt;<sp/>torch.Tensor:</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>Restructure<sp/>[2<sp/>+<sp/>batch_size<sp/>*<sp/>(topk<sp/>+<sp/>1)]<sp/>prob<sp/>grads<sp/>into<sp/>[batch_size,<sp/>(topk<sp/>+<sp/>1),<sp/>max_len].<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>batch_size<sp/>=<sp/>int(backward_response_gradient[0].item())</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_len<sp/>=<sp/>int(backward_response_gradient[1].item())</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decoded_gradient<sp/>=<sp/>torch.zeros((batch_size,<sp/>self.<ref refid="classbittensor_1_1__synapse_1_1text__causallmnext__impl_1_1_text_causal_l_m_next_1a57a4c683206b65be8de467c2f95c7fa3" kindref="member">topk</ref><sp/>+<sp/>1,<sp/>max_len)).to(backward_response_gradient.device)</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decoded_gradient[:,<sp/>:,<sp/>0]<sp/>=<sp/>backward_response_gradient[2:].reshape(batch_size,<sp/>self.<ref refid="classbittensor_1_1__synapse_1_1text__causallmnext__impl_1_1_text_causal_l_m_next_1a57a4c683206b65be8de467c2f95c7fa3" kindref="member">topk</ref><sp/>+<sp/>1)</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>decoded_gradient<sp/><sp/></highlight><highlight class="comment">#<sp/>[batch_size,<sp/>(topk<sp/>+<sp/>1),<sp/>max_len]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbittensor_1_1__synapse_1_1text__causallmnext__impl_1_1_text_causal_l_m_next_1a8e7acce5e190c3797bbf5bea50177785" kindref="member">nill_forward_response_tensor</ref>(self,<sp/>forward_request_tensor:<sp/>torch.Tensor,</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>encoded=</highlight><highlight class="keyword">False</highlight><highlight class="normal">,<sp/>ignore_index=-100)<sp/>-&gt;<sp/>torch.Tensor:</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>forward_request_tensor.dim()<sp/>==<sp/>0<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>forward_request_tensor.shape[0]<sp/>==<sp/>0:</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>torch.tensor([])</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forward_response_tensor<sp/>=<sp/>torch.zeros(forward_request_tensor.shape[0],<sp/>(self.<ref refid="classbittensor_1_1__synapse_1_1text__causallmnext__impl_1_1_text_causal_l_m_next_1a57a4c683206b65be8de467c2f95c7fa3" kindref="member">topk</ref><sp/>+<sp/>1),<sp/>1<sp/>+<sp/>1)</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forward_response_tensor[:,<sp/>:,<sp/>1]<sp/>=<sp/>2<sp/><sp/></highlight><highlight class="comment">#<sp/>set<sp/>2<sp/>&lt;=<sp/>token_ids<sp/>to<sp/>preserve<sp/>0<sp/>&lt;=<sp/>probs<sp/>&lt;=<sp/>1<sp/>in<sp/>column<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forward_response_tensor[:,<sp/>self.<ref refid="classbittensor_1_1__synapse_1_1text__causallmnext__impl_1_1_text_causal_l_m_next_1a57a4c683206b65be8de467c2f95c7fa3" kindref="member">topk</ref>::(self.<ref refid="classbittensor_1_1__synapse_1_1text__causallmnext__impl_1_1_text_causal_l_m_next_1a57a4c683206b65be8de467c2f95c7fa3" kindref="member">topk</ref><sp/>+<sp/>1),<sp/>1]<sp/>=<sp/>ignore_index<sp/><sp/></highlight><highlight class="comment">#<sp/>add<sp/>ignore_index<sp/>padding<sp/>after<sp/>floor_prob</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>encoded:</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.<ref refid="classbittensor_1_1__synapse_1_1synapse__impl_1_1_synapse_1a652c329c4cfa85daf0c250a0e8547ac5" kindref="member">encode_forward_response_tensor</ref><ref refid="classbittensor_1_1__synapse_1_1text__causallmnext__impl_1_1_text_causal_l_m_next_1aa09a1f4173c55a677c4de0e3cb7ffa2b" kindref="member">encode_forward_response_tensor</ref>(forward_response_tensor)</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>forward_response_tensor</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbittensor_1_1__synapse_1_1text__causallmnext__impl_1_1_text_causal_l_m_next_1a108d0c46f069abd17695c016047aeecc" kindref="member">nill_backward_response_tensor</ref>(self,<sp/>forward_request_tensor:<sp/>torch.Tensor)<sp/>-&gt;<sp/>torch.Tensor:</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>forward_request_tensor.dim()<sp/>==<sp/>0<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>forward_request_tensor.shape[0]<sp/>==<sp/>0:</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>torch.tensor([])</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>torch.zeros((forward_request_tensor.shape[0],<sp/>(self.<ref refid="classbittensor_1_1__synapse_1_1text__causallmnext__impl_1_1_text_causal_l_m_next_1a57a4c683206b65be8de467c2f95c7fa3" kindref="member">topk</ref><sp/>+<sp/>1),<sp/>1<sp/>+<sp/>1),<sp/>dtype=torch.float32)</highlight></codeline>
    </programlisting>
    <location file="/Users/macthrasher/bittensor/bittensor/_synapse/text_causallmnext_impl.py"/>
  </compounddef>
</doxygen>
