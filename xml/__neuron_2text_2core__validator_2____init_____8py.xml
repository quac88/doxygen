<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="__neuron_2text_2core__validator_2____init_____8py" kind="file" language="Python">
    <compoundname>__init__.py</compoundname>
    <innerclass refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron" prot="public">bittensor::_neuron::text::core_validator::neuron</innerclass>
    <innerclass refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus" prot="public">bittensor::_neuron::text::core_validator::nucleus</innerclass>
    <innernamespace refid="namespacebittensor">bittensor</innernamespace>
    <innernamespace refid="namespacebittensor_1_1__neuron">bittensor::_neuron</innernamespace>
    <innernamespace refid="namespacebittensor_1_1__neuron_1_1text">bittensor::_neuron::text</innernamespace>
    <innernamespace refid="namespacebittensor_1_1__neuron_1_1text_1_1core__validator">bittensor::_neuron::text::core_validator</innernamespace>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacebittensor_1_1__neuron_1_1text_1_1core__validator_1abf245d31bf2b69b6542bb98662ae1b70" prot="public" static="no" mutable="no">
        <type>logger</type>
        <definition>logger bittensor::_neuron::text::core_validator.logger</definition>
        <argsstring></argsstring>
        <name>logger</name>
        <qualifiedname>bittensor._neuron.text.core_validator.logger</qualifiedname>
        <initializer>=  logger.opt( colors=True )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/macthrasher/bittensor/bittensor/_neuron/text/core_validator/__init__.py" line="53" column="1" bodyfile="/Users/macthrasher/bittensor/bittensor/_neuron/text/core_validator/__init__.py" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacebittensor_1_1__neuron_1_1text_1_1core__validator_1ac66a622a85b1ee7ea03d6442aa7a04c0" prot="public" static="no" mutable="no">
        <type>Console</type>
        <definition>Console bittensor::_neuron::text::core_validator.console</definition>
        <argsstring></argsstring>
        <name>console</name>
        <qualifiedname>bittensor._neuron.text.core_validator.console</qualifiedname>
        <initializer>=  Console()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/macthrasher/bittensor/bittensor/_neuron/text/core_validator/__init__.py" line="54" column="1" bodyfile="/Users/macthrasher/bittensor/bittensor/_neuron/text/core_validator/__init__.py" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacebittensor_1_1__neuron_1_1text_1_1core__validator_1a6117e317add107345576af8a89a59aa7" prot="public" static="no" mutable="no">
        <type></type>
        <definition>bittensor::_neuron::text::core_validator.show_locals</definition>
        <argsstring></argsstring>
        <name>show_locals</name>
        <qualifiedname>bittensor._neuron.text.core_validator.show_locals</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/macthrasher/bittensor/bittensor/_neuron/text/core_validator/__init__.py" line="55" column="1" bodyfile="/Users/macthrasher/bittensor/bittensor/_neuron/text/core_validator/__init__.py" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacebittensor_1_1__neuron_1_1text_1_1core__validator_1a81427319fc32ca2122c1af5aeec009a6" prot="public" static="no" mutable="no">
        <type>list</type>
        <definition>list bittensor::_neuron::text::core_validator.neuron_stats_columns</definition>
        <argsstring></argsstring>
        <name>neuron_stats_columns</name>
        <qualifiedname>bittensor._neuron.text.core_validator.neuron_stats_columns</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/macthrasher/bittensor/bittensor/_neuron/text/core_validator/__init__.py" line="59" column="1" bodyfile="/Users/macthrasher/bittensor/bittensor/_neuron/text/core_validator/__init__.py" bodystart="59" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacebittensor_1_1__neuron_1_1text_1_1core__validator_1afbddc9ae968b91105cb4845cdec271d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def bittensor._neuron.text.core_validator.scaling_law_loss_to_params</definition>
        <argsstring>(loss)</argsstring>
        <name>scaling_law_loss_to_params</name>
        <qualifiedname>bittensor._neuron.text.core_validator.scaling_law_loss_to_params</qualifiedname>
        <param>
          <type>loss</type>
          <defname>loss</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim> (OpenAI scaling laws) Kaplan, Jared, et al. &quot;Scaling laws for neural language models.&quot; arXiv:2001.08361 (2020)
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/macthrasher/bittensor/bittensor/_neuron/text/core_validator/__init__.py" line="1054" column="1" bodyfile="/Users/macthrasher/bittensor/bittensor/_neuron/text/core_validator/__init__.py" bodystart="1054" bodyend="1061"/>
      </memberdef>
      <memberdef kind="function" id="namespacebittensor_1_1__neuron_1_1text_1_1core__validator_1a156659d617f14885b3e5c58286bf0ef5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Tuple[torch.FloatTensor, Dict]</type>
        <definition> Tuple[torch.FloatTensor, Dict] bittensor._neuron.text.core_validator.textcausallm</definition>
        <argsstring>(torch.Tensor uids, List[List[torch.FloatTensor]] query_responses, List[torch.LongTensor] return_ops, List[torch.FloatTensor] times, torch.FloatTensor routing_score, torch.FloatTensor inputs, int validation_len, Callable loss_fct, float scaling_law_power, float synergy_scaling_law_power, float logits_divergence_penalty, int console_width, logging, &apos;bittensor.TextCausalLM&apos; synapse=None, int index_s=0)</argsstring>
        <name>textcausallm</name>
        <qualifiedname>bittensor._neuron.text.core_validator.textcausallm</qualifiedname>
        <param>
          <type>torch.Tensor</type>
          <declname>uids</declname>
        </param>
        <param>
          <type>List]</type>
          <declname>query_responses</declname>
          <array>[List[torch.FloatTensor]</array>
        </param>
        <param>
          <type>List</type>
          <declname>return_ops</declname>
          <array>[torch.LongTensor]</array>
        </param>
        <param>
          <type>List</type>
          <declname>times</declname>
          <array>[torch.FloatTensor]</array>
        </param>
        <param>
          <type>torch.FloatTensor</type>
          <declname>routing_score</declname>
        </param>
        <param>
          <type>torch.FloatTensor</type>
          <declname>inputs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>validation_len</declname>
        </param>
        <param>
          <type>Callable</type>
          <declname>loss_fct</declname>
        </param>
        <param>
          <type>float</type>
          <declname>scaling_law_power</declname>
        </param>
        <param>
          <type>float</type>
          <declname>synergy_scaling_law_power</declname>
        </param>
        <param>
          <type>float</type>
          <declname>logits_divergence_penalty</declname>
        </param>
        <param>
          <type>int</type>
          <declname>console_width</declname>
        </param>
        <param>
          <type>logging</type>
          <defname>logging</defname>
        </param>
        <param>
          <type>&apos;<ref refid="classbittensor_1_1__synapse_1_1text__causallm__impl_1_1_text_causal_l_m" kindref="compound">bittensor.TextCausalLM</ref>&apos;</type>
          <declname>synapse</declname>
          <defval>None</defval>
        </param>
        <param>
          <type>int</type>
          <declname>index_s</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Calculate Shapley values and neuron response validation measure statistics, given TextCausalLM synapse responses.
Args:
    uids (:obj:`torch.Tensor`, `required`): [num_neurons]
        Neuron UIDs.
    query_responses (:obj:`List[List[torch.FloatTensor]]`, `required`):
        List of outputs from synapses, each a list of size num_endpoints of tensors with relevant size. Non-responses are zeroes of relevant
        synapse shape. Shape num_synapses * ( num_endpoints * ( -1, -1, -1 ) )
    return_ops (:obj:`List[torch.LongTensor]` of shape :obj:`[num_endpoints]`, `required`):
        Return code per call per synapse.
    times (:obj:`List [torch.FloatTensor]` of shape :obj:`[num_endpoints]`, `required`):
        Times per call per synapse.
    routing_score (:obj:`torch.FloatTensor`, `required`):
        [metagraph.n] Predictive routing score per endpoint in the metagraph, mean over the batch.
    inputs (:obj:`torch.FloatTensor`, `required`):
        [batch_size, sequence_len + validation_len] Token batch of original inputs with validation tokens.
    validation_len (:obj:`int`, `required`):
        Number of held-out phrase token batch for extended validation, not sent to neurons.
    loss_fct (:obj:`Callable`, `required`):
        CrossEntropy loss function to use.
    scaling_law_power (:obj:`float`, `required`):
        Power for modified scaling law, powered down to improve dynamic range, e.g. 3 → 6 nats for 0.5.
    synergy_scaling_law_power (:obj:`float`, `required`):
        Power for synergy modified scaling law, powered down to improve dynamic range, e.g. 3 → 6 nats for 0.5.
    logits_divergence_penalty (:obj:`float`, `required`):
        Penalty scaling for logits divergence.
    console_width (:obj:`int`, `required`):
        Config console width for table print.
    logging (:obj:`bool`, `required`):
        Log tables to console.
    synapse (:obj:`bittensor.TextCausalLM`, `optional`):
        TextCausalLM synapse object.
    index_s (:obj:`int`, `optional`):
        Index of synapse to extract responses.

Returns:
    loss (:obj:`torch.FloatTensor`):
        Loss for training validator nucleus and dendrite backward to endpoints.
    stats (:obj:`Dict`, `required`):
        Statistics per endpoint for this batch.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/macthrasher/bittensor/bittensor/_neuron/text/core_validator/__init__.py" line="1062" column="1" bodyfile="/Users/macthrasher/bittensor/bittensor/_neuron/text/core_validator/__init__.py" bodystart="1067" bodyend="1190"/>
      </memberdef>
      <memberdef kind="function" id="namespacebittensor_1_1__neuron_1_1text_1_1core__validator_1ae13e132bc899ab97f56d1243dfdd9628" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Tuple[torch.FloatTensor, Dict]</type>
        <definition> Tuple[torch.FloatTensor, Dict] bittensor._neuron.text.core_validator.textcausallmnext</definition>
        <argsstring>(torch.Tensor uids, List[List[torch.FloatTensor]] query_responses, List[torch.LongTensor] return_ops, List[torch.FloatTensor] times, torch.FloatTensor routing_score, torch.FloatTensor inputs, int validation_len, Callable loss_fct, float scaling_law_power, float synergy_scaling_law_power, float logits_divergence_penalty, int console_width, logging, &apos;bittensor.TextCausalLMNext&apos; synapse=None, int index_s=0)</argsstring>
        <name>textcausallmnext</name>
        <qualifiedname>bittensor._neuron.text.core_validator.textcausallmnext</qualifiedname>
        <param>
          <type>torch.Tensor</type>
          <declname>uids</declname>
        </param>
        <param>
          <type>List]</type>
          <declname>query_responses</declname>
          <array>[List[torch.FloatTensor]</array>
        </param>
        <param>
          <type>List</type>
          <declname>return_ops</declname>
          <array>[torch.LongTensor]</array>
        </param>
        <param>
          <type>List</type>
          <declname>times</declname>
          <array>[torch.FloatTensor]</array>
        </param>
        <param>
          <type>torch.FloatTensor</type>
          <declname>routing_score</declname>
        </param>
        <param>
          <type>torch.FloatTensor</type>
          <declname>inputs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>validation_len</declname>
        </param>
        <param>
          <type>Callable</type>
          <declname>loss_fct</declname>
        </param>
        <param>
          <type>float</type>
          <declname>scaling_law_power</declname>
        </param>
        <param>
          <type>float</type>
          <declname>synergy_scaling_law_power</declname>
        </param>
        <param>
          <type>float</type>
          <declname>logits_divergence_penalty</declname>
        </param>
        <param>
          <type>int</type>
          <declname>console_width</declname>
        </param>
        <param>
          <type>logging</type>
          <defname>logging</defname>
        </param>
        <param>
          <type>&apos;<ref refid="classbittensor_1_1__synapse_1_1text__causallmnext__impl_1_1_text_causal_l_m_next" kindref="compound">bittensor.TextCausalLMNext</ref>&apos;</type>
          <declname>synapse</declname>
          <defval>None</defval>
        </param>
        <param>
          <type>int</type>
          <declname>index_s</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Calculate Shapley values and neuron response validation measure statistics, given TextCausalLMNext synapse responses.
    Args:
        uids (:obj:`torch.Tensor`, `required`): [num_neurons]
            Neuron UIDs.
        query_responses (:obj:`List[List[torch.FloatTensor]]`, `required`):
            List of outputs from synapses, each a list of size num_endpoints of tensors with relevant size. Non-responses are zeroes of relevant
            synapse shape. Shape num_synapses * ( num_endpoints * ( -1, -1, -1 ) )
        return_ops (:obj:`List[torch.LongTensor]` of shape :obj:`[num_endpoints]`, `required`):
            Return code per call per synapse.
        times (:obj:`List [torch.FloatTensor]` of shape :obj:`[num_endpoints]`, `required`):
            Times per call per synapse.
        routing_score (:obj:`torch.FloatTensor`, `required`):
            [metagraph.n] Predictive routing score per endpoint in the metagraph, mean over the batch.
        inputs (:obj:`torch.FloatTensor`, `required`):
            [batch_size, sequence_len + validation_len] Token batch of original inputs with validation tokens.
        validation_len (:obj:`int`, `required`):
            Number of held-out phrase token batch for extended validation, not sent to neurons.
        loss_fct (:obj:`Callable`, `required`):
            CrossEntropy loss function to use.
        scaling_law_power (:obj:`float`, `required`):
            Power for modified scaling law, powered down to improve dynamic range, e.g. 3 → 6 nats for 0.5.
        synergy_scaling_law_power (:obj:`float`, `required`):
            Power for synergy modified scaling law, powered down to improve dynamic range, e.g. 3 → 6 nats for 0.5.
        logits_divergence_penalty (:obj:`float`, `required`):
            Penalty scaling for logits divergence.
        console_width (:obj:`int`, `required`):
            Config console width for table print.
        logging (:obj:`bool`, `required`):
            Log tables to console.
        synapse (:obj:`bittensor.TextCausalLMNext`, `optional`):
            TextCausalLMNext Synapse object.
        index_s (:obj:`int`, `optional`):
            Index of synapse to extract responses.

    Returns:
        loss (:obj:`torch.FloatTensor`):
            Loss for training validator nucleus and dendrite backward to endpoints.
        stats (:obj:`Dict`, `required`):
            Statistics per endpoint for this batch.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/macthrasher/bittensor/bittensor/_neuron/text/core_validator/__init__.py" line="1191" column="1" bodyfile="/Users/macthrasher/bittensor/bittensor/_neuron/text/core_validator/__init__.py" bodystart="1196" bodyend="1306"/>
      </memberdef>
      <memberdef kind="function" id="namespacebittensor_1_1__neuron_1_1text_1_1core__validator_1a826517b0b4f17e635dafcc3076a57a43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Tuple[Union[float, torch.FloatTensor], Dict, List]</type>
        <definition> Tuple[Union[float, torch.FloatTensor],
                                                                                    Dict,
                                                                                    List] bittensor._neuron.text.core_validator.shapley_base</definition>
        <argsstring>(torch.Tensor uids, List[List[torch.FloatTensor]] query_responses, List[torch.LongTensor] return_ops, List[torch.FloatTensor] times, torch.FloatTensor routing_score, Callable base_params, int index_s=0, str ext=None)</argsstring>
        <name>shapley_base</name>
        <qualifiedname>bittensor._neuron.text.core_validator.shapley_base</qualifiedname>
        <param>
          <type>torch.Tensor</type>
          <declname>uids</declname>
        </param>
        <param>
          <type>List]</type>
          <declname>query_responses</declname>
          <array>[List[torch.FloatTensor]</array>
        </param>
        <param>
          <type>List</type>
          <declname>return_ops</declname>
          <array>[torch.LongTensor]</array>
        </param>
        <param>
          <type>List</type>
          <declname>times</declname>
          <array>[torch.FloatTensor]</array>
        </param>
        <param>
          <type>torch.FloatTensor</type>
          <declname>routing_score</declname>
        </param>
        <param>
          <type>Callable</type>
          <declname>base_params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index_s</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>str</type>
          <declname>ext</declname>
          <defval>None</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Calculate Shapley base values and neuron response validation measure statistics, given responses from a synapse.
    Args:
        uids (:obj:`torch.Tensor`, `required`): [num_neurons]
            Neuron UIDs.
        query_responses (:obj:`List[List[torch.FloatTensor]]`, `required`):
            List of outputs from synapses, each a list of size num_endpoints of tensors with relevant size. Non-responses are zeroes of relevant
            synapse shape. Shape num_synapses * ( num_endpoints * ( -1, -1, -1 ) )
        return_ops (:obj:`List[torch.LongTensor]` of shape :obj:`[num_endpoints]`, `required`):
            Return code per call per synapse.
        times (:obj:`List [torch.FloatTensor]` of shape :obj:`[num_endpoints]`, `required`):
            Times per call per synapse.
        routing_score (:obj:`torch.FloatTensor`, `required`):
            [metagraph.n] Predictive routing score per endpoint in the metagraph, mean over the batch.
        base_params (:obj:`Callable`, `required`):
            CrossEntropy loss function to use.
        index_s (:obj:`int`, `optional`):
            Index of synapse to extract responses.
        ext (:obj:`str`, `optional`):
            Extension to parameter string for stats key.

    Returns:
        loss (:obj:`torch.FloatTensor`):
            Loss for training validator nucleus and dendrite backward to endpoints.
        stats (:obj:`Dict`, `required`):
            Statistics per endpoint for this batch.
        unsuccessful (:obj:`List`, `required`):
            Unsuccessful endpoints [(uid, return_op, time)].
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/macthrasher/bittensor/bittensor/_neuron/text/core_validator/__init__.py" line="1307" column="1" bodyfile="/Users/macthrasher/bittensor/bittensor/_neuron/text/core_validator/__init__.py" bodystart="1311" bodyend="1385"/>
      </memberdef>
      <memberdef kind="function" id="namespacebittensor_1_1__neuron_1_1text_1_1core__validator_1a3d48b0eacf487ad14a36ef50ef21df07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def bittensor._neuron.text.core_validator.logits_divergence</definition>
        <argsstring>(Dict stats, torch.Tensor uids, List[List[torch.FloatTensor]] query_responses, List[torch.LongTensor] return_ops, List[torch.FloatTensor] times, int index_s=0, str ext=None)</argsstring>
        <name>logits_divergence</name>
        <qualifiedname>bittensor._neuron.text.core_validator.logits_divergence</qualifiedname>
        <param>
          <type>Dict</type>
          <declname>stats</declname>
        </param>
        <param>
          <type>torch.Tensor</type>
          <declname>uids</declname>
        </param>
        <param>
          <type>List]</type>
          <declname>query_responses</declname>
          <array>[List[torch.FloatTensor]</array>
        </param>
        <param>
          <type>List</type>
          <declname>return_ops</declname>
          <array>[torch.LongTensor]</array>
        </param>
        <param>
          <type>List</type>
          <declname>times</declname>
          <array>[torch.FloatTensor]</array>
        </param>
        <param>
          <type>int</type>
          <declname>index_s</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>str</type>
          <declname>ext</declname>
          <defval>None</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Calculate each logits divergence per neuron per task from the average logits over all neurons per task,
given responses from a synapse.
Args:
stats (:obj:`Dict`, `required`):
Statistics per endpoint for this batch.
uids (:obj:`torch.Tensor`, `required`): [num_neurons]
Neuron UIDs.
query_responses (:obj:`List[List[torch.FloatTensor]]`, `required`):
List of outputs from synapses, each a list of size num_endpoints of tensors with relevant size.
Non-responses are zeroes of relevant synapse shape.
Shape num_synapses * ( num_endpoints * ( -1, -1, -1 ) )
return_ops (:obj:`List[torch.LongTensor]` of shape :obj:`[num_endpoints]`, `required`):
Return code per call per synapse.
times (:obj:`List [torch.FloatTensor]` of shape :obj:`[num_endpoints]`, `required`):
Times per call per synapse.
index_s (:obj:`int`, `optional`):
Index of synapse to extract responses.
ext (:obj:`str`, `optional`):
Extension to parameter string for stats key.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/macthrasher/bittensor/bittensor/_neuron/text/core_validator/__init__.py" line="1386" column="1" bodyfile="/Users/macthrasher/bittensor/bittensor/_neuron/text/core_validator/__init__.py" bodystart="1388" bodyend="1484"/>
      </memberdef>
      <memberdef kind="function" id="namespacebittensor_1_1__neuron_1_1text_1_1core__validator_1a1bd51d8fbf1d03308c1beb60fd961dd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def bittensor._neuron.text.core_validator.shapley_synergy</definition>
        <argsstring>(Dict stats, Callable synergy, str ext, torch.Tensor target=None, float scaling_law_power=0.5)</argsstring>
        <name>shapley_synergy</name>
        <qualifiedname>bittensor._neuron.text.core_validator.shapley_synergy</qualifiedname>
        <param>
          <type>Dict</type>
          <declname>stats</declname>
        </param>
        <param>
          <type>Callable</type>
          <declname>synergy</declname>
        </param>
        <param>
          <type>str</type>
          <declname>ext</declname>
        </param>
        <param>
          <type>torch.Tensor</type>
          <declname>target</declname>
          <defval>None</defval>
        </param>
        <param>
          <type>float</type>
          <declname>scaling_law_power</declname>
          <defval>0.5</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Calculates Shapley synergy for coalition size 2, measured performance above expected performance.
Measured in effective number of model parameters, just like base Shapley values.
Args:
stats (:obj:`Dict`, `required`):
Statistics per endpoint for this batch.
synergy (:obj:`Callable`, `required`)
Function to calculate measured loss.
ext (:obj:`str`, `optional`):
Extension to parameter string for stats key.
target (:obj:`torch.Tensor`, `optional`):
Target to measure loss against.
scaling_law_power (:obj:`float`, `optional`):
Power for modified scaling law, powered down to improve dynamic range, e.g. 3 → 6 nats for 0.5.

Returns:
syn_loss_diff (:obj:`Dict`, `required`):
Dictionary table of pairwise synergies as loss reductions, with direct loss on diagonal.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/macthrasher/bittensor/bittensor/_neuron/text/core_validator/__init__.py" line="1485" column="1" bodyfile="/Users/macthrasher/bittensor/bittensor/_neuron/text/core_validator/__init__.py" bodystart="1485" bodyend="1550"/>
      </memberdef>
      <memberdef kind="function" id="namespacebittensor_1_1__neuron_1_1text_1_1core__validator_1ad73b7e74829f07cd55e096f14a9a39a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>List</type>
        <definition> List bittensor._neuron.text.core_validator.format_predictions</definition>
        <argsstring>(torch.Tensor uids, List[List[torch.FloatTensor]] query_responses, List[torch.LongTensor] return_ops, torch.FloatTensor inputs, int validation_len, int index_s=0, int number_of_predictions=3)</argsstring>
        <name>format_predictions</name>
        <qualifiedname>bittensor._neuron.text.core_validator.format_predictions</qualifiedname>
        <param>
          <type>torch.Tensor</type>
          <declname>uids</declname>
        </param>
        <param>
          <type>List]</type>
          <declname>query_responses</declname>
          <array>[List[torch.FloatTensor]</array>
        </param>
        <param>
          <type>List</type>
          <declname>return_ops</declname>
          <array>[torch.LongTensor]</array>
        </param>
        <param>
          <type>torch.FloatTensor</type>
          <declname>inputs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>validation_len</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index_s</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>number_of_predictions</declname>
          <defval>3</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim> Format batch task topk predictions for rich table print of query responses.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/macthrasher/bittensor/bittensor/_neuron/text/core_validator/__init__.py" line="1551" column="1" bodyfile="/Users/macthrasher/bittensor/bittensor/_neuron/text/core_validator/__init__.py" bodystart="1553" bodyend="1593"/>
      </memberdef>
      <memberdef kind="function" id="namespacebittensor_1_1__neuron_1_1text_1_1core__validator_1a0c000ee81cd21336cf103755b8ffbe89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def bittensor._neuron.text.core_validator.response_table</definition>
        <argsstring>(List batch_predictions, Dict stats, str sort_col, int console_width, int task_repeat=4, int tasks_per_server=3)</argsstring>
        <name>response_table</name>
        <qualifiedname>bittensor._neuron.text.core_validator.response_table</qualifiedname>
        <param>
          <type>List</type>
          <declname>batch_predictions</declname>
        </param>
        <param>
          <type>Dict</type>
          <declname>stats</declname>
        </param>
        <param>
          <type>str</type>
          <declname>sort_col</declname>
        </param>
        <param>
          <type>int</type>
          <declname>console_width</declname>
        </param>
        <param>
          <type>int</type>
          <declname>task_repeat</declname>
          <defval>4</defval>
        </param>
        <param>
          <type>int</type>
          <declname>tasks_per_server</declname>
          <defval>3</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim> Prints the query response table: top prediction probabilities and texts for batch tasks.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/macthrasher/bittensor/bittensor/_neuron/text/core_validator/__init__.py" line="1594" column="1" bodyfile="/Users/macthrasher/bittensor/bittensor/_neuron/text/core_validator/__init__.py" bodystart="1595" bodyend="1656"/>
      </memberdef>
      <memberdef kind="function" id="namespacebittensor_1_1__neuron_1_1text_1_1core__validator_1a6fd9748649f8e6a6f82cbbcb48b164a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def bittensor._neuron.text.core_validator.synergy_table</definition>
        <argsstring>(stats, syn_loss_diff, sort_col, console_width)</argsstring>
        <name>synergy_table</name>
        <qualifiedname>bittensor._neuron.text.core_validator.synergy_table</qualifiedname>
        <param>
          <type>stats</type>
          <defname>stats</defname>
        </param>
        <param>
          <type>syn_loss_diff</type>
          <defname>syn_loss_diff</defname>
        </param>
        <param>
          <type>sort_col</type>
          <defname>sort_col</defname>
        </param>
        <param>
          <type>console_width</type>
          <defname>console_width</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim> Prints the synergy loss diff matrix with pairwise loss reduction due to synergy (original loss on diagonal)
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/macthrasher/bittensor/bittensor/_neuron/text/core_validator/__init__.py" line="1657" column="1" bodyfile="/Users/macthrasher/bittensor/bittensor/_neuron/text/core_validator/__init__.py" bodystart="1657" bodyend="1683"/>
      </memberdef>
      <memberdef kind="function" id="namespacebittensor_1_1__neuron_1_1text_1_1core__validator_1a3b98321f53ed9671d10985f26470e151" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def bittensor._neuron.text.core_validator.stats_table</definition>
        <argsstring>(stats, sort_col, console_width, title, caption, mark_uids=None)</argsstring>
        <name>stats_table</name>
        <qualifiedname>bittensor._neuron.text.core_validator.stats_table</qualifiedname>
        <param>
          <type>stats</type>
          <defname>stats</defname>
        </param>
        <param>
          <type>sort_col</type>
          <defname>sort_col</defname>
        </param>
        <param>
          <type>console_width</type>
          <defname>console_width</defname>
        </param>
        <param>
          <type>title</type>
          <defname>title</defname>
        </param>
        <param>
          <type>caption</type>
          <defname>caption</defname>
        </param>
        <param>
          <type>mark_uids</type>
          <defname>mark_uids</defname>
          <defval>None</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim> Gathers data and constructs neuron statistics table and prints it
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/macthrasher/bittensor/bittensor/_neuron/text/core_validator/__init__.py" line="1684" column="1" bodyfile="/Users/macthrasher/bittensor/bittensor/_neuron/text/core_validator/__init__.py" bodystart="1684" bodyend="1726"/>
      </memberdef>
      <memberdef kind="function" id="namespacebittensor_1_1__neuron_1_1text_1_1core__validator_1ac65c768421ed57928ee56b3da28e5cf8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def bittensor._neuron.text.core_validator.synapse_table</definition>
        <argsstring>(name, stats, sort_col, console_width, start_time)</argsstring>
        <name>synapse_table</name>
        <qualifiedname>bittensor._neuron.text.core_validator.synapse_table</qualifiedname>
        <param>
          <type>name</type>
          <defname>name</defname>
        </param>
        <param>
          <type>stats</type>
          <defname>stats</defname>
        </param>
        <param>
          <type>sort_col</type>
          <defname>sort_col</defname>
        </param>
        <param>
          <type>console_width</type>
          <defname>console_width</defname>
        </param>
        <param>
          <type>start_time</type>
          <defname>start_time</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim> Prints the evaluation of the neuron responses to the validator request
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/macthrasher/bittensor/bittensor/_neuron/text/core_validator/__init__.py" line="1727" column="1" bodyfile="/Users/macthrasher/bittensor/bittensor/_neuron/text/core_validator/__init__.py" bodystart="1727" bodyend="1737"/>
      </memberdef>
      <memberdef kind="function" id="namespacebittensor_1_1__neuron_1_1text_1_1core__validator_1ab1b9785136040aef8a5a3e0588151ca1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def bittensor._neuron.text.core_validator.unsuccess</definition>
        <argsstring>(_name, _unsuccessful)</argsstring>
        <name>unsuccess</name>
        <qualifiedname>bittensor._neuron.text.core_validator.unsuccess</qualifiedname>
        <param>
          <type>_name</type>
          <defname>_name</defname>
        </param>
        <param>
          <type>_unsuccessful</type>
          <defname>_unsuccessful</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim> Prints the return codes and response times of unsuccessful responses
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/macthrasher/bittensor/bittensor/_neuron/text/core_validator/__init__.py" line="1738" column="1" bodyfile="/Users/macthrasher/bittensor/bittensor/_neuron/text/core_validator/__init__.py" bodystart="1738" bodyend="1746"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="namespacebittensor_1_1__neuron_1_1text_1_1core__validator" refkind="compound"><highlight class="comment">#!/bin/python3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">#<sp/>The<sp/>MIT<sp/>License<sp/>(MIT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Copyright<sp/>©<sp/>2021<sp/>Yuma<sp/>Rao</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/>obtaining<sp/>a<sp/>copy<sp/>of<sp/>this<sp/>software<sp/>and<sp/>associated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">#<sp/>documentation<sp/>files<sp/>(the<sp/>“Software”),<sp/>to<sp/>deal<sp/>in<sp/>the<sp/>Software<sp/>without<sp/>restriction,<sp/>including<sp/>without<sp/>limitation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">#<sp/>the<sp/>rights<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>merge,<sp/>publish,<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/>sell<sp/>copies<sp/>of<sp/>the<sp/>Software,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">#<sp/>and<sp/>to<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is<sp/>furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">#<sp/>The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/>included<sp/>in<sp/>all<sp/>copies<sp/>or<sp/>substantial<sp/>portions<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">#<sp/>the<sp/>Software.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">#<sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>“AS<sp/>IS”,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">#<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">#<sp/>THE<sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">#<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">#<sp/>DEALINGS<sp/>IN<sp/>THE<sp/>SOFTWARE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>The<sp/>bittensor<sp/>base<sp/>validator</highlight></codeline>
<codeline lineno="19"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="20"><highlight class="stringliteral">Example:</highlight></codeline>
<codeline lineno="21"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>$<sp/>python3<sp/>miners/text/core_validator.py<sp/>--logging.debug</highlight></codeline>
<codeline lineno="22"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="23"><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="24"><highlight class="stringliteral">import<sp/>argparse</highlight></codeline>
<codeline lineno="25"><highlight class="stringliteral">import<sp/>time</highlight></codeline>
<codeline lineno="26"><highlight class="stringliteral">import<sp/>datetime</highlight></codeline>
<codeline lineno="27"><highlight class="stringliteral">import<sp/>bittensor</highlight></codeline>
<codeline lineno="28"><highlight class="stringliteral">import<sp/>torch</highlight></codeline>
<codeline lineno="29"><highlight class="stringliteral">import<sp/>os</highlight></codeline>
<codeline lineno="30"><highlight class="stringliteral">import<sp/>wandb</highlight></codeline>
<codeline lineno="31"><highlight class="stringliteral">import<sp/>math</highlight></codeline>
<codeline lineno="32"><highlight class="stringliteral">import<sp/>random</highlight></codeline>
<codeline lineno="33"><highlight class="stringliteral">import<sp/>pandas</highlight></codeline>
<codeline lineno="34"><highlight class="stringliteral">import<sp/>traceback</highlight></codeline>
<codeline lineno="35"><highlight class="stringliteral">from<sp/>rich<sp/>import<sp/>print</highlight></codeline>
<codeline lineno="36"><highlight class="stringliteral">from<sp/>rich.console<sp/>import<sp/>Console</highlight></codeline>
<codeline lineno="37"><highlight class="stringliteral">from<sp/>rich.style<sp/>import<sp/>Style</highlight></codeline>
<codeline lineno="38"><highlight class="stringliteral">from<sp/>rich.table<sp/>import<sp/>Table</highlight></codeline>
<codeline lineno="39"><highlight class="stringliteral">from<sp/>rich.errors<sp/>import<sp/>MarkupError</highlight></codeline>
<codeline lineno="40"><highlight class="stringliteral">from<sp/>rich.traceback<sp/>import<sp/>install</highlight></codeline>
<codeline lineno="41"><highlight class="stringliteral">from<sp/>typing<sp/>import<sp/>List,<sp/>Tuple,<sp/>Callable,<sp/>Dict,<sp/>Any,<sp/>Union,<sp/>Set</highlight></codeline>
<codeline lineno="42"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="43"><highlight class="stringliteral">from<sp/>..neuron_utilities<sp/>import<sp/>ThreadQueue,<sp/>PositionalEncoding,<sp/>calc_loss_fct</highlight></codeline>
<codeline lineno="44"><highlight class="stringliteral">from<sp/>bittensor.utils.tokenizer_utils<sp/>import<sp/>phrase_cross_entropy,<sp/>topk_tokens_to_vocab_size,<sp/>prune_tokens</highlight></codeline>
<codeline lineno="45"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="46"><highlight class="stringliteral">from<sp/>torch.nn.functional<sp/>import<sp/>kl_div</highlight></codeline>
<codeline lineno="47"><highlight class="stringliteral">from<sp/>torch.nn.utils<sp/>import<sp/>clip_grad_norm_</highlight></codeline>
<codeline lineno="48"><highlight class="stringliteral">from<sp/>torch.nn<sp/>import<sp/>TransformerEncoder,<sp/>TransformerEncoderLayer</highlight></codeline>
<codeline lineno="49"><highlight class="stringliteral">from<sp/>loguru<sp/>import<sp/>logger</highlight></codeline>
<codeline lineno="50"><highlight class="stringliteral">from<sp/>threading<sp/>import<sp/>Lock</highlight></codeline>
<codeline lineno="51"><highlight class="stringliteral">from<sp/>prometheus_client<sp/>import<sp/>Counter,<sp/>Gauge,<sp/>Histogram,<sp/>Summary,<sp/>Info</highlight></codeline>
<codeline lineno="52"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="53"><highlight class="stringliteral">logger<sp/>=<sp/>logger.opt(<sp/>colors=True<sp/>)</highlight></codeline>
<codeline lineno="54"><highlight class="stringliteral">console<sp/>=<sp/>Console()</highlight></codeline>
<codeline lineno="55"><highlight class="stringliteral">install(show_locals=True)</highlight></codeline>
<codeline lineno="56"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="57"><highlight class="stringliteral">#<sp/>Neuron<sp/>stats<sp/>recorded<sp/>by<sp/>validator<sp/>neuron/nucleus</highlight></codeline>
<codeline lineno="58"><highlight class="stringliteral">#<sp/><sp/><sp/>[Column_name,<sp/>key_name,<sp/>format_string,<sp/>rich_style]<sp/><sp/></highlight><highlight class="comment">#<sp/>description</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal">neuron_stats_columns<sp/>=<sp/>[</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="stringliteral">&apos;UID&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;uid&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;{:.0f}&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;cyan&apos;</highlight><highlight class="normal">],<sp/><sp/></highlight><highlight class="comment">#<sp/>neuron<sp/>UID</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="stringliteral">&apos;Upd!&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;updates!&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;{}&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;bright_yellow&apos;</highlight><highlight class="normal">],<sp/><sp/></highlight><highlight class="comment">#<sp/>number<sp/>of<sp/>exponential<sp/>moving<sp/>average<sp/>updates<sp/>with<sp/>zeroing<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="stringliteral">&apos;nUpd&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;updates_shapley_values_nxt&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;{}&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;bright_yellow&apos;</highlight><highlight class="normal">],<sp/><sp/></highlight><highlight class="comment">#<sp/>number<sp/>of<sp/>exponential<sp/>moving<sp/>average<sp/>updates<sp/>to<sp/>nShap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="stringliteral">&apos;mUpd&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;updates_shapley_values_min&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;{}&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;bright_yellow&apos;</highlight><highlight class="normal">],<sp/><sp/></highlight><highlight class="comment">#<sp/>number<sp/>of<sp/>exponential<sp/>moving<sp/>average<sp/>updates<sp/>to<sp/>mShap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="stringliteral">&apos;nTime&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;response_time_nxt&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;{:.2f}&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;yellow&apos;</highlight><highlight class="normal">],<sp/><sp/></highlight><highlight class="comment">#<sp/>response<sp/>time<sp/>to<sp/>TextCausalLMNext<sp/>forward<sp/>requests<sp/>[TextCausalLMNext]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="stringliteral">&apos;sTime&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;response_time&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;{:.2f}&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;yellow&apos;</highlight><highlight class="normal">],<sp/><sp/></highlight><highlight class="comment">#<sp/>response<sp/>time<sp/>to<sp/>TextCausalLM<sp/>forward<sp/>requests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="stringliteral">&apos;Route&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;routing_score&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;{:.3f}&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;grey30&apos;</highlight><highlight class="normal">],<sp/><sp/></highlight><highlight class="comment">#<sp/>validator<sp/>routing<sp/>score<sp/>(higher<sp/>preferred)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="stringliteral">&apos;Weight&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;weight&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;{:.5f}&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;green&apos;</highlight><highlight class="normal">],<sp/><sp/></highlight><highlight class="comment">#<sp/>weight<sp/>set<sp/>on<sp/>substrate<sp/>(each<sp/>epoch)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="stringliteral">&apos;nShap!&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;shapley_values_nxt!&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;{:.0f}&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;magenta&apos;</highlight><highlight class="normal">],<sp/><sp/></highlight><highlight class="comment">#<sp/>Shapley<sp/>value<sp/>(=vBase+vSyn)<sp/>for<sp/>phrase<sp/>validation<sp/>(zeroing)<sp/>[TextCausalLMNext]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="stringliteral">&apos;nShap&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;shapley_values_nxt&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;{:.0f}&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;magenta&apos;</highlight><highlight class="normal">],<sp/><sp/></highlight><highlight class="comment">#<sp/>Shapley<sp/>value<sp/>(=vBase+vSyn)<sp/>for<sp/>phrase<sp/>validation<sp/>[TextCausalLMNext]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="stringliteral">&apos;mShap!&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;shapley_values_min!&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;{:.0f}&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;bright_magenta&apos;</highlight><highlight class="normal">],<sp/><sp/></highlight><highlight class="comment">#<sp/>min(Shap,<sp/>vShap)<sp/>of<sp/>sequence<sp/>and<sp/>validation<sp/>Shapley<sp/>(zeroing)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="stringliteral">&apos;mShap&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;shapley_values_min&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;{:.0f}&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;bright_magenta&apos;</highlight><highlight class="normal">],<sp/><sp/></highlight><highlight class="comment">#<sp/>min(Shap,<sp/>vShap)<sp/>of<sp/>sequence<sp/>and<sp/>validation<sp/>Shapley</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="stringliteral">&apos;sLoss&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;loss&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;{:.2f}&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;bright_cyan&apos;</highlight><highlight class="normal">],<sp/><sp/></highlight><highlight class="comment">#<sp/>next<sp/>token<sp/>prediction<sp/>loss<sp/>average<sp/>over<sp/>sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="stringliteral">&apos;vLoss&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;loss_val&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;{:.2f}&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;bright_cyan&apos;</highlight><highlight class="normal">],<sp/><sp/></highlight><highlight class="comment">#<sp/>next<sp/>token<sp/>prediction<sp/>loss<sp/>for<sp/>validation<sp/>task</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="stringliteral">&apos;nvLoss&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;loss_val_nxt&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;{:.2f}&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;bright_cyan&apos;</highlight><highlight class="normal">],<sp/><sp/></highlight><highlight class="comment">#<sp/>next<sp/>token<sp/>prediction<sp/>loss<sp/>for<sp/>validation<sp/>task<sp/>[TextCausalLMNext]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="stringliteral">&apos;nLoss&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;loss_nxt&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;{:.2f}&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;bright_cyan&apos;</highlight><highlight class="normal">],<sp/><sp/></highlight><highlight class="comment">#<sp/>next<sp/>token<sp/>phrase<sp/>prediction<sp/>loss<sp/>for<sp/>phrase<sp/>validation<sp/>task<sp/>[TextCausalLMNext]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="stringliteral">&apos;RLoss&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;routing_loss&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;{:.3f}&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;grey30&apos;</highlight><highlight class="normal">],<sp/><sp/></highlight><highlight class="comment">#<sp/>MSE<sp/>between<sp/>routing_score<sp/>and<sp/>conditioned<sp/>loss</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="stringliteral">&apos;nRLoss&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;routing_loss_nxt&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;{:.3f}&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;grey30&apos;</highlight><highlight class="normal">],<sp/><sp/></highlight><highlight class="comment">#<sp/>MSE<sp/>between<sp/>routing_score_nxt<sp/>and<sp/>conditioned<sp/>loss<sp/>[TextCausalLMNext]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="stringliteral">&apos;sShap&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;shapley_values&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;{:.0f}&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;magenta&apos;</highlight><highlight class="normal">],<sp/><sp/></highlight><highlight class="comment">#<sp/>Shapley<sp/>value<sp/>(=Base+Syn)<sp/>over<sp/>sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="stringliteral">&apos;vShap&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;shapley_values_val&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;{:.0f}&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;magenta&apos;</highlight><highlight class="normal">],<sp/><sp/></highlight><highlight class="comment">#<sp/>Shapley<sp/>value<sp/>(=vBase+vSyn)<sp/>for<sp/>validation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="stringliteral">&apos;sBase&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;base_params&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;{:.0f}&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">],<sp/><sp/></highlight><highlight class="comment">#<sp/>parameter<sp/>count<sp/>estimate<sp/>via<sp/>adjusted<sp/>scaling<sp/>law</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="stringliteral">&apos;vBase&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;base_params_val&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;{:.0f}&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">],<sp/><sp/></highlight><highlight class="comment">#<sp/>square<sp/>root<sp/>parameter<sp/>count<sp/>estimate<sp/>for<sp/>validation<sp/>task</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="stringliteral">&apos;nBase&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;base_params_nxt&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;{:.0f}&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">],<sp/><sp/></highlight><highlight class="comment">#<sp/>square<sp/>root<sp/>parameter<sp/>count<sp/>estimate<sp/>for<sp/>phrase<sp/>validation<sp/>task<sp/>[TextCausalLMNext]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="stringliteral">&apos;nParam~&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;est_params_nxt&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;{:.2g}&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;magenta&apos;</highlight><highlight class="normal">],<sp/><sp/></highlight><highlight class="comment">#<sp/>parameter<sp/>count<sp/>estimate<sp/>for<sp/>phrase<sp/>validation<sp/>task<sp/>[TextCausalLMNext]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="stringliteral">&apos;nDiv&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;logits_divergence_nxt&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;{:.2g}&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">],<sp/><sp/></highlight><highlight class="comment">#<sp/>logits<sp/>divergence<sp/>avg<sp/>compared<sp/>to<sp/>network<sp/>prob<sp/>dist<sp/>[TextCausalLMNext]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="stringliteral">&apos;nExc&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;logits_excess_nxt&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;{:.2f}&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">],<sp/><sp/></highlight><highlight class="comment">#<sp/>logits<sp/>divergence<sp/>excess<sp/>avg<sp/>above<sp/>network<sp/>avg<sp/>+<sp/>std<sp/>[TextCausalLMNext]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="stringliteral">&apos;sSyn&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;synergy&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;{:.0f}&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;white&apos;</highlight><highlight class="normal">],<sp/><sp/></highlight><highlight class="comment">#<sp/>Shapley<sp/>pairwise<sp/>synergy<sp/>over<sp/>sequence<sp/>loss<sp/>(parameter<sp/>count<sp/>estimate)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="stringliteral">&apos;vSyn&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;synergy_val&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;{:.0f}&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;white&apos;</highlight><highlight class="normal">],<sp/><sp/></highlight><highlight class="comment">#<sp/>Shapley<sp/>pairwise<sp/>synergy<sp/>over<sp/>validation<sp/>loss<sp/>(count<sp/>estimate)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="stringliteral">&apos;nSyn&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;synergy_nxt&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;{:.0f}&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;white&apos;</highlight><highlight class="normal">],<sp/><sp/></highlight><highlight class="comment">#<sp/>Shapley<sp/>pairwise<sp/>synergy<sp/>over<sp/>phrase<sp/>validation<sp/>loss<sp/>(count<sp/>estimate)<sp/>[TextCausalLMNext]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="stringliteral">&apos;sSynD&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;synergy_loss_diff&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;{:.2f}&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;bright_blue&apos;</highlight><highlight class="normal">],<sp/><sp/></highlight><highlight class="comment">#<sp/>Shapley<sp/>pairwise<sp/>synergy<sp/>over<sp/>sequence<sp/>loss<sp/>(loss<sp/>difference)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="stringliteral">&apos;vSynD&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;synergy_loss_diff_val&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;{:.2f}&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;bright_blue&apos;</highlight><highlight class="normal">],<sp/><sp/></highlight><highlight class="comment">#<sp/>Shapley<sp/>pairwise<sp/>synergy<sp/>over<sp/>validation<sp/>loss<sp/>(loss<sp/>difference)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="stringliteral">&apos;nSynD&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;synergy_loss_diff_nxt&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;{:.2f}&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;bright_blue&apos;</highlight><highlight class="normal">],<sp/><sp/></highlight><highlight class="comment">#<sp/>Shapley<sp/>pairwise<sp/>synergy<sp/>over<sp/>phrase<sp/>validation<sp/>loss<sp/>(loss<sp/>difference)<sp/>[TextCausalLMNext]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal">]</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron" kindref="compound">neuron</ref>:</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="97"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Creates<sp/>a<sp/>bittensor<sp/>neuron<sp/>that<sp/>specializes<sp/>validating<sp/>other<sp/>peers.<sp/>The<sp/>core<sp/>validator</highlight></codeline>
<codeline lineno="98"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>finetunes<sp/>on<sp/>the<sp/>bittensor<sp/>network<sp/></highlight><highlight class="keyword">with</highlight><highlight class="normal"><sp/>a<sp/>mixture<sp/>of<sp/>experts<sp/>model<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>shapely<sp/>scoring.</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>The<sp/>validator</highlight><highlight class="stringliteral">&apos;s<sp/>main<sp/>jobs<sp/>are<sp/>to<sp/>identify<sp/>important/useful<sp/>peers<sp/>in<sp/>the<sp/>network<sp/>and<sp/>correctly</highlight></codeline>
<codeline lineno="100"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>weight<sp/>them.<sp/>To<sp/>achieve<sp/>this,<sp/>the<sp/>validator<sp/>will<sp/>send<sp/>requests<sp/>to<sp/>different<sp/>peers<sp/>on<sp/>the<sp/>network</highlight></codeline>
<codeline lineno="101"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>evalute<sp/>their<sp/>responses.</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>Args:<sp/></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config<sp/>(:obj:`<ref refid="classbittensor_1_1__config_1_1config__impl_1_1_config" kindref="compound">bittensor.Config</ref>`,<sp/>`optional`):<sp/></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bittensor.server.config()</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subtensor<sp/>(:obj:<ref refid="classbittensor_1_1__subtensor_1_1subtensor" kindref="compound">bittensor.subtensor</ref><sp/>,<sp/>`optional`):</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bittensor<sp/>subtensor<sp/>connection</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dataset<sp/>(:obj:<ref refid="classbittensor_1_1__dataset_1_1dataset" kindref="compound">bittensor.dataset</ref><sp/>,<sp/>`optional`):</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bittensor<sp/>dataset<sp/></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wallet<sp/>(:obj:<ref refid="classbittensor_1_1__wallet_1_1wallet" kindref="compound">bittensor.wallet</ref>,<sp/>`optional`):</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bittensor<sp/>wallet<sp/>object</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>metagraph<sp/>(:obj:<ref refid="classbittensor_1_1__metagraph_1_1metagraph" kindref="compound">bittensor.metagraph</ref>,<sp/>`optional`):</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bittensor<sp/>metagraph<sp/>object</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dendrite<sp/>(:obj:<ref refid="classbittensor_1_1__dendrite_1_1dendrite" kindref="compound">bittensor.dendrite</ref>,<sp/>`optional`):</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bittensor<sp/>dendrite<sp/>object</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dataset<sp/>(:obj:<ref refid="classbittensor_1_1__dendrite_1_1dendrite" kindref="compound">bittensor.dendrite</ref>,<sp/>`optional`):</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bittensor<sp/>dendrite<sp/>object</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>axon<sp/>(:obj:<ref refid="classbittensor_1_1__axon_1_1axon" kindref="compound">bittensor.axon</ref>,<sp/>`optional`):</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bittensor<sp/>axon<sp/>object</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>Examples::<sp/></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>subtensor<sp/>=<sp/><ref refid="classbittensor_1_1__subtensor_1_1subtensor" kindref="compound">bittensor.subtensor</ref>(network=</highlight><highlight class="stringliteral">&apos;nakamoto&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>validator<sp/>=<sp/>bittensor.neuron.text.core_validator.neuron(subtensor=subtensor)</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>validator.run()</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="125"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">__init__(<sp/></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self,<sp/></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config:<sp/></highlight><highlight class="stringliteral">&apos;bittensor.Config&apos;</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wallet:<sp/></highlight><highlight class="stringliteral">&apos;bittensor.Wallet&apos;</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subtensor:<sp/></highlight><highlight class="stringliteral">&apos;bittensor.Subtensor&apos;</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>metagraph:<sp/></highlight><highlight class="stringliteral">&apos;bittensor.Metagraph&apos;</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dendrite:<sp/></highlight><highlight class="stringliteral">&apos;bittensor.Dendrite&apos;</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dataset:<sp/></highlight><highlight class="stringliteral">&apos;bittensor.dataset&apos;</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>axon:<sp/></highlight><highlight class="stringliteral">&apos;bittensor.axon&apos;</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>):</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Set<sp/>up<sp/>Config<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>config<sp/>==<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:<sp/>config<sp/>=<sp/>neuron.config()</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a492dbde3bfbccb33e13c841d2facf63a" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a21e2ecea44db89dcc12901d6fcba9b4b" kindref="member">config</ref><sp/>=<sp/>config</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>neuron.check_config(<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a492dbde3bfbccb33e13c841d2facf63a" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a21e2ecea44db89dcc12901d6fcba9b4b" kindref="member">config</ref><sp/>)</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a492dbde3bfbccb33e13c841d2facf63a" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a21e2ecea44db89dcc12901d6fcba9b4b" kindref="member">config</ref>.to_defaults()</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a492dbde3bfbccb33e13c841d2facf63a" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a21e2ecea44db89dcc12901d6fcba9b4b" kindref="member">config</ref>.neuron._mock<sp/>==<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a492dbde3bfbccb33e13c841d2facf63a" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a21e2ecea44db89dcc12901d6fcba9b4b" kindref="member">config</ref>.subtensor._mock<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a492dbde3bfbccb33e13c841d2facf63a" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a21e2ecea44db89dcc12901d6fcba9b4b" kindref="member">config</ref>.wallet._mock<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a492dbde3bfbccb33e13c841d2facf63a" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a21e2ecea44db89dcc12901d6fcba9b4b" kindref="member">config</ref>.dataset._mock<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a492dbde3bfbccb33e13c841d2facf63a" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a21e2ecea44db89dcc12901d6fcba9b4b" kindref="member">config</ref>.dendrite._mock<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a492dbde3bfbccb33e13c841d2facf63a" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a21e2ecea44db89dcc12901d6fcba9b4b" kindref="member">config</ref>.metagraph._mock<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a492dbde3bfbccb33e13c841d2facf63a" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a21e2ecea44db89dcc12901d6fcba9b4b" kindref="member">config</ref>.subtensor._mock<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a492dbde3bfbccb33e13c841d2facf63a" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a21e2ecea44db89dcc12901d6fcba9b4b" kindref="member">config</ref>.axon._mock<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">print</highlight><highlight class="normal"><sp/>(<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a492dbde3bfbccb33e13c841d2facf63a" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a21e2ecea44db89dcc12901d6fcba9b4b" kindref="member">config</ref><sp/>)</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/><sp/>Logging<sp/>+<sp/>prometheus<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a492dbde3bfbccb33e13c841d2facf63a" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a21e2ecea44db89dcc12901d6fcba9b4b" kindref="member">config</ref>.to_prometheus()</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbittensor_1_1__logging_1_1logging" kindref="compound">bittensor.logging</ref>(<sp/></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config<sp/>=<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a492dbde3bfbccb33e13c841d2facf63a" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a21e2ecea44db89dcc12901d6fcba9b4b" kindref="member">config</ref>,<sp/></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logging_dir<sp/>=<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a492dbde3bfbccb33e13c841d2facf63a" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a21e2ecea44db89dcc12901d6fcba9b4b" kindref="member">config</ref>.neuron.full_path<sp/></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbittensor_1_1__prometheus_1_1prometheus" kindref="compound">bittensor.prometheus</ref><sp/>(<sp/></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config<sp/>=<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a492dbde3bfbccb33e13c841d2facf63a" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a21e2ecea44db89dcc12901d6fcba9b4b" kindref="member">config</ref>,<sp/></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>port<sp/>=<sp/>config.prometheus.port<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>config.axon.port<sp/>==<sp/>bittensor.defaults.axon.port<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>config.axon.port<sp/>-<sp/>1000</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Create<sp/>Bittensor<sp/>objects<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbittensor_1_1__logging_1_1logging" kindref="compound">bittensor.logging</ref>(<sp/>config<sp/>=<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a492dbde3bfbccb33e13c841d2facf63a" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a21e2ecea44db89dcc12901d6fcba9b4b" kindref="member">config</ref>,<sp/>logging_dir<sp/>=<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a492dbde3bfbccb33e13c841d2facf63a" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a21e2ecea44db89dcc12901d6fcba9b4b" kindref="member">config</ref>.neuron.full_path<sp/>)</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a58a602f8a5b87001de8112479ac2ccb6" kindref="member">wallet</ref><sp/>=<sp/><ref refid="classbittensor_1_1__wallet_1_1wallet" kindref="compound">bittensor.wallet</ref><sp/>(<sp/>config<sp/>=<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a492dbde3bfbccb33e13c841d2facf63a" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a21e2ecea44db89dcc12901d6fcba9b4b" kindref="member">config</ref><sp/>)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>wallet<sp/>==<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>wallet</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a76ae49a086d19cfab7fe9ff8bdcc872e" kindref="member">subtensor</ref><sp/>=<sp/><ref refid="classbittensor_1_1__subtensor_1_1subtensor" kindref="compound">bittensor.subtensor</ref><sp/>(<sp/>config<sp/>=<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a492dbde3bfbccb33e13c841d2facf63a" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a21e2ecea44db89dcc12901d6fcba9b4b" kindref="member">config</ref><sp/>)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>subtensor<sp/>==<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>subtensor</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1ab7d86c29802c834f4f9c56cad016af3d" kindref="member">metagraph</ref><sp/>=<sp/><ref refid="classbittensor_1_1__metagraph_1_1metagraph" kindref="compound">bittensor.metagraph</ref><sp/>(<sp/>config<sp/>=<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a492dbde3bfbccb33e13c841d2facf63a" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a21e2ecea44db89dcc12901d6fcba9b4b" kindref="member">config</ref>,<sp/>subtensor<sp/>=<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a76ae49a086d19cfab7fe9ff8bdcc872e" kindref="member">subtensor</ref><sp/>)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>metagraph<sp/>==<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>metagraph</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a8956d54618b3d67955719876c7a18802" kindref="member">dendrite</ref><sp/>=<sp/><ref refid="classbittensor_1_1__dendrite_1_1dendrite" kindref="compound">bittensor.dendrite</ref><sp/>(<sp/>config<sp/>=<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a492dbde3bfbccb33e13c841d2facf63a" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a21e2ecea44db89dcc12901d6fcba9b4b" kindref="member">config</ref>,<sp/>wallet<sp/>=<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a58a602f8a5b87001de8112479ac2ccb6" kindref="member">wallet</ref>,<sp/>max_active_receptors<sp/>=<sp/>0<sp/>)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>dendrite<sp/>==<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>dendrite<sp/></highlight><highlight class="comment">#<sp/>Dendrite<sp/>should<sp/>not<sp/>store<sp/>receptor<sp/>in<sp/>validator.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a758d451ba0b2f66b6deb23722a683c90" kindref="member">axon</ref><sp/>=<sp/><ref refid="classbittensor_1_1__axon_1_1axon" kindref="compound">bittensor.axon</ref><sp/>(<sp/>config<sp/>=<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a492dbde3bfbccb33e13c841d2facf63a" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a21e2ecea44db89dcc12901d6fcba9b4b" kindref="member">config</ref>,<sp/>wallet<sp/>=<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a58a602f8a5b87001de8112479ac2ccb6" kindref="member">wallet</ref><sp/>)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>axon<sp/>==<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>axon</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a15cf9e3619b2b2bb0086f03b594ae01a" kindref="member">device</ref><sp/>=<sp/>torch.device<sp/>(<sp/>device<sp/>=<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a492dbde3bfbccb33e13c841d2facf63a" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a21e2ecea44db89dcc12901d6fcba9b4b" kindref="member">config</ref>.neuron.device<sp/>)<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a69d4f664d4e7cf38416d68ed5a9d65f7" kindref="member">nucleus</ref><sp/>=<sp/>nucleus<sp/>(<sp/>config<sp/>=<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a492dbde3bfbccb33e13c841d2facf63a" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a21e2ecea44db89dcc12901d6fcba9b4b" kindref="member">config</ref>,<sp/>device<sp/>=<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a15cf9e3619b2b2bb0086f03b594ae01a" kindref="member">device</ref>,<sp/>subtensor<sp/>=<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a76ae49a086d19cfab7fe9ff8bdcc872e" kindref="member">subtensor</ref><sp/>).to(<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a15cf9e3619b2b2bb0086f03b594ae01a" kindref="member">device</ref><sp/>)</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1ae88acca270163d58860d1cc478cb0817" kindref="member">dataset</ref><sp/>=<sp/>(<ref refid="classbittensor_1_1__dataset_1_1dataset" kindref="compound">bittensor.dataset</ref>(config=self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a492dbde3bfbccb33e13c841d2facf63a" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a21e2ecea44db89dcc12901d6fcba9b4b" kindref="member">config</ref>,<sp/>batch_size=self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a76ae49a086d19cfab7fe9ff8bdcc872e" kindref="member">subtensor</ref>.validator_batch_size,</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block_size=self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a76ae49a086d19cfab7fe9ff8bdcc872e" kindref="member">subtensor</ref>.validator_sequence_length<sp/>+<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a492dbde3bfbccb33e13c841d2facf63a" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a21e2ecea44db89dcc12901d6fcba9b4b" kindref="member">config</ref>.neuron.validation_len<sp/>+<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a76ae49a086d19cfab7fe9ff8bdcc872e" kindref="member">subtensor</ref>.prune_len)</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>dataset<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>dataset)</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a23a041fdc7ba87896f95c0b4fa62c1a8" kindref="member">optimizer</ref><sp/>=<sp/>torch.optim.SGD(</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a69d4f664d4e7cf38416d68ed5a9d65f7" kindref="member">nucleus</ref>.parameters(),<sp/>lr=self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a492dbde3bfbccb33e13c841d2facf63a" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a21e2ecea44db89dcc12901d6fcba9b4b" kindref="member">config</ref>.neuron.learning_rate,<sp/>momentum=self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a492dbde3bfbccb33e13c841d2facf63a" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a21e2ecea44db89dcc12901d6fcba9b4b" kindref="member">config</ref>.neuron.momentum</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Create<sp/>thread<sp/>queue<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1aa04d4ea828fba0971659fdbeb9f7ae4c" kindref="member">loss</ref><sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1ad0be40f3698e92dcef0098368d94152f" kindref="member">loss_agg_mutex</ref><sp/>=<sp/>Lock()</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Neuron<sp/>statistics<sp/>variables<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a2b0e924da8067e801668a329396f024d" kindref="member">neuron_stats</ref><sp/>=<sp/>{}<sp/><sp/></highlight><highlight class="comment">#<sp/>neuron<sp/>statistics<sp/>dict<sp/>of<sp/>dicts:<sp/>[uid]<sp/>-&gt;<sp/>{&apos;stat1&apos;:<sp/>val1,<sp/>&apos;stat2&apos;:<sp/>val2,<sp/>...}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1ab6519f08ffb439629f1a7c281dcc7e41" kindref="member">neuron_hotkeys</ref><sp/>=<sp/>[]<sp/><sp/></highlight><highlight class="comment">#<sp/>keep<sp/>neuron<sp/>hotkeys<sp/>to<sp/>compare<sp/>and<sp/>check<sp/>for<sp/>changes<sp/>after<sp/>metagraph.sync()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a3eac268c9f329cbe846160bc9afe0c0d" kindref="member">neuron_changes</ref><sp/>=<sp/>{}<sp/><sp/></highlight><highlight class="comment">#<sp/>neuron<sp/>hotkey<sp/>changes<sp/>dict<sp/>of<sp/>dicts<sp/>of<sp/>dicts:<sp/>[uid]<sp/>-&gt;<sp/>[block]<sp/>-&gt;<sp/>{&apos;new_hotkey&apos;:<sp/>,<sp/>&apos;old_hotkey&apos;:<sp/>,<sp/>&apos;old_stats&apos;:}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a4b160e523e9bf6488640bbc8424c0c9d" kindref="member">alpha</ref><sp/>=<sp/>0.1<sp/><sp/></highlight><highlight class="comment">#<sp/>EMA<sp/>coefficient<sp/>in<sp/>[0,<sp/>1],<sp/>higher<sp/>alpha<sp/>discounts<sp/>older<sp/>observations<sp/>faster</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a492dbde3bfbccb33e13c841d2facf63a" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a21e2ecea44db89dcc12901d6fcba9b4b" kindref="member">config</ref>.neuron.validation_synapse<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;TextCausalLMNext&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a5ced5b804c5d9e5ec1ca9be91e4e139f" kindref="member">weight_key</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&apos;shapley_values_nxt&apos;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>stat<sp/>key<sp/>+<sp/>!<sp/>to<sp/>calculate<sp/>neuron<sp/>weights<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>stat<sp/>keys<sp/>to<sp/>duplicate<sp/>([&apos;key&apos;]-&gt;[&apos;key!&apos;])<sp/>and<sp/>push<sp/>zero<sp/>to<sp/>its<sp/>EMA<sp/>if<sp/>neuron<sp/>non-responsive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a94cfce86ddc06a1874b1a8f735c59016" kindref="member">synapse_keys</ref><sp/>=<sp/>[</highlight><highlight class="stringliteral">&apos;shapley_values_nxt&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a5ced5b804c5d9e5ec1ca9be91e4e139f" kindref="member">weight_key</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&apos;shapley_values_min&apos;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>stat<sp/>key<sp/>+<sp/>!<sp/>to<sp/>calculate<sp/>neuron<sp/>weights<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>stat<sp/>keys<sp/>to<sp/>duplicate<sp/>([&apos;key&apos;]-&gt;[&apos;key!&apos;])<sp/>and<sp/>push<sp/>zero<sp/>to<sp/>its<sp/>EMA<sp/>if<sp/>neuron<sp/>non-responsive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a94cfce86ddc06a1874b1a8f735c59016" kindref="member">synapse_keys</ref><sp/>=<sp/>[</highlight><highlight class="stringliteral">&apos;shapley_values_min&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Prometheus<sp/>stats<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Turn<sp/>this<sp/>off<sp/>by<sp/>passing<sp/>the<sp/>--prometheus.off<sp/>flag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a2c00ff1b42ade35d2d5f3c591746a643" kindref="member">prometheus_info</ref><sp/>=<sp/>Info(</highlight><highlight class="stringliteral">&quot;neuron_info&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Info<sp/>sumamries<sp/>for<sp/>the<sp/>running<sp/>server-miner.&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a7c241b916b202d8695da27ff7a427ece" kindref="member">prometheus_gauges</ref><sp/>=<sp/>Gauge(</highlight><highlight class="stringliteral">&apos;validator_gauges&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;Gauges<sp/>for<sp/>the<sp/>running<sp/>validator.&apos;</highlight><highlight class="normal">,<sp/>[</highlight><highlight class="stringliteral">&apos;validator_gauges_name&apos;</highlight><highlight class="normal">])</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1aaa0bbe95d55f45058ed176ab39622349" kindref="member">prometheus_counters</ref><sp/>=<sp/>Counter(</highlight><highlight class="stringliteral">&apos;validator_counters&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;Counters<sp/>for<sp/>the<sp/>running<sp/>validator.&apos;</highlight><highlight class="normal">,<sp/>[</highlight><highlight class="stringliteral">&apos;validator_counters_name&apos;</highlight><highlight class="normal">])</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1ad4f49f7ccf64283f6c3a7934200abb70" kindref="member">prometheus_step_time</ref><sp/>=<sp/>Histogram(</highlight><highlight class="stringliteral">&apos;validator_step_time&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;Validator<sp/>step<sp/>time<sp/>histogram.&apos;</highlight><highlight class="normal">,<sp/>buckets=list(range(0,2*bittensor.__blocktime__,1)))</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>load<sp/>last<sp/>saved<sp/>validator<sp/>values<sp/>from<sp/>the<sp/>file<sp/>system</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>config.neuron.restart:</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1af59f6bc4b1e8ad181830c37826bdbb17" kindref="member">load</ref>()</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">@classmethod</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1abbd2bca6b88e715f9470a916dde2c386" kindref="member">check_config</ref>(<sp/>cls,<sp/>config:<sp/></highlight><highlight class="stringliteral">&apos;bittensor.Config&apos;</highlight><highlight class="normal"><sp/>):</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&quot;&quot;&quot;<sp/>Checks/validates<sp/>the<sp/>config<sp/>namespace<sp/>object.</highlight></codeline>
<codeline lineno="212"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="213"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nucleus.check_config(<sp/>config<sp/>)</highlight></codeline>
<codeline lineno="214"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bittensor.logging.check_config(<sp/>config<sp/>)</highlight></codeline>
<codeline lineno="215"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bittensor.wallet.check_config(<sp/>config<sp/>)</highlight></codeline>
<codeline lineno="216"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bittensor.subtensor.check_config(<sp/>config<sp/>)</highlight></codeline>
<codeline lineno="217"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bittensor.metagraph.check_config(<sp/>config<sp/>)</highlight></codeline>
<codeline lineno="218"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bittensor.dataset.check_config(<sp/>config<sp/>)</highlight></codeline>
<codeline lineno="219"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bittensor.dendrite.check_config(<sp/>config<sp/>)</highlight></codeline>
<codeline lineno="220"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bittensor.wandb.check_config(<sp/>config<sp/>)</highlight></codeline>
<codeline lineno="221"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bittensor.axon.check_config(<sp/>config<sp/>)</highlight></codeline>
<codeline lineno="222"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bittensor.prometheus.check_config(<sp/>config<sp/>)</highlight></codeline>
<codeline lineno="223"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>full_path<sp/>=<sp/>os.path.expanduser(&apos;{}/{}/{}/{}&apos;</highlight><highlight class="normal">.format(<sp/>config.logging.logging_dir,<sp/>config.wallet.name,<sp/>config.wallet.hotkey,<sp/>config.neuron.name<sp/>))</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config.neuron.full_path<sp/>=<sp/>os.path.expanduser(full_path)</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config.using_wandb<sp/>=<sp/>config.wandb.api_key<sp/>!=<sp/></highlight><highlight class="stringliteral">&apos;default&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>os.path.exists(config.neuron.full_path):</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os.makedirs(config.neuron.full_path)</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">@classmethod</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">add_args(<sp/>cls,<sp/>parser<sp/>):</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser.add_argument(</highlight><highlight class="stringliteral">&apos;--neuron.name&apos;</highlight><highlight class="normal">,<sp/>type=str,<sp/>help=</highlight><highlight class="stringliteral">&apos;Trials<sp/>for<sp/>this<sp/>miner<sp/>go<sp/>in<sp/>miner.root<sp/>/<sp/>(wallet_cold<sp/>-<sp/>wallet_hot)<sp/>/<sp/>miner.name<sp/>&apos;</highlight><highlight class="normal">,<sp/>default=</highlight><highlight class="stringliteral">&apos;core_validator&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser.add_argument(</highlight><highlight class="stringliteral">&apos;--neuron.learning_rate&apos;</highlight><highlight class="normal">,<sp/>type=float,<sp/>help=</highlight><highlight class="stringliteral">&apos;Training<sp/>initial<sp/>learning<sp/>rate.&apos;</highlight><highlight class="normal">,<sp/>default=0.1<sp/>)</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser.add_argument(</highlight><highlight class="stringliteral">&apos;--neuron.momentum&apos;</highlight><highlight class="normal">,<sp/>type=float,<sp/>help=</highlight><highlight class="stringliteral">&apos;optimizer<sp/>momentum.&apos;</highlight><highlight class="normal">,<sp/>default=0.8<sp/>)</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser.add_argument(</highlight><highlight class="stringliteral">&apos;--neuron.blocks_per_epoch&apos;</highlight><highlight class="normal">,<sp/>type=int,<sp/>help=</highlight><highlight class="stringliteral">&apos;Blocks<sp/>per<sp/>epoch,<sp/>-1<sp/>value<sp/>means<sp/>we<sp/>use<sp/>the<sp/>chain<sp/>value.&apos;</highlight><highlight class="normal">,<sp/>default<sp/>=<sp/>-1<sp/>)</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser.add_argument(</highlight><highlight class="stringliteral">&apos;--neuron.epochs_until_reset&apos;</highlight><highlight class="normal">,<sp/>type=int,<sp/>help=</highlight><highlight class="stringliteral">&apos;Number<sp/>of<sp/>epochs<sp/>before<sp/>weights<sp/>are<sp/>reset.&apos;</highlight><highlight class="normal">,<sp/>default<sp/>=<sp/>-1<sp/>)</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser.add_argument(</highlight><highlight class="stringliteral">&apos;--neuron.validation_len&apos;</highlight><highlight class="normal">,<sp/>type=int,<sp/>help=</highlight><highlight class="stringliteral">&apos;Number<sp/>of<sp/>tokens<sp/>to<sp/>holdout<sp/>for<sp/>phrase<sp/>validation<sp/>beyond<sp/>sequence<sp/>context.&apos;</highlight><highlight class="normal">,<sp/>default=8)</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser.add_argument(</highlight><highlight class="stringliteral">&apos;--neuron.prune_len&apos;</highlight><highlight class="normal">,<sp/>type=int,<sp/>help=</highlight><highlight class="stringliteral">&apos;Number<sp/>of<sp/>tokens<sp/>to<sp/>prune<sp/>from<sp/>each<sp/>validation<sp/>input<sp/>sequence.<sp/><sp/>(default<sp/>value:<sp/>-1,<sp/>pulling<sp/>from<sp/>subtensor<sp/>directly)&apos;</highlight><highlight class="normal">,<sp/>default=-1)</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser.add_argument(</highlight><highlight class="stringliteral">&apos;--neuron.device&apos;</highlight><highlight class="normal">,<sp/>type=str,<sp/>help=</highlight><highlight class="stringliteral">&apos;miner<sp/>default<sp/>training<sp/>device<sp/>cpu/cuda&apos;</highlight><highlight class="normal">,<sp/>default=(</highlight><highlight class="stringliteral">&quot;cuda&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>torch.cuda.is_available()<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;cpu&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser.add_argument(</highlight><highlight class="stringliteral">&apos;--neuron.clip_gradients&apos;</highlight><highlight class="normal">,<sp/>type=float,<sp/>help=</highlight><highlight class="stringliteral">&apos;Implement<sp/>gradient<sp/>clipping<sp/>to<sp/>avoid<sp/>exploding<sp/>loss<sp/>on<sp/>smaller<sp/>architectures.&apos;</highlight><highlight class="normal">,<sp/>default=1.0<sp/>)</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser.add_argument(</highlight><highlight class="stringliteral">&apos;--neuron.track_hotkey_changes&apos;</highlight><highlight class="normal">,<sp/>action=</highlight><highlight class="stringliteral">&apos;store_true&apos;</highlight><highlight class="normal">,<sp/>help=</highlight><highlight class="stringliteral">&apos;If<sp/>True,<sp/>track<sp/>hotkey<sp/>changes.&apos;</highlight><highlight class="normal">,<sp/>default=</highlight><highlight class="keyword">False</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser.add_argument(</highlight><highlight class="stringliteral">&apos;--neuron.restart&apos;</highlight><highlight class="normal">,<sp/>action=</highlight><highlight class="stringliteral">&apos;store_true&apos;</highlight><highlight class="normal">,<sp/>help=</highlight><highlight class="stringliteral">&apos;If<sp/>True,<sp/>reset<sp/>neuron_stats<sp/>and<sp/>validate<sp/>anew.&apos;</highlight><highlight class="normal">,<sp/>default=</highlight><highlight class="keyword">False</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser.add_argument(</highlight><highlight class="stringliteral">&apos;--neuron.restart_on_failure&apos;</highlight><highlight class="normal">,<sp/><sp/>action=</highlight><highlight class="stringliteral">&apos;store_true&apos;</highlight><highlight class="normal">,<sp/>help=</highlight><highlight class="stringliteral">&apos;&apos;&apos;Restart<sp/>neuron<sp/>on<sp/>unknown<sp/>error.&apos;&apos;&apos;</highlight><highlight class="normal">,<sp/>default=</highlight><highlight class="keyword">True</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser.add_argument(</highlight><highlight class="stringliteral">&apos;--neuron._mock&apos;</highlight><highlight class="normal">,<sp/>action=</highlight><highlight class="stringliteral">&apos;store_true&apos;</highlight><highlight class="normal">,<sp/>help=</highlight><highlight class="stringliteral">&apos;To<sp/>turn<sp/>on<sp/>neuron<sp/>mocking<sp/>for<sp/>testing<sp/>purposes.&apos;</highlight><highlight class="normal">,<sp/>default=</highlight><highlight class="keyword">False</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser.add_argument(</highlight><highlight class="stringliteral">&apos;--neuron.wait_for_finalization&apos;</highlight><highlight class="normal">,<sp/>action=</highlight><highlight class="stringliteral">&apos;store_true&apos;</highlight><highlight class="normal">,<sp/>help=</highlight><highlight class="stringliteral">&apos;&apos;&apos;when<sp/>setting<sp/>weights<sp/>the<sp/>miner<sp/>waits<sp/>for<sp/>trnasaction<sp/>finalization.&apos;&apos;&apos;</highlight><highlight class="normal">,<sp/>default=</highlight><highlight class="keyword">False</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser.add_argument(</highlight><highlight class="stringliteral">&apos;--neuron.forward_num&apos;</highlight><highlight class="normal">,<sp/>type=int,<sp/>help=</highlight><highlight class="stringliteral">&apos;&apos;&apos;How<sp/>much<sp/>forward<sp/>request<sp/>before<sp/>a<sp/>backward<sp/>call.&apos;&apos;&apos;</highlight><highlight class="normal">,<sp/>default=3)</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser.add_argument(</highlight><highlight class="stringliteral">&apos;--neuron.validation_synapse&apos;</highlight><highlight class="normal">,<sp/>type=str,<sp/>help=</highlight><highlight class="stringliteral">&apos;&apos;&apos;Synapse<sp/>used<sp/>for<sp/>validation.&apos;&apos;&apos;</highlight><highlight class="normal">,<sp/>default=</highlight><highlight class="stringliteral">&apos;TextCausalLMNext&apos;</highlight><highlight class="normal">,<sp/>choices<sp/>=<sp/>[</highlight><highlight class="stringliteral">&apos;TextCausalLMNext&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;TextCausalLM&apos;</highlight><highlight class="normal">])</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser.add_argument(</highlight><highlight class="stringliteral">&apos;--neuron.exclude_quantile&apos;</highlight><highlight class="normal">,<sp/>type=float,<sp/>help=</highlight><highlight class="stringliteral">&apos;Exclude<sp/>the<sp/>lowest<sp/>quantile<sp/>from<sp/>weight<sp/>setting.<sp/>(default<sp/>value:<sp/>-1,<sp/>pulling<sp/>from<sp/>subtensor<sp/>directly)&apos;</highlight><highlight class="normal">,<sp/>default=-1)</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">@classmethod</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbittensor_1_1__config_1_1config" kindref="compound">config</ref><sp/>(<sp/>cls<sp/>):</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser<sp/>=<sp/>argparse.ArgumentParser()<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cls.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a5542db2ddc40dd74753ff787bf69efe2" kindref="member">add_args</ref>(<sp/>parser<sp/>)</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nucleus.add_args(<sp/>parser<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bittensor.wallet.add_args(<sp/>parser<sp/>)</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bittensor.dendrite.add_args(<sp/>parser<sp/>)</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bittensor.subtensor.add_args(<sp/>parser<sp/>)</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bittensor.metagraph.add_args(<sp/>parser<sp/>)</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bittensor.logging.add_args(<sp/>parser<sp/>)</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bittensor.dataset.add_args(<sp/>parser<sp/>)</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bittensor.wandb.add_args(parser)</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bittensor.axon.add_args(<sp/>parser<sp/>)</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bittensor.prometheus.add_args(<sp/>parser<sp/>)</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classbittensor_1_1__config_1_1config" kindref="compound">bittensor.config</ref>(<sp/>parser<sp/>)</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">__repr__(self)<sp/>-&gt;<sp/>str:</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a17e0fb99f542fc534cab68b70d97b8b3" kindref="member">__str__</ref>()</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">__str__(self)<sp/>-&gt;<sp/>str:</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(f</highlight><highlight class="stringliteral">&apos;[bold]UID<sp/>{self.uid}[/bold]<sp/>\[{self.dendrite.receptor_pool.external_ip}]<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&apos;({self.wallet.name}:[bold]{self.wallet.coldkeypub.ss58_address[:7]}[/bold]/&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&apos;{self.config.wallet.hotkey}:[bold]{self.wallet.hotkey.ss58_address[:7]}[/bold])&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">__del__(self):</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1ae88acca270163d58860d1cc478cb0817" kindref="member">dataset</ref>.close()</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a8956d54618b3d67955719876c7a18802" kindref="member">dendrite</ref>.__del__()</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a00bf036af9efdc51600379db5df9a8c7" kindref="member">__exit__</ref><sp/>(<sp/>self,<sp/>exc_type,<sp/>exc_value,<sp/>exc_traceback<sp/>):</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&quot;&quot;&quot;<sp/>Close<sp/>down<sp/>neuron.</highlight></codeline>
<codeline lineno="279"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="280"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(exc_type,<sp/>exc_value,<sp/>exc_traceback)</highlight></codeline>
<codeline lineno="281"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a583724d45669eb79b4f030287259d226" kindref="member">__del__</ref>()</highlight></codeline>
<codeline lineno="282"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="283"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a21710f25546e2c3f96b252b620d32aab" kindref="member">__enter__</ref>(self):</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&quot;&quot;&quot;<sp/>Sanity<sp/>checks<sp/>and<sp/>begin<sp/>validator.</highlight></codeline>
<codeline lineno="285"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="286"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Wallet<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Connects<sp/>wallet<sp/>to<sp/>network.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a58a602f8a5b87001de8112479ac2ccb6" kindref="member">wallet</ref>.create()</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>NOTE:<sp/>This<sp/>registration<sp/>step<sp/>should<sp/>likely<sp/>be<sp/>solved<sp/>offline<sp/>first.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a58a602f8a5b87001de8112479ac2ccb6" kindref="member">wallet</ref>.reregister(<sp/>subtensor<sp/>=<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a76ae49a086d19cfab7fe9ff8bdcc872e" kindref="member">subtensor</ref><sp/>)</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>UID<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Get<sp/>our<sp/>uid<sp/>from<sp/>the<sp/>chain.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>At<sp/>this<sp/>point<sp/>we<sp/>should<sp/>have<sp/>a<sp/>uid<sp/>because<sp/>we<sp/>are<sp/>already<sp/>registered.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a208d5eeee24f9deb7624cb16a85b786d" kindref="member">uid</ref><sp/>=<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a58a602f8a5b87001de8112479ac2ccb6" kindref="member">wallet</ref>.get_uid(<sp/>subtensor<sp/>=<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a76ae49a086d19cfab7fe9ff8bdcc872e" kindref="member">subtensor</ref><sp/>)<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Monitoring<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Optionally<sp/>set<sp/>up<sp/>wandb<sp/>logging.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a492dbde3bfbccb33e13c841d2facf63a" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a21e2ecea44db89dcc12901d6fcba9b4b" kindref="member">config</ref>.using_wandb:</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbittensor_1_1__wandb_1_1wandb" kindref="compound">bittensor.wandb</ref>(</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config<sp/>=<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a492dbde3bfbccb33e13c841d2facf63a" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a21e2ecea44db89dcc12901d6fcba9b4b" kindref="member">config</ref>,</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cold_pubkey<sp/>=<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a58a602f8a5b87001de8112479ac2ccb6" kindref="member">wallet</ref>.coldkeypub.ss58_address,</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hot_pubkey<sp/>=<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a58a602f8a5b87001de8112479ac2ccb6" kindref="member">wallet</ref>.hotkey.ss58_address,</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root_dir<sp/>=<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a492dbde3bfbccb33e13c841d2facf63a" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a21e2ecea44db89dcc12901d6fcba9b4b" kindref="member">config</ref>.neuron.full_path</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Set<sp/>prometheus<sp/>run<sp/>info<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Serve<sp/>the<sp/>axon<sp/>so<sp/>we<sp/>can<sp/>determine<sp/>where<sp/>the<sp/>prometheus<sp/>server<sp/>port<sp/>is<sp/>(the<sp/>axon<sp/>is<sp/>only<sp/>served<sp/>for<sp/>this<sp/>reason.)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a758d451ba0b2f66b6deb23722a683c90" kindref="member">axon</ref>.serve(<sp/>subtensor<sp/>=<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a76ae49a086d19cfab7fe9ff8bdcc872e" kindref="member">subtensor</ref><sp/>)</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a7c241b916b202d8695da27ff7a427ece" kindref="member">prometheus_gauges</ref>.labels(<sp/></highlight><highlight class="stringliteral">&quot;model_size_params&quot;</highlight><highlight class="normal"><sp/>).set(<sp/>sum(p.numel()<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>p<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a69d4f664d4e7cf38416d68ed5a9d65f7" kindref="member">nucleus</ref>.parameters())<sp/>)</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a7c241b916b202d8695da27ff7a427ece" kindref="member">prometheus_gauges</ref>.labels(<sp/></highlight><highlight class="stringliteral">&quot;model_size_bytes&quot;</highlight><highlight class="normal"><sp/>).set(<sp/>sum(p.element_size()<sp/>*<sp/>p.nelement()<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>p<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a69d4f664d4e7cf38416d68ed5a9d65f7" kindref="member">nucleus</ref>.parameters())<sp/>)</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a2c00ff1b42ade35d2d5f3c591746a643" kindref="member">prometheus_info</ref>.info({</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;type&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&quot;core_validator&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;uid&apos;</highlight><highlight class="normal">:<sp/>str(self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a208d5eeee24f9deb7624cb16a85b786d" kindref="member">uid</ref>),</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;network&apos;</highlight><highlight class="normal">:<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a492dbde3bfbccb33e13c841d2facf63a" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a21e2ecea44db89dcc12901d6fcba9b4b" kindref="member">config</ref>.subtensor.network,</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;coldkey&apos;</highlight><highlight class="normal">:<sp/>str(self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a58a602f8a5b87001de8112479ac2ccb6" kindref="member">wallet</ref>.coldkeypub.ss58_address),</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;hotkey&apos;</highlight><highlight class="normal">:<sp/>str(self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a58a602f8a5b87001de8112479ac2ccb6" kindref="member">wallet</ref>.hotkey.ss58_address),</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a01d5c0a78884626cf4061e663e75ab3c" kindref="member">save</ref>(self,<sp/>path=None):</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&quot;&quot;&quot;<sp/>Save<sp/>validated<sp/>hotkeys<sp/>and<sp/>neuron_stats<sp/>to<sp/>filesystem.<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>path<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>path<sp/>=<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a492dbde3bfbccb33e13c841d2facf63a" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a21e2ecea44db89dcc12901d6fcba9b4b" kindref="member">config</ref>.neuron.full_path</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state_dict<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;neuron_stats&apos;</highlight><highlight class="normal">:<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a2b0e924da8067e801668a329396f024d" kindref="member">neuron_stats</ref>,</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;neuron_hotkeys&apos;</highlight><highlight class="normal">:<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1ab6519f08ffb439629f1a7c281dcc7e41" kindref="member">neuron_hotkeys</ref></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a492dbde3bfbccb33e13c841d2facf63a" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a21e2ecea44db89dcc12901d6fcba9b4b" kindref="member">config</ref>.neuron.track_hotkey_changes:</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state_dict[</highlight><highlight class="stringliteral">&apos;neuron_changes&apos;</highlight><highlight class="normal">]<sp/>=<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a3eac268c9f329cbe846160bc9afe0c0d" kindref="member">neuron_changes</ref></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>torch.save(state_dict,<sp/>f</highlight><highlight class="stringliteral">&apos;{path}/model.torch&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bittensor.logging.success(prefix=</highlight><highlight class="stringliteral">&apos;Saved<sp/>model&apos;</highlight><highlight class="normal">,<sp/>sufix=f</highlight><highlight class="stringliteral">&apos;&lt;blue&gt;{path}/model.torch&lt;/blue&gt;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>Exception<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>e:</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logger.warning(f</highlight><highlight class="stringliteral">&apos;Failed<sp/>to<sp/>save<sp/>model<sp/>with<sp/>error:<sp/>{e}&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1af59f6bc4b1e8ad181830c37826bdbb17" kindref="member">load</ref>(self,<sp/>path=None):</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&quot;&quot;&quot;<sp/>Load<sp/>validated<sp/>hotkeys<sp/>and<sp/>neuron_stats<sp/>from<sp/>filesystem.<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>path<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>path<sp/>=<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a492dbde3bfbccb33e13c841d2facf63a" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a21e2ecea44db89dcc12901d6fcba9b4b" kindref="member">config</ref>.neuron.full_path</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state_dict<sp/>=<sp/>torch.load(f</highlight><highlight class="stringliteral">&apos;{path}/model.torch&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a2b0e924da8067e801668a329396f024d" kindref="member">neuron_stats</ref><sp/>=<sp/>state_dict[</highlight><highlight class="stringliteral">&apos;neuron_stats&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1ab6519f08ffb439629f1a7c281dcc7e41" kindref="member">neuron_hotkeys</ref><sp/>=<sp/>state_dict[</highlight><highlight class="stringliteral">&apos;neuron_hotkeys&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;neuron_changes&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>state_dict<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a492dbde3bfbccb33e13c841d2facf63a" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a21e2ecea44db89dcc12901d6fcba9b4b" kindref="member">config</ref>.neuron.track_hotkey_changes:</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a3eac268c9f329cbe846160bc9afe0c0d" kindref="member">neuron_changes</ref><sp/>=<sp/>state_dict[</highlight><highlight class="stringliteral">&apos;neuron_changes&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bittensor.logging.success(prefix=</highlight><highlight class="stringliteral">&apos;Reloaded<sp/>model&apos;</highlight><highlight class="normal">,<sp/>sufix=f</highlight><highlight class="stringliteral">&apos;&lt;blue&gt;{path}/model.torch&lt;/blue&gt;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>Exception<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>e:</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logger.warning(f</highlight><highlight class="stringliteral">&apos;Failed<sp/>to<sp/>load<sp/>model<sp/>with<sp/>error:<sp/>{e}&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a0ff541e6cbd41a29bec67566e2a31db3" kindref="member">run</ref><sp/>(<sp/>self<sp/>):</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&quot;&quot;&quot;<sp/>Run<sp/>the<sp/>validator<sp/>and<sp/>terminate<sp/>on<sp/>Keyboard<sp/>interrupt.</highlight></codeline>
<codeline lineno="361"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="362"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Setup<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Checks<sp/>wallet<sp/>and<sp/>starts<sp/>monitoring.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">with</highlight><highlight class="normal"><sp/>self:</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Start<sp/>forward<sp/>requests<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a59cae1a3b1a1775e13f4a0ca037b8216" kindref="member">metagraph_sync</ref>()</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Run<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Iterates<sp/>through<sp/>epochs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a417d3e136d8dc69b4119ceb9c05e1221" kindref="member">epoch</ref><sp/>=<sp/>0</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a433bc309cb5f45fdc33138920df6ce4a" kindref="member">global_step</ref><sp/>=<sp/>0</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Epoch<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Each<sp/>epoch<sp/>runs<sp/>for<sp/>blocks_per_epoch<sp/>and<sp/>resets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>the<sp/>model<sp/>every<sp/>epochs_until_reset.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1ab45b9c37a17f218b1de1a3fe4e23e8c9" kindref="member">run_epoch</ref>()</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Stops<sp/>on<sp/>interrupt<sp/>otherwise<sp/>restarts<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>KeyboardInterrupt:</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>Exception<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>e:</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1aaa0bbe95d55f45058ed176ab39622349" kindref="member">prometheus_counters</ref>.labels(</highlight><highlight class="stringliteral">&apos;failures&apos;</highlight><highlight class="normal">).inc()</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>console.print_exception(show_locals=</highlight><highlight class="keyword">False</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(<sp/>traceback.format_exc()<sp/>)</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(<sp/></highlight><highlight class="stringliteral">&apos;Unknown<sp/>exception:<sp/>{}&apos;</highlight><highlight class="normal">,<sp/>e<sp/>)</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a492dbde3bfbccb33e13c841d2facf63a" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a21e2ecea44db89dcc12901d6fcba9b4b" kindref="member">config</ref>.neuron.restart_on_failure:</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1ab45b9c37a17f218b1de1a3fe4e23e8c9" kindref="member">run_epoch</ref>(<sp/>self<sp/>):</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&quot;&quot;&quot;<sp/>Runs<sp/>a<sp/>validator<sp/>epoch.<sp/>We<sp/>apply<sp/>batches<sp/>until<sp/>the<sp/>epoch<sp/>length<sp/>is<sp/>exhausted.</highlight></codeline>
<codeline lineno="394"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Occasionally<sp/>the<sp/>validator<sp/>nucleus<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>completely<sp/>reset<sp/>to<sp/>ensure<sp/>we<sp/>dont<sp/>converge<sp/>to<sp/>far.</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>At<sp/>the<sp/>end<sp/>of<sp/>the<sp/>epoch<sp/>we<sp/>set<sp/>weights<sp/>on<sp/>the<sp/>chain<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>optionally<sp/>log<sp/>to<sp/>wandb.</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="397"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Get<sp/>params<sp/>for<sp/>epoch<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Pulling<sp/>the<sp/>latest<sp/>chain<sp/>parameters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_block<sp/>=<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a76ae49a086d19cfab7fe9ff8bdcc872e" kindref="member">subtensor</ref>.block</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>batch_size<sp/>=<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a76ae49a086d19cfab7fe9ff8bdcc872e" kindref="member">subtensor</ref>.validator_batch_size<sp/></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sequence_length<sp/>=<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a76ae49a086d19cfab7fe9ff8bdcc872e" kindref="member">subtensor</ref>.validator_sequence_length</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>validation_len<sp/>=<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a492dbde3bfbccb33e13c841d2facf63a" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a21e2ecea44db89dcc12901d6fcba9b4b" kindref="member">config</ref>.neuron.validation_len<sp/><sp/></highlight><highlight class="comment">#<sp/>Number<sp/>of<sp/>tokens<sp/>to<sp/>holdout<sp/>for<sp/>phrase<sp/>validation<sp/>beyond<sp/>sequence<sp/>context</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Number<sp/>of<sp/>tokens<sp/>to<sp/>prune<sp/>for<sp/>phrase<sp/>validation<sp/>beyond<sp/>sequence<sp/>context</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prune_len<sp/>=<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a492dbde3bfbccb33e13c841d2facf63a" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a21e2ecea44db89dcc12901d6fcba9b4b" kindref="member">config</ref>.neuron.prune_len<sp/>=<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a76ae49a086d19cfab7fe9ff8bdcc872e" kindref="member">subtensor</ref>.prune_len</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min_allowed_weights<sp/>=<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a76ae49a086d19cfab7fe9ff8bdcc872e" kindref="member">subtensor</ref>.min_allowed_weights</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_weight_limit<sp/>=<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a76ae49a086d19cfab7fe9ff8bdcc872e" kindref="member">subtensor</ref>.max_weight_limit</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blocks_per_epoch<sp/>=<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a76ae49a086d19cfab7fe9ff8bdcc872e" kindref="member">subtensor</ref>.validator_epoch_length<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a492dbde3bfbccb33e13c841d2facf63a" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a21e2ecea44db89dcc12901d6fcba9b4b" kindref="member">config</ref>.neuron.blocks_per_epoch<sp/>==<sp/>-1<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a492dbde3bfbccb33e13c841d2facf63a" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a21e2ecea44db89dcc12901d6fcba9b4b" kindref="member">config</ref>.neuron.blocks_per_epoch</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>epochs_until_reset<sp/>=<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a76ae49a086d19cfab7fe9ff8bdcc872e" kindref="member">subtensor</ref>.validator_epochs_per_reset<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a492dbde3bfbccb33e13c841d2facf63a" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a21e2ecea44db89dcc12901d6fcba9b4b" kindref="member">config</ref>.neuron.epochs_until_reset<sp/>==<sp/>-1<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a492dbde3bfbccb33e13c841d2facf63a" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a21e2ecea44db89dcc12901d6fcba9b4b" kindref="member">config</ref>.neuron.epochs_until_reset</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a492dbde3bfbccb33e13c841d2facf63a" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a21e2ecea44db89dcc12901d6fcba9b4b" kindref="member">config</ref>.nucleus.scaling_law_power<sp/>=<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a76ae49a086d19cfab7fe9ff8bdcc872e" kindref="member">subtensor</ref>.scaling_law_power</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a492dbde3bfbccb33e13c841d2facf63a" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a21e2ecea44db89dcc12901d6fcba9b4b" kindref="member">config</ref>.nucleus.synergy_scaling_law_power<sp/>=<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a76ae49a086d19cfab7fe9ff8bdcc872e" kindref="member">subtensor</ref>.synergy_scaling_law_power</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a492dbde3bfbccb33e13c841d2facf63a" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a21e2ecea44db89dcc12901d6fcba9b4b" kindref="member">config</ref>.nucleus.logits_divergence<sp/>=<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a76ae49a086d19cfab7fe9ff8bdcc872e" kindref="member">subtensor</ref>.logits_divergence</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Logs<sp/>Prometheus<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a7c241b916b202d8695da27ff7a427ece" kindref="member">prometheus_gauges</ref>.labels(</highlight><highlight class="stringliteral">&quot;current_block&quot;</highlight><highlight class="normal">).set(<sp/>current_block<sp/>)</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a7c241b916b202d8695da27ff7a427ece" kindref="member">prometheus_gauges</ref>.labels(</highlight><highlight class="stringliteral">&quot;batch_size&quot;</highlight><highlight class="normal">).set(<sp/>batch_size<sp/>)</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a7c241b916b202d8695da27ff7a427ece" kindref="member">prometheus_gauges</ref>.labels(</highlight><highlight class="stringliteral">&quot;sequence_length&quot;</highlight><highlight class="normal">).set(<sp/>sequence_length<sp/>)</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a7c241b916b202d8695da27ff7a427ece" kindref="member">prometheus_gauges</ref>.labels(</highlight><highlight class="stringliteral">&quot;validation_len&quot;</highlight><highlight class="normal">).set(<sp/>validation_len<sp/>)</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a7c241b916b202d8695da27ff7a427ece" kindref="member">prometheus_gauges</ref>.labels(</highlight><highlight class="stringliteral">&quot;min_allowed_weights&quot;</highlight><highlight class="normal">).set(<sp/>min_allowed_weights<sp/>)</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a7c241b916b202d8695da27ff7a427ece" kindref="member">prometheus_gauges</ref>.labels(</highlight><highlight class="stringliteral">&quot;blocks_per_epoch&quot;</highlight><highlight class="normal">).set(<sp/>blocks_per_epoch<sp/>)</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a7c241b916b202d8695da27ff7a427ece" kindref="member">prometheus_gauges</ref>.labels(</highlight><highlight class="stringliteral">&quot;epochs_until_reset&quot;</highlight><highlight class="normal">).set(<sp/>epochs_until_reset<sp/>)</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a7c241b916b202d8695da27ff7a427ece" kindref="member">prometheus_gauges</ref>.labels(</highlight><highlight class="stringliteral">&quot;scaling_law_power&quot;</highlight><highlight class="normal">).set(<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a492dbde3bfbccb33e13c841d2facf63a" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a21e2ecea44db89dcc12901d6fcba9b4b" kindref="member">config</ref>.nucleus.scaling_law_power<sp/>)</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a7c241b916b202d8695da27ff7a427ece" kindref="member">prometheus_gauges</ref>.labels(</highlight><highlight class="stringliteral">&quot;synergy_scaling_law_power&quot;</highlight><highlight class="normal">).set(<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a492dbde3bfbccb33e13c841d2facf63a" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a21e2ecea44db89dcc12901d6fcba9b4b" kindref="member">config</ref>.nucleus.synergy_scaling_law_power<sp/>)</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Update<sp/>dataset<sp/>size<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(batch_size<sp/>!=<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1ae88acca270163d58860d1cc478cb0817" kindref="member">dataset</ref>.batch_size)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>(sequence_length<sp/>+<sp/>validation_len<sp/>+<sp/>prune_len<sp/>!=<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1ae88acca270163d58860d1cc478cb0817" kindref="member">dataset</ref>.block_size):</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1ae88acca270163d58860d1cc478cb0817" kindref="member">dataset</ref>.set_data_size(batch_size,<sp/>sequence_length<sp/>+<sp/>validation_len<sp/>+<sp/>prune_len)</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Logs<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a492dbde3bfbccb33e13c841d2facf63a" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a21e2ecea44db89dcc12901d6fcba9b4b" kindref="member">config</ref>.using_wandb:</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wandb.log({</highlight><highlight class="stringliteral">&apos;era/batch_size&apos;</highlight><highlight class="normal">:<sp/>batch_size,<sp/></highlight><highlight class="stringliteral">&apos;era/sequence_length&apos;</highlight><highlight class="normal">:<sp/>sequence_length,</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;era/validation_len&apos;</highlight><highlight class="normal">:<sp/>validation_len,</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;era/min_allowed_weights&apos;</highlight><highlight class="normal">:<sp/>min_allowed_weights,<sp/></highlight><highlight class="stringliteral">&apos;era/max_weight_limit&apos;</highlight><highlight class="normal">:<sp/>max_weight_limit,</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;era/blocks_per_epoch&apos;</highlight><highlight class="normal">:<sp/>blocks_per_epoch,<sp/></highlight><highlight class="stringliteral">&apos;era/epochs_until_reset&apos;</highlight><highlight class="normal">:<sp/>epochs_until_reset},</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>step=current_block)</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Run<sp/>Epoch<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Each<sp/>block<sp/>length<sp/>lasts<sp/>blocks_per_epoch<sp/>blocks.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>This<sp/>gives<sp/>us<sp/>a<sp/>consistent<sp/>network<sp/>wide<sp/>timer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Here<sp/>we<sp/>run<sp/>until<sp/>blocks_per_epochs<sp/>have<sp/>progressed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>epoch_steps<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>epoch_responsive_uids<sp/>=<sp/>set()</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>epoch_queried_uids<sp/>=<sp/>set()</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>epoch_start_time<sp/>=<sp/>time.time()</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a7c241b916b202d8695da27ff7a427ece" kindref="member">prometheus_gauges</ref>.labels(</highlight><highlight class="stringliteral">&quot;epoch_steps&quot;</highlight><highlight class="normal">).set(0)</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>normal<sp/>epoch<sp/>duration<sp/>is<sp/>blocks_per_epoch<sp/>if<sp/>all<sp/>UIDs<sp/>have<sp/>been<sp/>queried</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>try<sp/>to<sp/>query<sp/>each<sp/>UID<sp/>at<sp/>least<sp/>once<sp/>-<sp/>assumes<sp/>nucleus<sp/>samples<sp/>without<sp/>replacement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>but<sp/>keep<sp/>minimum<sp/>epoch<sp/>duration<sp/>at<sp/>blocks_per_epoch<sp/>*<sp/>block_period</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>in<sp/>case<sp/>of<sp/>subtensor<sp/>outage<sp/>causing<sp/>invalid<sp/>block<sp/>readings<sp/>to<sp/>prevent<sp/>fast<sp/>repeated<sp/>weight<sp/>setting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start_block<sp/>=<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a76ae49a086d19cfab7fe9ff8bdcc872e" kindref="member">subtensor</ref>.block</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a76ae49a086d19cfab7fe9ff8bdcc872e" kindref="member">subtensor</ref>.block<sp/>&lt;<sp/>start_block<sp/>+<sp/>blocks_per_epoch<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time.time()<sp/>-<sp/>epoch_start_time<sp/>&lt;<sp/>blocks_per_epoch<sp/>*<sp/>bittensor.__blocktime__):</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logger.info(f</highlight><highlight class="stringliteral">&apos;Run<sp/>epoch<sp/>{self.epoch}<sp/>(step<sp/>{epoch_steps})<sp/>while<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&apos;({self.subtensor.block}<sp/>&lt;<sp/>{start_block<sp/>+<sp/>blocks_per_epoch}<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&apos;=<sp/>{start_block}<sp/>+<sp/>{blocks_per_epoch})<sp/>or<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&apos;({time.time()<sp/>-<sp/>epoch_start_time:.2f}<sp/>&lt;<sp/>{blocks_per_epoch<sp/>*<sp/>bittensor.__blocktime__})&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start_time<sp/>=<sp/>time.time()</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Forward<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Forwards<sp/>inputs<sp/>through<sp/>the<sp/>network<sp/>and<sp/>returns<sp/>the<sp/>loss</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>and<sp/>endpoint<sp/>scores<sp/>using<sp/>shapely<sp/>approximation<sp/>of<sp/>salience.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>loss,<sp/>stats<sp/>=<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a69d4f664d4e7cf38416d68ed5a9d65f7" kindref="member">nucleus</ref>(<sp/>next(self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1ae88acca270163d58860d1cc478cb0817" kindref="member">dataset</ref>)<sp/>,<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1ab7d86c29802c834f4f9c56cad016af3d" kindref="member">metagraph</ref>,<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a8956d54618b3d67955719876c7a18802" kindref="member">dendrite</ref><sp/>)</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a7c241b916b202d8695da27ff7a427ece" kindref="member">prometheus_gauges</ref>.labels(</highlight><highlight class="stringliteral">&quot;loss&quot;</highlight><highlight class="normal">).set(<sp/>loss.item()<sp/>)</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Backward<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Backwards<sp/>gradients<sp/>through<sp/>model<sp/>to<sp/>train<sp/>gating<sp/>and<sp/>remote<sp/>endpoints.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>hasattr(loss,<sp/></highlight><highlight class="stringliteral">&apos;grad_fn&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>loss.grad_fn<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logger.info(f</highlight><highlight class="stringliteral">&apos;Backward<sp/>&lt;dim&gt;(loss:<sp/>{loss:.3f})&lt;/dim&gt;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bw_start_time<sp/>=<sp/>time.time()</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(loss<sp/>/<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a492dbde3bfbccb33e13c841d2facf63a" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a21e2ecea44db89dcc12901d6fcba9b4b" kindref="member">config</ref>.neuron.forward_num).backward()</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logger.info(f</highlight><highlight class="stringliteral">&apos;Backward<sp/>&lt;dim&gt;[{time.time()<sp/>-<sp/>bw_start_time:.3g}s]&lt;/dim&gt;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Stats<sp/>update<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Updates<sp/>moving<sp/>averages<sp/>and<sp/>history.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>responsive_uids,<sp/>queried_uids<sp/>=<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a43ede3459d2681a5161139214560768d" kindref="member">neuron_stats_update</ref>(stats)</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>epoch_responsive_uids<sp/>|=<sp/>set(responsive_uids)</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>epoch_queried_uids<sp/>|=<sp/>set(queried_uids)</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>State<sp/>update<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Prints<sp/>step<sp/>logs<sp/>to<sp/>screen.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>epoch_steps<sp/>+=<sp/>1</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a433bc309cb5f45fdc33138920df6ce4a" kindref="member">global_step</ref><sp/>+=<sp/>1</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a7c241b916b202d8695da27ff7a427ece" kindref="member">prometheus_gauges</ref>.labels(</highlight><highlight class="stringliteral">&quot;global_step&quot;</highlight><highlight class="normal">).inc()</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a7c241b916b202d8695da27ff7a427ece" kindref="member">prometheus_gauges</ref>.labels(</highlight><highlight class="stringliteral">&quot;epoch_steps&quot;</highlight><highlight class="normal">).inc()</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Block<sp/>state<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_block<sp/>=<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a76ae49a086d19cfab7fe9ff8bdcc872e" kindref="member">subtensor</ref>.block</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a7c241b916b202d8695da27ff7a427ece" kindref="member">prometheus_gauges</ref>.labels(</highlight><highlight class="stringliteral">&quot;current_block&quot;</highlight><highlight class="normal">).set(current_block)</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a7c241b916b202d8695da27ff7a427ece" kindref="member">prometheus_gauges</ref>.labels(</highlight><highlight class="stringliteral">&quot;last_updated&quot;</highlight><highlight class="normal">).set(<sp/>current_block<sp/>-<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1ab7d86c29802c834f4f9c56cad016af3d" kindref="member">metagraph</ref>.last_update[self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a208d5eeee24f9deb7624cb16a85b786d" kindref="member">uid</ref>]<sp/>)</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Step<sp/>time<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>step_time<sp/>=<sp/>time.time()<sp/>-<sp/>start_time</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1ad4f49f7ccf64283f6c3a7934200abb70" kindref="member">prometheus_step_time</ref>.observe(<sp/>step_time<sp/>)</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a7c241b916b202d8695da27ff7a427ece" kindref="member">prometheus_gauges</ref>.labels(</highlight><highlight class="stringliteral">&apos;step_time&apos;</highlight><highlight class="normal">).set(<sp/>step_time<sp/>)</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>epoch_steps<sp/>%<sp/>25<sp/>==<sp/>1:</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>validator<sp/>identifier<sp/>status<sp/>console<sp/>message<sp/>(every<sp/>25<sp/>validation<sp/>steps)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(f</highlight><highlight class="stringliteral">&quot;[white<sp/>not<sp/>bold]{datetime.datetime.now():%Y-%m-%d<sp/>%H:%M:%S}[/white<sp/>not<sp/>bold]{&apos;<sp/>&apos;<sp/>*<sp/>4}<sp/>|<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&quot;{f&apos;[bright_white]core_validator[/bright_white]&apos;.center(16<sp/>+<sp/>len(&apos;[bright_white][/bright_white]&apos;))}<sp/>|<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&quot;UID<sp/>[cyan]{self.uid}[/cyan]<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&quot;[dim<sp/>white<sp/>not<sp/>bold][{self.dendrite.receptor_pool.external_ip}][/dim<sp/>white<sp/>not<sp/>bold]<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&quot;[white<sp/>not<sp/>bold]cold:[bold]{self.wallet.name}[/bold]:&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&quot;[bright_white<sp/>not<sp/>bold]{self.wallet.coldkeypub.ss58_address}[/bright_white<sp/>not<sp/>bold]<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&quot;[dim<sp/>white]/[/dim<sp/>white]<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&quot;hot:[bold]{self.config.wallet.hotkey}[/bold]:&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&quot;[bright_white<sp/>not<sp/>bold]{self.wallet.hotkey.ss58_address}[/bright_white<sp/>not<sp/>bold][/white<sp/>not<sp/>bold]&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>validator<sp/>update<sp/>status<sp/>console<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(f</highlight><highlight class="stringliteral">&quot;[white<sp/>not<sp/>bold]{datetime.datetime.now():%Y-%m-%d<sp/>%H:%M:%S}[/white<sp/>not<sp/>bold]{&apos;<sp/>&apos;<sp/>*<sp/>4}<sp/>|<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&quot;{f&apos;UID<sp/>[bright_cyan]{self.uid}[/bright_cyan]&apos;.center(16<sp/>+<sp/>len(&apos;[bright_cyan][/bright_cyan]&apos;))}<sp/>|<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&apos;Updated<sp/>[yellow]{current_block<sp/>-<sp/>self.metagraph.last_update[self.uid]}[/yellow]<sp/>[dim]blocks<sp/>ago[/dim]<sp/>|<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&apos;Dividends<sp/>[green<sp/>not<sp/>bold]{self.metagraph.dividends[self.uid]:.5f}[/green<sp/>not<sp/>bold]<sp/>|<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&apos;Stake<sp/>\u03C4[magenta<sp/>not<sp/>bold]{self.metagraph.stake[self.uid]:.5f}[/magenta<sp/>not<sp/>bold]<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&apos;[dim](retrieved<sp/>[yellow]{current_block<sp/>-<sp/>start_block}[/yellow]<sp/>blocks<sp/>ago<sp/>from<sp/>{self.subtensor.network})[/dim]&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>save<sp/>neuron_stats<sp/>to<sp/>filesystem</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a01d5c0a78884626cf4061e663e75ab3c" kindref="member">save</ref>()</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>step<sp/>update<sp/>console<sp/>message<sp/>(every<sp/>validation<sp/>step)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(f</highlight><highlight class="stringliteral">&quot;[white<sp/>not<sp/>bold]{datetime.datetime.now():%Y-%m-%d<sp/>%H:%M:%S}[/white<sp/>not<sp/>bold]{&apos;<sp/>&apos;<sp/>*<sp/>4}<sp/>|<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&quot;{f&apos;[magenta<sp/>dim<sp/>not<sp/>bold]#{current_block}[/magenta<sp/>dim<sp/>not<sp/>bold]&apos;.center(16<sp/>+<sp/>len(&apos;[magenta<sp/>dim<sp/>not<sp/>bold][/magenta<sp/>dim<sp/>not<sp/>bold]&apos;))}<sp/>|<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&apos;[green<sp/>not<sp/>bold]{current_block<sp/>-<sp/>start_block}[/green<sp/>not<sp/>bold]/&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&apos;[white<sp/>not<sp/>bold]{blocks_per_epoch}[/white<sp/>not<sp/>bold]<sp/>[dim]blocks/epoch[/dim]<sp/>|<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&apos;[white<sp/>not<sp/>bold]Step<sp/>{epoch_steps}[white<sp/>not<sp/>bold]<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&apos;[dim]<sp/>Epoch<sp/>{self.epoch}[/dim]<sp/>|<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&apos;[bright_green<sp/>not<sp/>bold]{len(responsive_uids)}[/bright_green<sp/>not<sp/>bold]/&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&apos;[white]{len(queried_uids)}[/white]<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&apos;[[yellow]{step_time:.3g}[/yellow]s]<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&apos;[dim<sp/>white<sp/>not<sp/>bold][green]{len(epoch_responsive_uids)}[/green]/&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&apos;{len(epoch_queried_uids)}[/dim<sp/>white<sp/>not<sp/>bold]&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a492dbde3bfbccb33e13c841d2facf63a" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a21e2ecea44db89dcc12901d6fcba9b4b" kindref="member">config</ref>.logging.debug<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a492dbde3bfbccb33e13c841d2facf63a" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a21e2ecea44db89dcc12901d6fcba9b4b" kindref="member">config</ref>.logging.trace:</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Print<sp/>stats<sp/>update<sp/>(table)<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Prints<sp/>exponential<sp/>moving<sp/>average<sp/>statistics<sp/>of<sp/>valid<sp/>neurons<sp/>from<sp/>latest<sp/>validator<sp/>forward</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacebittensor_1_1__neuron_1_1text_1_1core__validator_1a3b98321f53ed9671d10985f26470e151" kindref="member">stats_table</ref>({uid:<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a2b0e924da8067e801668a329396f024d" kindref="member">neuron_stats</ref>[uid]</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>uid,<sp/>stat<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>stats.items()<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len(set(stat.keys())<sp/>&amp;<sp/>set(self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a94cfce86ddc06a1874b1a8f735c59016" kindref="member">synapse_keys</ref>))},</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a5ced5b804c5d9e5ec1ca9be91e4e139f" kindref="member">weight_key</ref>,<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a492dbde3bfbccb33e13c841d2facf63a" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a21e2ecea44db89dcc12901d6fcba9b4b" kindref="member">config</ref>.get(</highlight><highlight class="stringliteral">&apos;width&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&apos;[white]<sp/>Stats<sp/>update<sp/>[/white]<sp/>|<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>str(self),<sp/><sp/></highlight><highlight class="comment">#<sp/>title</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&apos;#{current_block}:<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&apos;[bold]{current_block<sp/>-<sp/>start_block}[/bold]/{blocks_per_epoch}<sp/>(blocks/epoch)<sp/>|<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&apos;Epoch<sp/>{self.epoch}<sp/>|<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&apos;[white]<sp/>Step<sp/>{epoch_steps}<sp/>({self.global_step}<sp/>global)<sp/>\[{step_time:.3g}s]<sp/>[/white]&apos;</highlight><highlight class="normal">)<sp/><sp/></highlight><highlight class="comment">#<sp/>caption</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Calculate<sp/>neuron<sp/>weights<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sample_uids,<sp/>sample_weights<sp/>=<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1ac138043f1e7829700d0271e2989605e1" kindref="member">calculate_weights</ref>()</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1ac81643b48f83061067bee51b57305460" kindref="member">weights_table</ref>(sample_uids,<sp/>sample_weights,</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>include_uids=list(stats.keys()),<sp/>num_rows=len(stats)<sp/>+<sp/>25)<sp/><sp/></highlight><highlight class="comment">#<sp/>print<sp/>weights<sp/>table</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Logs<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a492dbde3bfbccb33e13c841d2facf63a" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a21e2ecea44db89dcc12901d6fcba9b4b" kindref="member">config</ref>.using_wandb:</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>uid,<sp/>vals<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a2b0e924da8067e801668a329396f024d" kindref="member">neuron_stats</ref>.items():</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>key<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>vals:<sp/><sp/></highlight><highlight class="comment">#<sp/>detailed<sp/>neuron<sp/>evaluation<sp/>fields,<sp/>e.g.<sp/>loss,<sp/>shapley_values,<sp/>synergy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wandb.log({f</highlight><highlight class="stringliteral">&apos;stats/{key}_{uid}&apos;</highlight><highlight class="normal">:<sp/>vals[key]},<sp/>step=current_block,<sp/>commit=</highlight><highlight class="keyword">False</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wandb.log({</highlight><highlight class="stringliteral">&apos;epoch/epoch&apos;</highlight><highlight class="normal">:<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a417d3e136d8dc69b4119ceb9c05e1221" kindref="member">epoch</ref>,<sp/></highlight><highlight class="stringliteral">&apos;epoch/epoch_steps&apos;</highlight><highlight class="normal">:<sp/>epoch_steps,</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;epoch/global_steps&apos;</highlight><highlight class="normal">:<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a433bc309cb5f45fdc33138920df6ce4a" kindref="member">global_step</ref>,<sp/></highlight><highlight class="stringliteral">&apos;epoch/loss&apos;</highlight><highlight class="normal">:<sp/>loss.item(),</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;epoch/time&apos;</highlight><highlight class="normal">:<sp/>step_time},<sp/>step=current_block,<sp/>commit=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Do<sp/>the<sp/>backward<sp/>request<sp/>after<sp/>the<sp/>a<sp/>queue<sp/>of<sp/>forward<sp/>requests<sp/>got<sp/>finished.<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>epoch_steps<sp/>%<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a492dbde3bfbccb33e13c841d2facf63a" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a21e2ecea44db89dcc12901d6fcba9b4b" kindref="member">config</ref>.neuron.forward_num<sp/>==<sp/>1:</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start_time<sp/>=<sp/>time.time()</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logger.info(</highlight><highlight class="stringliteral">&apos;Model<sp/>update<sp/>\t|<sp/>Optimizer<sp/>step&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Apply<sp/>gradients<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Applies<sp/>local<sp/>gradients<sp/>to<sp/>parameters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clip_grad_norm_(self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a69d4f664d4e7cf38416d68ed5a9d65f7" kindref="member">nucleus</ref>.parameters(),<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a492dbde3bfbccb33e13c841d2facf63a" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a21e2ecea44db89dcc12901d6fcba9b4b" kindref="member">config</ref>.neuron.clip_gradients)</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a23a041fdc7ba87896f95c0b4fa62c1a8" kindref="member">optimizer</ref>.step()</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a23a041fdc7ba87896f95c0b4fa62c1a8" kindref="member">optimizer</ref>.zero_grad()</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logger.info(f</highlight><highlight class="stringliteral">&apos;Model<sp/>update<sp/>\t|<sp/>Optimizer<sp/>step<sp/>&lt;dim&gt;[{time.time()<sp/>-<sp/>start_time:.3g}s]&lt;/dim&gt;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a59cae1a3b1a1775e13f4a0ca037b8216" kindref="member">metagraph_sync</ref>()<sp/><sp/></highlight><highlight class="comment">#<sp/>Reset<sp/>metagraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Calculate<sp/>neuron<sp/>weights<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sample_uids,<sp/>sample_weights<sp/>=<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1ac138043f1e7829700d0271e2989605e1" kindref="member">calculate_weights</ref>()</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a492dbde3bfbccb33e13c841d2facf63a" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a21e2ecea44db89dcc12901d6fcba9b4b" kindref="member">config</ref>.logging.debug<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a492dbde3bfbccb33e13c841d2facf63a" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a21e2ecea44db89dcc12901d6fcba9b4b" kindref="member">config</ref>.logging.trace:</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1ac81643b48f83061067bee51b57305460" kindref="member">weights_table</ref>(sample_uids,<sp/>sample_weights)<sp/><sp/></highlight><highlight class="comment">#<sp/>print<sp/>weights<sp/>table</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>set<sp/>weights<sp/>console<sp/>message<sp/>(every<sp/>epoch)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(f</highlight><highlight class="stringliteral">&quot;[white<sp/>not<sp/>bold]{datetime.datetime.now():%Y-%m-%d<sp/>%H:%M:%S}[/white<sp/>not<sp/>bold]{&apos;<sp/>&apos;<sp/>*<sp/>4}<sp/>|<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&quot;{f&apos;[bright_white]Set<sp/>weights[/bright_white]&apos;.center(16<sp/>+<sp/>len(&apos;[bright_white][/bright_white]&apos;))}<sp/>|<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&apos;[bright_green<sp/>not<sp/>bold]{len(sample_weights)}[/bright_green<sp/>not<sp/>bold]<sp/>[dim]weights<sp/>set[/dim]<sp/>|<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&apos;[bright_green<sp/>not<sp/>bold]{len(epoch_responsive_uids)}[/bright_green<sp/>not<sp/>bold]/&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&apos;[white]{len(epoch_queried_uids)}[/white]<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&apos;[dim<sp/>white<sp/>not<sp/>bold][green]responsive[/green]/queried[/dim<sp/>white<sp/>not<sp/>bold]<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&apos;[[yellow]{time.time()<sp/>-<sp/>epoch_start_time:.0f}[/yellow]s]<sp/>|<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&apos;[dim]weights[/dim]<sp/>sum:{sample_weights.sum().item():.2g}<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&apos;[white]<sp/>max:[bold]{sample_weights.max().item():.4g}[/bold]<sp/>/<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&apos;min:[bold]{sample_weights.min().item():.4g}[/bold]<sp/>[/white]<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&apos;\[{max_weight_limit:.4g}<sp/>allowed]&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a76ae49a086d19cfab7fe9ff8bdcc872e" kindref="member">subtensor</ref>.set_weights(</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uids=sample_uids.detach().to(</highlight><highlight class="stringliteral">&apos;cpu&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>weights=sample_weights.detach().to(</highlight><highlight class="stringliteral">&apos;cpu&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wallet=self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a58a602f8a5b87001de8112479ac2ccb6" kindref="member">wallet</ref>,</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wait_for_finalization=self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a492dbde3bfbccb33e13c841d2facf63a" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a21e2ecea44db89dcc12901d6fcba9b4b" kindref="member">config</ref>.neuron.wait_for_finalization,</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Wandb<sp/>Logs<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Optionally<sp/>send<sp/>validator<sp/>logs<sp/>to<sp/>wandb.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a492dbde3bfbccb33e13c841d2facf63a" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a21e2ecea44db89dcc12901d6fcba9b4b" kindref="member">config</ref>.using_wandb:</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Logging<sp/>history<sp/>to<sp/>wandb.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>df<sp/>=<sp/>pandas.concat(<sp/>[</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="utils_2____init_____8py_1ae020c1b849a7b801b2c98257d18f487d" kindref="member">bittensor.utils.indexed_values_to_dataframe</ref>(<sp/>prefix<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;weights&apos;</highlight><highlight class="normal">,<sp/>index<sp/>=<sp/>sample_uids,<sp/>values<sp/>=<sp/>torch.zeros(<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1ab7d86c29802c834f4f9c56cad016af3d" kindref="member">metagraph</ref>.n<sp/>).scatter(<sp/>dim<sp/>=<sp/>0,<sp/>src<sp/>=<sp/>sample_weights,<sp/>index<sp/>=<sp/>sample_uids<sp/>)<sp/>),</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a8956d54618b3d67955719876c7a18802" kindref="member">dendrite</ref>.to_dataframe(<sp/>metagraph<sp/>=<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1ab7d86c29802c834f4f9c56cad016af3d" kindref="member">metagraph</ref><sp/>)</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>],<sp/>axis<sp/>=<sp/>1);<sp/>df[</highlight><highlight class="stringliteral">&apos;uid&apos;</highlight><highlight class="normal">]<sp/>=<sp/>df.index</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wandb_data_dend<sp/>=<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a8956d54618b3d67955719876c7a18802" kindref="member">dendrite</ref>.to_wandb()</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wandb_weight<sp/>=<sp/>{f</highlight><highlight class="stringliteral">&apos;stats/weight_{uid}&apos;</highlight><highlight class="normal">:<sp/>weight<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>uid,<sp/>weight<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>zip<sp/>(sample_uids,<sp/>sample_weights)}</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wandb_data<sp/>=<sp/>{<sp/></highlight><highlight class="stringliteral">&apos;stake&apos;</highlight><highlight class="normal">:<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1ab7d86c29802c834f4f9c56cad016af3d" kindref="member">metagraph</ref>.S[<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a208d5eeee24f9deb7624cb16a85b786d" kindref="member">uid</ref><sp/>].item(),<sp/></highlight><highlight class="stringliteral">&apos;dividends&apos;</highlight><highlight class="normal">:<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1ab7d86c29802c834f4f9c56cad016af3d" kindref="member">metagraph</ref>.D[<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a208d5eeee24f9deb7624cb16a85b786d" kindref="member">uid</ref><sp/>].item()<sp/>}<sp/></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wandb.log(<sp/>{<sp/></highlight><highlight class="stringliteral">&apos;stats&apos;</highlight><highlight class="normal">:<sp/>wandb.Table(<sp/>dataframe<sp/>=<sp/>df<sp/>)<sp/>},<sp/>step<sp/>=<sp/>current_block,<sp/>commit=</highlight><highlight class="keyword">False</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wandb.log(<sp/>{<sp/>**wandb_data,<sp/>**wandb_data_dend,<sp/>**wandb_weight<sp/>},<sp/>step<sp/>=<sp/>current_block,<sp/>commit=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Epoch<sp/>Prometheus<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a7c241b916b202d8695da27ff7a427ece" kindref="member">prometheus_gauges</ref>.labels(</highlight><highlight class="stringliteral">&quot;epoch&quot;</highlight><highlight class="normal">).inc()</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a7c241b916b202d8695da27ff7a427ece" kindref="member">prometheus_gauges</ref>.labels(</highlight><highlight class="stringliteral">&quot;set_weights&quot;</highlight><highlight class="normal">).inc()</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a7c241b916b202d8695da27ff7a427ece" kindref="member">prometheus_gauges</ref>.labels(</highlight><highlight class="stringliteral">&quot;stake&quot;</highlight><highlight class="normal">).set(<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1ab7d86c29802c834f4f9c56cad016af3d" kindref="member">metagraph</ref>.stake[self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a208d5eeee24f9deb7624cb16a85b786d" kindref="member">uid</ref>]<sp/>)</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a7c241b916b202d8695da27ff7a427ece" kindref="member">prometheus_gauges</ref>.labels(</highlight><highlight class="stringliteral">&quot;rank&quot;</highlight><highlight class="normal">).set(<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1ab7d86c29802c834f4f9c56cad016af3d" kindref="member">metagraph</ref>.ranks[self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a208d5eeee24f9deb7624cb16a85b786d" kindref="member">uid</ref>]<sp/>)</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a7c241b916b202d8695da27ff7a427ece" kindref="member">prometheus_gauges</ref>.labels(</highlight><highlight class="stringliteral">&quot;trust&quot;</highlight><highlight class="normal">).set(<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1ab7d86c29802c834f4f9c56cad016af3d" kindref="member">metagraph</ref>.trust[self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a208d5eeee24f9deb7624cb16a85b786d" kindref="member">uid</ref>]<sp/>)</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a7c241b916b202d8695da27ff7a427ece" kindref="member">prometheus_gauges</ref>.labels(</highlight><highlight class="stringliteral">&quot;incentive&quot;</highlight><highlight class="normal">).set(<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1ab7d86c29802c834f4f9c56cad016af3d" kindref="member">metagraph</ref>.incentive[self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a208d5eeee24f9deb7624cb16a85b786d" kindref="member">uid</ref>]<sp/>)</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a7c241b916b202d8695da27ff7a427ece" kindref="member">prometheus_gauges</ref>.labels(</highlight><highlight class="stringliteral">&quot;dividends&quot;</highlight><highlight class="normal">).set(<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1ab7d86c29802c834f4f9c56cad016af3d" kindref="member">metagraph</ref>.dividends[self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a208d5eeee24f9deb7624cb16a85b786d" kindref="member">uid</ref>]<sp/>)</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a7c241b916b202d8695da27ff7a427ece" kindref="member">prometheus_gauges</ref>.labels(</highlight><highlight class="stringliteral">&quot;emission&quot;</highlight><highlight class="normal">).set(<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1ab7d86c29802c834f4f9c56cad016af3d" kindref="member">metagraph</ref>.emission[self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a208d5eeee24f9deb7624cb16a85b786d" kindref="member">uid</ref>]<sp/>)</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Iterate<sp/>epochs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a417d3e136d8dc69b4119ceb9c05e1221" kindref="member">epoch</ref><sp/>+=<sp/>1</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a59cae1a3b1a1775e13f4a0ca037b8216" kindref="member">metagraph_sync</ref>(self):</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&quot;&quot;&quot;<sp/>Syncing<sp/>metagraph<sp/>together<sp/>with<sp/>other<sp/>metagraph-size<sp/>related<sp/>objects</highlight></codeline>
<codeline lineno="633"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="634"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>old_hotkeys<sp/>=<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1ab6519f08ffb439629f1a7c281dcc7e41" kindref="member">neuron_hotkeys</ref><sp/>+<sp/>[]<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1ab6519f08ffb439629f1a7c281dcc7e41" kindref="member">neuron_hotkeys</ref><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1ab7d86c29802c834f4f9c56cad016af3d" kindref="member">metagraph</ref>.hotkeys</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1ab7d86c29802c834f4f9c56cad016af3d" kindref="member">metagraph</ref>.sync()</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1ab6519f08ffb439629f1a7c281dcc7e41" kindref="member">neuron_hotkeys</ref><sp/>=<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1ab7d86c29802c834f4f9c56cad016af3d" kindref="member">metagraph</ref>.hotkeys</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>changed_hotkeys<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Reset<sp/>neuron<sp/>stats<sp/>if<sp/>uid<sp/>got<sp/>replaced</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>uid,<sp/>old_hotkey<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>enumerate(old_hotkeys):</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>old_hotkey<sp/>!=<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1ab6519f08ffb439629f1a7c281dcc7e41" kindref="member">neuron_hotkeys</ref>[uid]:</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a492dbde3bfbccb33e13c841d2facf63a" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a21e2ecea44db89dcc12901d6fcba9b4b" kindref="member">config</ref>.neuron.track_hotkey_changes:</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block<sp/>=<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a76ae49a086d19cfab7fe9ff8bdcc872e" kindref="member">subtensor</ref>.block</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a3eac268c9f329cbe846160bc9afe0c0d" kindref="member">neuron_changes</ref>.setdefault(uid,<sp/>{})<sp/><sp/></highlight><highlight class="comment">#<sp/>[uid]<sp/>-&gt;<sp/>dict()<sp/>of<sp/>blocks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a3eac268c9f329cbe846160bc9afe0c0d" kindref="member">neuron_changes</ref>[uid][block]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&apos;new_hotkey&apos;</highlight><highlight class="normal">:<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1ab6519f08ffb439629f1a7c281dcc7e41" kindref="member">neuron_hotkeys</ref>[uid],<sp/></highlight><highlight class="stringliteral">&apos;old_hotkey&apos;</highlight><highlight class="normal">:<sp/>old_hotkey}</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>uid<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a2b0e924da8067e801668a329396f024d" kindref="member">neuron_stats</ref>:</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a3eac268c9f329cbe846160bc9afe0c0d" kindref="member">neuron_changes</ref>[uid][block][</highlight><highlight class="stringliteral">&apos;old_stats&apos;</highlight><highlight class="normal">]<sp/>=<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a2b0e924da8067e801668a329396f024d" kindref="member">neuron_stats</ref>[uid]</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>uid<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a2b0e924da8067e801668a329396f024d" kindref="member">neuron_stats</ref>:</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>del<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a2b0e924da8067e801668a329396f024d" kindref="member">neuron_stats</ref>[uid]</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>changed_hotkeys<sp/>+=<sp/>[uid]</highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len(changed_hotkeys):</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logger.info(f</highlight><highlight class="stringliteral">&quot;Hotkeys<sp/>changed:<sp/>{changed_hotkeys}&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a01d5c0a78884626cf4061e663e75ab3c" kindref="member">save</ref>()<sp/><sp/></highlight><highlight class="comment">#<sp/>save<sp/>neuron_stats,<sp/>neuron_hotkeys,<sp/>and<sp/>neuron_changes<sp/>to<sp/>filesystem</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a43ede3459d2681a5161139214560768d" kindref="member">neuron_stats_update</ref>(self,<sp/>neuron_stats:<sp/>Dict[int,<sp/>Dict[str,<sp/>Any]]):</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&quot;&quot;&quot;<sp/>Updates<sp/>self.neuron_stats<sp/>with<sp/>new<sp/>individual<sp/>dictionaries<sp/>per<sp/>uid.</highlight></codeline>
<codeline lineno="659"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="660"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>responsive_uids<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="661"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>_uid,<sp/>_stats<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>neuron_stats.items():</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stats<sp/>=<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a2b0e924da8067e801668a329396f024d" kindref="member">neuron_stats</ref>.setdefault(_uid,<sp/>{})</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>EMA<sp/>normal<sp/>update<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>If<sp/>synapse<sp/>responsive<sp/>push<sp/>available<sp/>values<sp/>into<sp/>EMA<sp/>for<sp/>normal<sp/>update.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Normal<sp/>EMA<sp/>values<sp/>provide<sp/>a<sp/>view<sp/>on<sp/>neuron<sp/>performance<sp/>if<sp/>fully<sp/>responsive.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>key<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>_stats:<sp/><sp/></highlight><highlight class="comment">#<sp/>detailed<sp/>neuron<sp/>evaluation<sp/>fields,<sp/>e.g.<sp/>loss,<sp/>shapley_values,<sp/>synergy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>math.isnan(_stats[key]):</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>key<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>stats:</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stats[key]<sp/>=<sp/>(1<sp/>-<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a4b160e523e9bf6488640bbc8424c0c9d" kindref="member">alpha</ref>)<sp/>*<sp/>stats[key]<sp/>+<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a4b160e523e9bf6488640bbc8424c0c9d" kindref="member">alpha</ref><sp/>*<sp/>_stats[key]<sp/><sp/></highlight><highlight class="comment">#<sp/>update<sp/>EMA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stats.setdefault(key,<sp/>_stats[key])</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Extra<sp/>stats<sp/>computation<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Compute<sp/>values<sp/>on<sp/>EMA<sp/>stats,<sp/>such<sp/>as<sp/>the<sp/>scaling<sp/>law<sp/>on<sp/>EMA<sp/>loss.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Required<sp/>for<sp/>values<sp/>that<sp/>need<sp/>to<sp/>be<sp/>computed<sp/>on<sp/>longer-term<sp/>stats.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extra_stats<sp/>=<sp/>{}</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;loss_nxt&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>_stats<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;loss_nxt&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>stats:<sp/><sp/></highlight><highlight class="comment">#<sp/>elif<sp/>neuron<sp/>not<sp/>responsive<sp/>then<sp/>omit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>estimate<sp/>the<sp/>effective<sp/>number<sp/>of<sp/>model<sp/>parameters<sp/>from<sp/>EMA<sp/>loss</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_num_params<sp/>=<sp/><ref refid="namespacebittensor_1_1__neuron_1_1text_1_1core__validator_1afbddc9ae968b91105cb4845cdec271d8" kindref="member">scaling_law_loss_to_params</ref>(torch.tensor(stats[</highlight><highlight class="stringliteral">&apos;loss_nxt&apos;</highlight><highlight class="normal">]))</highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>powered<sp/>down<sp/>number<sp/>of<sp/>params,<sp/>e.g.<sp/>dynamic<sp/>range<sp/>3<sp/>→<sp/>6<sp/>nats<sp/>for<sp/>scaling_law_power=0.5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_pow_num_params<sp/>=<sp/>torch.pow(_num_params,<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a492dbde3bfbccb33e13c841d2facf63a" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a21e2ecea44db89dcc12901d6fcba9b4b" kindref="member">config</ref>.nucleus.scaling_law_power)</highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extra_stats.update({</highlight><highlight class="stringliteral">&apos;est_params_nxt&apos;</highlight><highlight class="normal">:<sp/>_num_params.item(),<sp/></highlight><highlight class="stringliteral">&apos;base_params_nxt&apos;</highlight><highlight class="normal">:<sp/>_pow_num_params.item()})</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;synergy_nxt&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>stats:</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extra_stats[</highlight><highlight class="stringliteral">&apos;shapley_values_nxt&apos;</highlight><highlight class="normal">]<sp/>=<sp/>extra_stats[</highlight><highlight class="stringliteral">&apos;base_params_nxt&apos;</highlight><highlight class="normal">]<sp/>+<sp/>stats[</highlight><highlight class="stringliteral">&apos;synergy_nxt&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;logits_excess_nxt&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>stats:</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>penalize<sp/>by<sp/>logits<sp/>divergence<sp/>excess</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extra_stats[</highlight><highlight class="stringliteral">&apos;shapley_values_nxt&apos;</highlight><highlight class="normal">]<sp/>/=<sp/>1<sp/>+<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a492dbde3bfbccb33e13c841d2facf63a" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a21e2ecea44db89dcc12901d6fcba9b4b" kindref="member">config</ref>.nucleus.logits_divergence<sp/>*<sp/>stats[</highlight><highlight class="stringliteral">&apos;logits_excess_nxt&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>EMA<sp/>zeroing<sp/>update<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Push<sp/>zero<sp/>into<sp/>EMA<sp/>for<sp/>synapse_keys<sp/>to<sp/>exponentially<sp/>decay<sp/>weighting<sp/>keys<sp/>if<sp/>neuron<sp/>non-responsive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;updates!&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>stats:</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stats[</highlight><highlight class="stringliteral">&apos;updates!&apos;</highlight><highlight class="normal">]<sp/>+=<sp/>1<sp/><sp/></highlight><highlight class="comment">#<sp/>increment<sp/>number<sp/>of<sp/>EMA<sp/>zeroing<sp/>updates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stats.setdefault(</highlight><highlight class="stringliteral">&apos;updates!&apos;</highlight><highlight class="normal">,<sp/>1)<sp/><sp/></highlight><highlight class="comment">#<sp/>number<sp/>of<sp/>EMA<sp/>zeroing<sp/>updates<sp/>init<sp/>to<sp/>zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>key<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a94cfce86ddc06a1874b1a8f735c59016" kindref="member">synapse_keys</ref>:</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zkey<sp/>=<sp/>key<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;!&apos;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>zeroing<sp/>key</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stats.setdefault(zkey,<sp/>0.)<sp/><sp/></highlight><highlight class="comment">#<sp/>initialize<sp/>zkey<sp/>val<sp/>to<sp/>zero<sp/>to<sp/>gradually<sp/>increase<sp/>with<sp/>observations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>key<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>_stats<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>math.isnan(_stats[key]):</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>responsive_uids<sp/>+=<sp/>[_uid]</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stats[zkey]<sp/>=<sp/>(1<sp/>-<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a4b160e523e9bf6488640bbc8424c0c9d" kindref="member">alpha</ref>)<sp/>*<sp/>stats[zkey]<sp/>+<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a4b160e523e9bf6488640bbc8424c0c9d" kindref="member">alpha</ref><sp/>*<sp/>_stats[key]</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>key<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>extra_stats<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>math.isnan(extra_stats[key]):</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>responsive_uids<sp/>+=<sp/>[_uid]</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stats[zkey]<sp/>=<sp/>(1<sp/>-<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a4b160e523e9bf6488640bbc8424c0c9d" kindref="member">alpha</ref>)<sp/>*<sp/>stats[zkey]<sp/>+<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a4b160e523e9bf6488640bbc8424c0c9d" kindref="member">alpha</ref><sp/>*<sp/>extra_stats[key]</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stats[zkey]<sp/>=<sp/>(1<sp/>-<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a4b160e523e9bf6488640bbc8424c0c9d" kindref="member">alpha</ref>)<sp/>*<sp/>stats[zkey]<sp/><sp/></highlight><highlight class="comment">#<sp/>+<sp/>self.alpha<sp/>*<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>EMA<sp/>normal<sp/>update<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>If<sp/>synapse<sp/>responsive<sp/>push<sp/>available<sp/>values<sp/>into<sp/>EMA<sp/>for<sp/>normal<sp/>update.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Normal<sp/>EMA<sp/>values<sp/>provide<sp/>a<sp/>view<sp/>on<sp/>neuron<sp/>performance<sp/>if<sp/>fully<sp/>responsive.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>key<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a94cfce86ddc06a1874b1a8f735c59016" kindref="member">synapse_keys</ref>:</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>key<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>_stats<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>key<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>extra_stats:</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>updates<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;updates_&apos;</highlight><highlight class="normal"><sp/>+<sp/>key</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>updates<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>stats:</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stats[updates]<sp/>+=<sp/>1<sp/><sp/></highlight><highlight class="comment">#<sp/>increment<sp/>number<sp/>of<sp/>normal<sp/>EMA<sp/>updates<sp/>made</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stats.setdefault(updates,<sp/>1)<sp/><sp/></highlight><highlight class="comment">#<sp/>add<sp/>updates<sp/>fields<sp/>for<sp/>new<sp/>uid<sp/>entries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>key<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>extra_stats:<sp/><sp/></highlight><highlight class="comment">#<sp/>detailed<sp/>neuron<sp/>evaluation<sp/>fields,<sp/>e.g.<sp/>loss,<sp/>shapley_values,<sp/>synergy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>math.isnan(extra_stats[key]):</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>key<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>stats:</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stats[key]<sp/>=<sp/>(1<sp/>-<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a4b160e523e9bf6488640bbc8424c0c9d" kindref="member">alpha</ref>)<sp/>*<sp/>stats[key]<sp/>+<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a4b160e523e9bf6488640bbc8424c0c9d" kindref="member">alpha</ref><sp/>*<sp/>extra_stats[key]<sp/><sp/></highlight><highlight class="comment">#<sp/>update<sp/>EMA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stats.setdefault(key,<sp/>extra_stats[key])</highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>responsive_uids,<sp/>list(neuron_stats.keys())<sp/><sp/></highlight><highlight class="comment">#<sp/>responsive_uids,<sp/>queried_uids</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1ac138043f1e7829700d0271e2989605e1" kindref="member">calculate_weights</ref>(self):</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&quot;&quot;&quot;<sp/>Calculates<sp/>neuron<sp/>set-weights<sp/>from<sp/>weight_key<sp/>mapped<sp/>values.<sp/>Defines<sp/>weight_key<sp/>as<sp/>the<sp/>neuron<sp/>stats<sp/>key</highlight></codeline>
<codeline lineno="737"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>used<sp/>to<sp/>obtain<sp/>the<sp/>mapped<sp/>stat<sp/>value<sp/>(typically<sp/>a<sp/>Shapley<sp/>value)<sp/>that<sp/>the<sp/>final<sp/>set-weights<sp/>are<sp/>calculated<sp/></highlight><highlight class="keyword">from</highlight><highlight class="normal">.</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="739"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="740"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>weight_key<sp/>=<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a5ced5b804c5d9e5ec1ca9be91e4e139f" kindref="member">weight_key</ref><sp/>+<sp/>&apos;!&apos;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>use<sp/>zeroing<sp/>key<sp/>to<sp/>penalize<sp/>non-responsive<sp/>neurons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min_allowed_weights<sp/>=<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a76ae49a086d19cfab7fe9ff8bdcc872e" kindref="member">subtensor</ref>.min_allowed_weights</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_weight_limit<sp/>=<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a76ae49a086d19cfab7fe9ff8bdcc872e" kindref="member">subtensor</ref>.max_weight_limit</highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Populate<sp/>neuron<sp/>weights<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>neuron_weights<sp/>=<sp/>torch.zeros_like(self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1ab7d86c29802c834f4f9c56cad016af3d" kindref="member">metagraph</ref>.S)<sp/><sp/></highlight><highlight class="comment">#<sp/>allow<sp/>unevaluated<sp/>UIDs<sp/>for<sp/>min_allowed_weights</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>uid<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a2b0e924da8067e801668a329396f024d" kindref="member">neuron_stats</ref>:</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>weight_key<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a2b0e924da8067e801668a329396f024d" kindref="member">neuron_stats</ref>[uid]:</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>neuron_weights[uid]<sp/>=<sp/>torch.tensor([self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a2b0e924da8067e801668a329396f024d" kindref="member">neuron_stats</ref>[uid][weight_key]])</highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Filter<sp/>to<sp/>non-zero<sp/>weights<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sample_uids<sp/>=<sp/>torch.argwhere(neuron_weights<sp/>&gt;<sp/>0).squeeze(dim=1)<sp/><sp/></highlight><highlight class="comment">#<sp/>find<sp/>uids<sp/>with<sp/>non-zero<sp/>weight</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sample_weights<sp/>=<sp/>neuron_weights[sample_uids]<sp/><sp/></highlight><highlight class="comment">#<sp/>filter<sp/>to<sp/>non-zero<sp/>weights</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>If<sp/>no<sp/>uids<sp/>responds,<sp/>return<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len(sample_uids)<sp/>==<sp/>0:</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sample_uids,<sp/>sample_weights</highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Exclude<sp/>lowest<sp/>quantile<sp/>from<sp/>weight<sp/>setting<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_exclude<sp/>=<sp/>(len(sample_weights)<sp/>-<sp/>min_allowed_weights)<sp/>/<sp/>len(sample_weights)<sp/><sp/></highlight><highlight class="comment">#<sp/>max<sp/>excludable<sp/>weight<sp/>quantile</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quantile<sp/>=<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a76ae49a086d19cfab7fe9ff8bdcc872e" kindref="member">subtensor</ref>.validator_exclude_quantile<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a492dbde3bfbccb33e13c841d2facf63a" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a21e2ecea44db89dcc12901d6fcba9b4b" kindref="member">config</ref>.neuron.exclude_quantile<sp/>==<sp/>-1<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a492dbde3bfbccb33e13c841d2facf63a" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a21e2ecea44db89dcc12901d6fcba9b4b" kindref="member">config</ref>.neuron.exclude_quantile<sp/></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>0<sp/>&lt;<sp/>max_exclude:</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exclude_quantile<sp/>=<sp/>min([quantile<sp/>,<sp/>max_exclude])<sp/><sp/></highlight><highlight class="comment">#<sp/>reduce<sp/>quantile<sp/>to<sp/>meet<sp/>min_allowed_weights</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lowest_quantile<sp/>=<sp/>sample_weights.quantile(exclude_quantile)<sp/><sp/></highlight><highlight class="comment">#<sp/>find<sp/>lowest<sp/>quantile<sp/>threshold</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sample_uids<sp/>=<sp/>sample_uids[lowest_quantile<sp/>&lt;=<sp/>sample_weights]<sp/><sp/></highlight><highlight class="comment">#<sp/>exclude<sp/>uids<sp/>with<sp/>weights<sp/>below<sp/>quantile</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sample_weights<sp/>=<sp/>sample_weights[lowest_quantile<sp/>&lt;=<sp/>sample_weights]<sp/><sp/></highlight><highlight class="comment">#<sp/>exclude<sp/>weights<sp/>below<sp/>quantile</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logger.info(f</highlight><highlight class="stringliteral">&apos;Exclude<sp/>{exclude_quantile}<sp/>quantile<sp/>({lowest_quantile})<sp/>|<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&apos;{len(sample_weights)}<sp/>Shapley<sp/>values<sp/>|<sp/>min:{sample_weights.min()}<sp/>max:{sample_weights.max()}&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Normalize<sp/>and<sp/>apply<sp/>max_weight_limit<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sample_weights<sp/>=<sp/><ref refid="namespacebittensor_1_1utils_1_1weight__utils_1abeb28e8f4b90d1c39102f9db8f75a86b" kindref="member">bittensor.utils.weight_utils.normalize_max_weight</ref>(x=sample_weights,</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>limit=max_weight_limit)</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logger.info(f</highlight><highlight class="stringliteral">&apos;{len(sample_weights)}<sp/>normalize_max_weight<sp/>|<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&apos;max:{sample_weights.max()}&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sample_uids,<sp/>sample_weights</highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1ac81643b48f83061067bee51b57305460" kindref="member">weights_table</ref>(self,<sp/>sample_uids,<sp/>sample_weights,<sp/>include_uids=None,<sp/>num_rows:<sp/>int<sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&quot;&quot;&quot;<sp/>Prints<sp/>weights<sp/>table<sp/>given<sp/>sample_uids<sp/>and<sp/>sample_weights.</highlight></codeline>
<codeline lineno="781"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="782"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min_allowed_weights<sp/>=<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a76ae49a086d19cfab7fe9ff8bdcc872e" kindref="member">subtensor</ref>.min_allowed_weights</highlight></codeline>
<codeline lineno="783"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_weight_limit<sp/>=<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a76ae49a086d19cfab7fe9ff8bdcc872e" kindref="member">subtensor</ref>.max_weight_limit</highlight></codeline>
<codeline lineno="784"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="785"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Weight<sp/>table<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Prints<sp/>exponential<sp/>moving<sp/>average<sp/>statistics<sp/>of<sp/>valid<sp/>neurons<sp/>and<sp/>latest<sp/>weights</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_neuron_stats<sp/>=<sp/>{}</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uid_weights<sp/>=<sp/>[]<sp/><sp/></highlight><highlight class="comment">#<sp/>(uid,<sp/>weight)<sp/>tuples<sp/>for<sp/>sorting<sp/>to<sp/>find<sp/>top/bottom<sp/>weights</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unvalidated<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>uid,<sp/>weight<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>zip(sample_uids.tolist(),<sp/>sample_weights.tolist()):</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>uid<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a2b0e924da8067e801668a329396f024d" kindref="member">neuron_stats</ref>:</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_neuron_stats[uid]<sp/>=<sp/>{k:<sp/>v<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>k,<sp/>v<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a2b0e924da8067e801668a329396f024d" kindref="member">neuron_stats</ref>[uid].items()}</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_neuron_stats[uid][</highlight><highlight class="stringliteral">&apos;weight&apos;</highlight><highlight class="normal">]<sp/>=<sp/>weight</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uid_weights<sp/>+=<sp/>[(uid,<sp/>weight)]</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unvalidated<sp/>+=<sp/>[uid]</highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>include_uids<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>num_rows<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sorted_uids<sp/>=<sp/>sorted(uid_weights,<sp/>key=</highlight><highlight class="keyword">lambda</highlight><highlight class="normal"><sp/>tup:<sp/>tup[1])</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>top_bottom_uids<sp/>=<sp/>[_uid<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>_uid,<sp/>_<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>sorted_uids[:5]<sp/>+<sp/>sorted_uids[-10:]]</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_include_uids<sp/>=<sp/>set(include_uids)<sp/>|<sp/>set(top_bottom_uids)</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>avail_include_uids<sp/>=<sp/>list(set(_neuron_stats.keys())<sp/>&amp;<sp/>_include_uids)<sp/><sp/></highlight><highlight class="comment">#<sp/>exclude<sp/>include_uids<sp/>with<sp/>no<sp/>stats</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len(_neuron_stats)<sp/>&gt;<sp/>num_rows:<sp/><sp/></highlight><highlight class="comment">#<sp/>limit<sp/>table<sp/>to<sp/>included_uids<sp/>and<sp/>remaining<sp/>sample<sp/>up<sp/>to<sp/>num_rows</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remaining_uids<sp/>=<sp/>set(_neuron_stats.keys())<sp/>-<sp/>_include_uids<sp/><sp/></highlight><highlight class="comment">#<sp/>find<sp/>sample<sp/>remaining,<sp/>loses<sp/>sample<sp/>ordering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remaining_uids<sp/>=<sp/>[uid<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>uid<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>_neuron_stats<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>uid<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>remaining_uids]<sp/><sp/></highlight><highlight class="comment">#<sp/>recover<sp/>sample<sp/>ordering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>limited_uids<sp/>=<sp/>avail_include_uids<sp/>+<sp/>remaining_uids[:num_rows<sp/>-<sp/>len(_include_uids)]</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_neuron_stats<sp/>=<sp/>{uid:<sp/>stats<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>uid,<sp/>stats<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>_neuron_stats.items()<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>uid<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>limited_uids}</highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print()</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacebittensor_1_1__neuron_1_1text_1_1core__validator_1a3b98321f53ed9671d10985f26470e151" kindref="member">stats_table</ref>(_neuron_stats,<sp/></highlight><highlight class="stringliteral">&apos;weight&apos;</highlight><highlight class="normal">,<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a492dbde3bfbccb33e13c841d2facf63a" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1neuron_1a21e2ecea44db89dcc12901d6fcba9b4b" kindref="member">config</ref>.get(</highlight><highlight class="stringliteral">&apos;width&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&apos;[white]<sp/>Neuron<sp/>weights<sp/>[/white]<sp/>|<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>str(self),<sp/><sp/></highlight><highlight class="comment">#<sp/>title</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&apos;Validated<sp/>{min_allowed_weights}/&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&apos;[bold]{len(self.neuron_stats)}[/bold]/{self.metagraph.n}<sp/>(min/[bold]valid[/bold]/total)<sp/>|<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&apos;sum:{sample_weights.sum().item():.2g}<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&apos;[white]<sp/>max:[bold]{sample_weights.max().item():.4g}[/bold]<sp/>/<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&apos;min:[bold]{sample_weights.min().item():.4g}[/bold]<sp/>[/white]<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&apos;\[{max_weight_limit:.4g}<sp/>allowed]&apos;</highlight><highlight class="normal">,<sp/><sp/></highlight><highlight class="comment">#<sp/>caption</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mark_uids=include_uids)</highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight></codeline>
<codeline lineno="821" refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus" kindref="compound">nucleus</ref>(<sp/>torch.nn.Module<sp/>):</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>Nucleus<sp/>class<sp/>which<sp/>holds<sp/>the<sp/>validator<sp/>model.</highlight></codeline>
<codeline lineno="823"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="824"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">__init__(<sp/>self,<sp/>config,<sp/>device,<sp/>subtensor<sp/>):</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>super(nucleus,<sp/>self).__init__()</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a1cfbc24d3abc9e81a32955e341a68877" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a90fe0804eb6b195cd57c619912815173" kindref="member">config</ref><sp/>=<sp/>config</highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a1cfbc24d3abc9e81a32955e341a68877" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a90fe0804eb6b195cd57c619912815173" kindref="member">config</ref>.nucleus.scaling_law_power<sp/>=<sp/>subtensor.scaling_law_power<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a1cfbc24d3abc9e81a32955e341a68877" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a90fe0804eb6b195cd57c619912815173" kindref="member">config</ref>.nucleus.scaling_law_power<sp/>==<sp/>-1<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a1cfbc24d3abc9e81a32955e341a68877" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a90fe0804eb6b195cd57c619912815173" kindref="member">config</ref>.nucleus.scaling_law_power</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a1cfbc24d3abc9e81a32955e341a68877" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a90fe0804eb6b195cd57c619912815173" kindref="member">config</ref>.nucleus.synergy_scaling_law_power<sp/>=<sp/>subtensor.synergy_scaling_law_power<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a1cfbc24d3abc9e81a32955e341a68877" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a90fe0804eb6b195cd57c619912815173" kindref="member">config</ref>.nucleus.synergy_scaling_law_power<sp/>==<sp/>-1<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a1cfbc24d3abc9e81a32955e341a68877" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a90fe0804eb6b195cd57c619912815173" kindref="member">config</ref>.nucleus.synergy_scaling_law_power</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a1cfbc24d3abc9e81a32955e341a68877" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a90fe0804eb6b195cd57c619912815173" kindref="member">config</ref>.nucleus.logits_divergence<sp/>=<sp/>subtensor.logits_divergence<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a1cfbc24d3abc9e81a32955e341a68877" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a90fe0804eb6b195cd57c619912815173" kindref="member">config</ref>.nucleus.logits_divergence<sp/>==<sp/>-1<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a1cfbc24d3abc9e81a32955e341a68877" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a90fe0804eb6b195cd57c619912815173" kindref="member">config</ref>.nucleus.logits_divergence</highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a7fd75379b86f88aded056db210ad6e1f" kindref="member">device</ref><sp/>=<sp/>device</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1afd4057fa45247f8941bf740c7869f798" kindref="member">max_n</ref><sp/>=<sp/>subtensor.max_n</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a099bd4132fd3be35e9adaea9611cdd3c" kindref="member">permute_uids</ref><sp/>=<sp/>[]<sp/><sp/></highlight><highlight class="comment">#<sp/>iterable<sp/>of<sp/>next<sp/>UIDs<sp/>to<sp/>query,<sp/>reset<sp/>to<sp/>permuted<sp/>UIDs<sp/>when<sp/>empty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tokenizer<sp/>=<sp/><ref refid="classbittensor_1_1__tokenizer_1_1tokenizer" kindref="compound">bittensor.tokenizer</ref>()</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a2d618a6b1160da399b6bb726a749cacc" kindref="member">pad_token</ref><sp/>=<sp/><ref refid="classbittensor_1_1__tokenizer_1_1tokenizer" kindref="compound">tokenizer</ref>(tokenizer.pad_token)[</highlight><highlight class="stringliteral">&apos;input_ids&apos;</highlight><highlight class="normal">][0]</highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Token<sp/>embeddings<sp/>project<sp/>int64<sp/>tokens<sp/>onto<sp/>representations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a325560a1ee478657c626d89b72f1e524" kindref="member">token_embedding</ref><sp/>=<sp/>torch.nn.Embedding(<sp/>bittensor.__vocab_size__,<sp/><sp/>bittensor.__network_dim__<sp/>)</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Routing<sp/>encoder,<sp/>projects<sp/>token<sp/>embeddings<sp/>onto<sp/>context<sp/>for<sp/>routing<sp/>inputs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1acb6ce4edf99c1a63dfc9c112ec661278" kindref="member">routing_encoder_layers</ref><sp/>=<sp/>TransformerEncoderLayer(<sp/>bittensor.__network_dim__,<sp/>config.nucleus.nhead,<sp/>config.nucleus.nhid,<sp/>config.nucleus.dropout,<sp/>batch_first=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a3263be5fd9613dd9eff2f521e645ec58" kindref="member">routing_encoder</ref><sp/>=<sp/>TransformerEncoder(<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1acb6ce4edf99c1a63dfc9c112ec661278" kindref="member">routing_encoder_layers</ref>,<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Encoder<sp/>projects<sp/>response<sp/>representations<sp/>onto<sp/>hidden<sp/>units.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1aef63b259e4ab05367b4bab886b76fe71" kindref="member">encoder_layers</ref><sp/>=<sp/>TransformerEncoderLayer(<sp/>bittensor.__network_dim__,<sp/>config.nucleus.nhead,<sp/>config.nucleus.nhid,<sp/>config.nucleus.dropout,<sp/>batch_first=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a528542e3e21bd5c07dae1505b9675b2f" kindref="member">encoder</ref><sp/>=<sp/>TransformerEncoder(<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1aef63b259e4ab05367b4bab886b76fe71" kindref="member">encoder_layers</ref>,<sp/>config.nucleus.nlayers<sp/>)</highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Decoder<sp/>which<sp/>projects<sp/>hidden<sp/>unit<sp/>representations<sp/>on<sp/>to<sp/>the<sp/>token<sp/>dimension.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a6931a1fbd5be09b4f47655f163e487d9" kindref="member">decoder</ref><sp/>=<sp/>torch.nn.Linear(<sp/>bittensor.__network_dim__,<sp/>bittensor.__vocab_size__<sp/>,<sp/>bias=</highlight><highlight class="keyword">False</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Positional<sp/>Encoding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a50ff3f426d7b539c15d80283b7d3b401" kindref="member">local_pos_encoder</ref><sp/>=<sp/><ref refid="classbittensor_1_1__neuron_1_1text_1_1neuron__utilities_1_1_positional_encoding" kindref="compound">PositionalEncoding</ref>(<sp/>bittensor.__network_dim__,<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a1cfbc24d3abc9e81a32955e341a68877" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a90fe0804eb6b195cd57c619912815173" kindref="member">config</ref>.nucleus.dropout<sp/>)</highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Crosss<sp/>entropy<sp/>loss<sp/>for<sp/>NTP.<sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1aefd63dbb70e16d40467d4b08a5878e88" kindref="member">loss_fct</ref><sp/>=<sp/>torch.nn.CrossEntropyLoss()</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>SGMOE<sp/>Gates:<sp/>Instantiating<sp/>the<sp/>gates<sp/>per<sp/>expert.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a2109acc4d7bec3a4a1b0ad495f78cb74" kindref="member">gates</ref><sp/>=<sp/>torch.nn.Linear(<sp/>bittensor.__network_dim__,<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1afd4057fa45247f8941bf740c7869f798" kindref="member">max_n</ref>,<sp/>bias=</highlight><highlight class="keyword">True</highlight><highlight class="normal"><sp/>).to(<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a7fd75379b86f88aded056db210ad6e1f" kindref="member">device</ref><sp/>)</highlight></codeline>
<codeline lineno="861"><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1ad0ee1cea1ee74b6d53de1303e9a8bf96" kindref="member">sigmoid</ref><sp/>=<sp/>torch.nn.Sigmoid()</highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a6c1a2d4dca5591c6a2d3458e76aedc85" kindref="member">reset_weights</ref>()</highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">@classmethod</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">add_args(<sp/>cls,<sp/>parser<sp/>):</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser.add_argument(</highlight><highlight class="stringliteral">&apos;--nucleus.topk&apos;</highlight><highlight class="normal">,<sp/>type=int,<sp/>help=</highlight><highlight class="stringliteral">&apos;the<sp/>number<sp/>of<sp/>peers<sp/>queried<sp/>during<sp/>each<sp/>remote<sp/>forward<sp/>call&apos;</highlight><highlight class="normal">,<sp/>default<sp/>=<sp/>20<sp/>)</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser.add_argument(</highlight><highlight class="stringliteral">&apos;--nucleus.nhid&apos;</highlight><highlight class="normal">,<sp/>type=int,<sp/>help=</highlight><highlight class="stringliteral">&apos;the<sp/>dimension<sp/>of<sp/>the<sp/>feedforward<sp/>network<sp/>model<sp/>in<sp/>nn.TransformerEncoder&apos;</highlight><highlight class="normal">,<sp/>default=200<sp/>)</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser.add_argument(</highlight><highlight class="stringliteral">&apos;--nucleus.nhead&apos;</highlight><highlight class="normal">,<sp/>type=int,<sp/>help=</highlight><highlight class="stringliteral">&apos;the<sp/>number<sp/>of<sp/>heads<sp/>in<sp/>the<sp/>multiheadattention<sp/>models&apos;</highlight><highlight class="normal">,<sp/>default<sp/>=<sp/>2<sp/>)</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser.add_argument(</highlight><highlight class="stringliteral">&apos;--nucleus.nlayers&apos;</highlight><highlight class="normal">,<sp/>type=int,<sp/>help=</highlight><highlight class="stringliteral">&apos;the<sp/>number<sp/>of<sp/>nn.TransformerEncoderLayer<sp/>in<sp/>nn.TransformerEncoder&apos;</highlight><highlight class="normal">,<sp/>default=2<sp/>)</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser.add_argument(</highlight><highlight class="stringliteral">&apos;--nucleus.dropout&apos;</highlight><highlight class="normal">,<sp/>type=float,<sp/>help=</highlight><highlight class="stringliteral">&apos;the<sp/>dropout<sp/>value&apos;</highlight><highlight class="normal">,<sp/>default=0.2)</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser.add_argument(</highlight><highlight class="stringliteral">&apos;--nucleus.importance&apos;</highlight><highlight class="normal">,<sp/>type=float,<sp/>help=</highlight><highlight class="stringliteral">&apos;hyperparameter<sp/>for<sp/>the<sp/>importance<sp/>loss&apos;</highlight><highlight class="normal">,<sp/>default=3)</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser.add_argument(</highlight><highlight class="stringliteral">&apos;--nucleus.noise_multiplier&apos;</highlight><highlight class="normal">,<sp/>type=float,<sp/>help=</highlight><highlight class="stringliteral">&apos;Standard<sp/>deviation<sp/>multipler<sp/>on<sp/>weights&apos;</highlight><highlight class="normal">,<sp/>default=2<sp/>)</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser.add_argument(</highlight><highlight class="stringliteral">&apos;--nucleus.no_dendrite_backward&apos;</highlight><highlight class="normal">,<sp/>action=</highlight><highlight class="stringliteral">&apos;store_true&apos;</highlight><highlight class="normal">,<sp/>help=</highlight><highlight class="stringliteral">&apos;Pass<sp/>backward<sp/>request<sp/>to<sp/>the<sp/>server<sp/>side<sp/>or<sp/>not&apos;</highlight><highlight class="normal">,<sp/>default=</highlight><highlight class="keyword">False</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser.add_argument(</highlight><highlight class="stringliteral">&apos;--nucleus.scaling_law_power&apos;</highlight><highlight class="normal">,<sp/>type=float,<sp/>help=</highlight><highlight class="stringliteral">&apos;Power<sp/>for<sp/>modified<sp/>scaling<sp/>law,<sp/>powered<sp/>down<sp/>to<sp/>improve<sp/>dynamic<sp/>range,<sp/>e.g.<sp/>3<sp/>→<sp/>6<sp/>nats<sp/>for<sp/>0.5.<sp/>(default<sp/>value:<sp/>-1,<sp/>pulling<sp/>from<sp/>subtensor<sp/>directly)&apos;</highlight><highlight class="normal">,<sp/>default=-1)</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser.add_argument(</highlight><highlight class="stringliteral">&apos;--nucleus.synergy_scaling_law_power&apos;</highlight><highlight class="normal">,<sp/>type=float,<sp/>help=</highlight><highlight class="stringliteral">&apos;Power<sp/>for<sp/>synergy<sp/>modified<sp/>scaling<sp/>law,<sp/>powered<sp/>down<sp/>to<sp/>improve<sp/>dynamic<sp/>range,<sp/>e.g.<sp/>3<sp/>→<sp/>6<sp/>nats<sp/>for<sp/>0.5.<sp/>(default<sp/>value:<sp/>-1,<sp/>pulling<sp/>from<sp/>subtensor<sp/>directly)&apos;</highlight><highlight class="normal">,<sp/>default=-1)</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser.add_argument(</highlight><highlight class="stringliteral">&apos;--nucleus.logits_divergence&apos;</highlight><highlight class="normal">,<sp/>type=float,<sp/>help=</highlight><highlight class="stringliteral">&apos;<sp/>the<sp/>divergence<sp/>value<sp/>for<sp/>logit<sp/>anomaly<sp/>detection<sp/>(default<sp/>value:<sp/>-1,<sp/>pulling<sp/>from<sp/>subtensor<sp/>directly)&apos;</highlight><highlight class="normal">,<sp/>default=-1)</highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">@classmethod</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbittensor_1_1__config_1_1config" kindref="compound">config</ref><sp/>(<sp/>cls<sp/>):</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser<sp/>=<sp/>argparse.ArgumentParser()<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cls.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1afd2091dd63458b880907109b78c7912b" kindref="member">add_args</ref>(<sp/>parser<sp/>)</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classbittensor_1_1__config_1_1config" kindref="compound">bittensor.config</ref>(<sp/>parser<sp/>)</highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">@classmethod</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">check_config(<sp/>cls,<sp/>config:<sp/></highlight><highlight class="stringliteral">&apos;bittensor.Config&apos;</highlight><highlight class="normal"><sp/>):</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">pass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a6c1a2d4dca5591c6a2d3458e76aedc85" kindref="member">reset_weights</ref><sp/>(<sp/>self<sp/>):</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&quot;&quot;&quot;<sp/>Resets<sp/>the<sp/>validator<sp/>weights.</highlight></codeline>
<codeline lineno="892"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="893"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Resets<sp/>all<sp/>the<sp/>weights<sp/>using<sp/>xavier<sp/>initialization.<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>torch.nn.init.xavier_uniform_<sp/>(<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a325560a1ee478657c626d89b72f1e524" kindref="member">token_embedding</ref>.weight<sp/>)</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>torch.nn.init.xavier_uniform_<sp/>(<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a6931a1fbd5be09b4f47655f163e487d9" kindref="member">decoder</ref>.weight<sp/>)</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>torch.nn.init.xavier_uniform_(<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a2109acc4d7bec3a4a1b0ad495f78cb74" kindref="member">gates</ref>.weight<sp/>)</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">init_xavier(<sp/>component<sp/>):</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>torch.nn.init.xavier_uniform_(<sp/>component.weight<sp/>)</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">pass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a3263be5fd9613dd9eff2f521e645ec58" kindref="member">routing_encoder</ref>.apply(<sp/>init_xavier<sp/>)</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a528542e3e21bd5c07dae1505b9675b2f" kindref="member">encoder</ref>.apply(<sp/>init_xavier<sp/>)</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>torch.nn.init.xavier_uniform_(<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a2109acc4d7bec3a4a1b0ad495f78cb74" kindref="member">gates</ref>.weight<sp/>)</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a1b795f663d44b83ce4a9db81faa7d371" kindref="member">forward</ref>(</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self,</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputs:<sp/>torch.FloatTensor,</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>metagraph:<sp/></highlight><highlight class="stringliteral">&apos;bittensor.Metagraph&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dendrite:<sp/></highlight><highlight class="stringliteral">&apos;bittensor.Dendrite&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/>):</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="912"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Forward<sp/>validator<sp/></highlight><highlight class="keywordflow">pass</highlight><highlight class="normal">.<sp/>Selects<sp/>endpoints<sp/>to<sp/>query<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>validate,<sp/>calculates<sp/>routing_score<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>Shapley<sp/>values</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>validated<sp/>synapses.</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputs<sp/>(:obj:`torch.FloatTensor`<sp/>of<sp/>shape<sp/>:obj:`(batch_size,<sp/>*-1*)`,<sp/>`required`):<sp/></highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tensor<sp/>inputs<sp/>to<sp/>distribute<sp/>to<sp/>neurons<sp/>using<sp/>query<sp/>context.</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>metagraph<sp/>(<ref refid="classbittensor_1_1__metagraph_1_1metagraph__impl_1_1_metagraph" kindref="compound">bittensor.Metagraph</ref>):</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Metagraph<sp/>object<sp/>used<sp/>to<sp/>query<sp/>network<sp/>information.</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dendrite<sp/>(<ref refid="classbittensor_1_1__dendrite_1_1dendrite__impl_1_1_dendrite" kindref="compound">bittensor.Dendrite</ref>):</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Dendrite<sp/>RPC<sp/>client<sp/>used<sp/>to<sp/>make<sp/>network<sp/>queries.</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns:</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>loss<sp/>(:obj:`torch.FloatTensor`):</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Loss<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>training<sp/>validator<sp/>nucleus<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>dendrite<sp/>backward<sp/>to<sp/>endpoints.</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>neuron_stats<sp/>(:obj:`Dict`,<sp/>`required`):</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Statistics<sp/>per<sp/>endpoint<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>this<sp/>batch.</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="927"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start_time<sp/>=<sp/>time.time()</highlight></codeline>
<codeline lineno="928"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="929"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val_len<sp/>=<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a1cfbc24d3abc9e81a32955e341a68877" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a90fe0804eb6b195cd57c619912815173" kindref="member">config</ref>.neuron.validation_len<sp/><sp/></highlight><highlight class="comment">#<sp/>Number<sp/>of<sp/>tokens<sp/>to<sp/>holdout<sp/>for<sp/>phrase<sp/>validation<sp/>beyond<sp/>sequence<sp/>context</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prune_len<sp/>=<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a1cfbc24d3abc9e81a32955e341a68877" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a90fe0804eb6b195cd57c619912815173" kindref="member">config</ref>.neuron.prune_len<sp/><sp/></highlight><highlight class="comment">#<sp/>Number<sp/>of<sp/>tokens<sp/>to<sp/>prune<sp/>from<sp/>each<sp/>validation<sp/>input<sp/>sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputs<sp/>=<sp/>prune_tokens(inputs.to(self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a7fd75379b86f88aded056db210ad6e1f" kindref="member">device</ref>),<sp/>prune_len=prune_len,<sp/>margin=val_len+3)<sp/><sp/></highlight><highlight class="comment">#<sp/>prune<sp/>input<sp/>sequence<sp/>without<sp/>last<sp/>validation<sp/>tokens<sp/>[batch_size,<sp/>sequence_len]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputs_seq<sp/>=<sp/>inputs[...,<sp/>:-val_len]<sp/><sp/></highlight><highlight class="comment">#<sp/>sequence<sp/>without<sp/>validation<sp/>tokens<sp/>[batch_size,<sp/>sequence_len]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Create<sp/>the<sp/>local<sp/>context<sp/>used<sp/>to<sp/>select<sp/>endpoints<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>The<sp/>context<sp/>tensor<sp/>returns<sp/>a<sp/>hidden<sp/>unit<sp/>representation<sp/>for<sp/>the<sp/>text<sp/>inputs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>this<sp/>context<sp/>can<sp/>be<sp/>used<sp/>as<sp/>input<sp/>to<sp/>the<sp/>gates<sp/>in<sp/>the<sp/>next<sp/>step.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>embedding:<sp/>retrieve<sp/>learned<sp/>representation<sp/>vectors<sp/>for<sp/>input<sp/>vocabulary<sp/>tokens.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>inputs.shape<sp/>=<sp/>[batch_size,<sp/>sequence_len]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>embedding.shape<sp/>=<sp/>[batch_size,<sp/>sequence_len,<sp/>bittensor.__network_dim__]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>embedding<sp/>=<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a325560a1ee478657c626d89b72f1e524" kindref="member">token_embedding</ref>(inputs_seq)<sp/>*<sp/>math.sqrt(bittensor.__network_dim__)</highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Create<sp/>an<sp/>attention<sp/>mask<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>The<sp/>attention<sp/>mask<sp/>will<sp/>mask<sp/>out<sp/>parts<sp/>of<sp/>the<sp/>context</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>This<sp/>prevents<sp/>cheating<sp/>and<sp/>forward-looking<sp/>when<sp/>predicting<sp/>each<sp/>token<sp/>in<sp/>the<sp/>sequence.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>src_mask:<sp/>(torch.FloatTensor)<sp/>attention<sp/>mask<sp/>adds<sp/>-inf<sp/>to<sp/>positions<sp/>not<sp/>allowed<sp/>to<sp/>attend</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>src_mask.shape<sp/>=<sp/>[sequence_len,<sp/>sequence_len]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>src_mask<sp/>=<sp/>torch.triu(torch.ones(embedding.size(1),<sp/>embedding.size(1))<sp/>*<sp/>float(</highlight><highlight class="stringliteral">&apos;-inf&apos;</highlight><highlight class="normal">),<sp/>diagonal=1)</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>src_mask<sp/>=<sp/>src_mask.to(self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a7fd75379b86f88aded056db210ad6e1f" kindref="member">device</ref>)</highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Apply<sp/>the<sp/>positional<sp/>encoding<sp/>to<sp/>help<sp/>select<sp/>endpoints<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>The<sp/>positional<sp/>encoder<sp/>provides<sp/>information<sp/>based<sp/>on<sp/>the<sp/>relative<sp/>postion<sp/>of<sp/>each<sp/>token</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>embedding.shape<sp/>=<sp/>[batch_size,<sp/>sequence_len,<sp/>bittensor.__network_dim__]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>pos_embedding:<sp/>(torch.FloatTensor)<sp/>positional<sp/>encoded<sp/>embedding.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>pos_embedding.shape<sp/>=<sp/>[batch_size,<sp/>sequence_len,<sp/>bittensor.__network_dim__]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos_embedding<sp/>=<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a50ff3f426d7b539c15d80283b7d3b401" kindref="member">local_pos_encoder</ref>(embedding)</highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>routing_context:<sp/>(torch.FloatTensor):<sp/>context<sp/>tensor<sp/>which<sp/>is<sp/>used<sp/>to<sp/>select<sp/>endpoints.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>routing_context.shape<sp/>=<sp/>[<sp/>batch<sp/>size,<sp/>__network_dim__<sp/>]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>routing_context<sp/>=<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a3263be5fd9613dd9eff2f521e645ec58" kindref="member">routing_encoder</ref>(pos_embedding,<sp/>mask=src_mask)</highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Get<sp/>gate<sp/>values<sp/>for<sp/>UIDs.<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>We<sp/>iterate<sp/>over<sp/>each<sp/>of<sp/>the<sp/>network<sp/>UIDs<sp/>and<sp/>compute<sp/>a<sp/>querying<sp/>score<sp/>for<sp/>each</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>using<sp/>the<sp/>gating<sp/>function.<sp/>This<sp/>returns<sp/>a<sp/>score<sp/>per<sp/>endpoint<sp/>per<sp/>example.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>routing_score:<sp/>(torch.FloatTensor):<sp/>score<sp/>per<sp/>example,<sp/>per<sp/>endpoint.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>routing_score.shape<sp/>=<sp/>[metagraph.n]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>The<sp/>gates<sp/>act<sp/>over<sp/>the<sp/>last<sp/>embedding<sp/>of<sp/>the<sp/>routing_context.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>routing_score<sp/>=<sp/>torch.mean(self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1ad0ee1cea1ee74b6d53de1303e9a8bf96" kindref="member">sigmoid</ref>(self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a2109acc4d7bec3a4a1b0ad495f78cb74" kindref="member">gates</ref>(routing_context[:,<sp/>-1,<sp/>:])),<sp/>dim=0)</highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Ensure<sp/>number<sp/>of<sp/>queried<sp/>neurons<sp/>does<sp/>not<sp/>exceed<sp/>metagraph.n</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_endpoints<sp/>=<sp/>min([self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a1cfbc24d3abc9e81a32955e341a68877" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a90fe0804eb6b195cd57c619912815173" kindref="member">config</ref>.nucleus.topk,<sp/>metagraph.n])</highlight></codeline>
<codeline lineno="971"><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Ensure<sp/>each<sp/>UID<sp/>is<sp/>queried<sp/>once<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Persist<sp/>object<sp/>variable<sp/>self.permute_uids<sp/>across<sp/>forward<sp/>calls.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Reset<sp/>to<sp/>new<sp/>permutation<sp/>of<sp/>all<sp/>UIDs<sp/>once<sp/>empty.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len(self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a099bd4132fd3be35e9adaea9611cdd3c" kindref="member">permute_uids</ref>)<sp/>==<sp/>0:<sp/><sp/></highlight><highlight class="comment">#<sp/>no<sp/>more<sp/>UIDs<sp/>to<sp/>query</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a099bd4132fd3be35e9adaea9611cdd3c" kindref="member">permute_uids</ref><sp/>=<sp/>torch.randperm(metagraph.n)<sp/><sp/></highlight><highlight class="comment">#<sp/>reset<sp/>to<sp/>new<sp/>permutation<sp/>of<sp/>all<sp/>UIDs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Randomly<sp/>select<sp/>num_endpoints<sp/>UIDs<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>random_uids<sp/>=<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a099bd4132fd3be35e9adaea9611cdd3c" kindref="member">permute_uids</ref>[:num_endpoints]<sp/><sp/></highlight><highlight class="comment">#<sp/>newest<sp/>selection<sp/>of<sp/>UIDs<sp/>to<sp/>query</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a099bd4132fd3be35e9adaea9611cdd3c" kindref="member">permute_uids</ref><sp/>=<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a099bd4132fd3be35e9adaea9611cdd3c" kindref="member">permute_uids</ref>[num_endpoints:]<sp/><sp/></highlight><highlight class="comment">#<sp/>slice<sp/>out<sp/>remaining<sp/>selection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Get<sp/>endpoint<sp/>information<sp/>for<sp/>the<sp/>selected<sp/>UIDs<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>We<sp/>index<sp/>into<sp/>the<sp/>metagraph&apos;s<sp/>endpoints<sp/>and<sp/>return<sp/>a<sp/>list<sp/>of<sp/>the<sp/>filtered<sp/>set<sp/>of<sp/>endpoints<sp/>we<sp/>wish<sp/>to<sp/>query.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>random_endpoints:<sp/>List[bittensor.endpoints]:<sp/>endpoint<sp/>information<sp/>for<sp/>filtered<sp/>uids.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>len(neurons)<sp/>==<sp/>self.config.nucleus.topk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>random_endpoints<sp/>=<sp/>[metagraph.endpoints[uid]<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>uid<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>random_uids]</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_endpoints<sp/>=<sp/>len(random_endpoints)<sp/><sp/></highlight><highlight class="comment">#<sp/>in<sp/>case<sp/>len(self.permute_uids)<sp/>&lt;<sp/>num_endpoints<sp/>during<sp/>random_uids<sp/>select</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logger.info(f</highlight><highlight class="stringliteral">&apos;Forward<sp/>\t|<sp/>Routing<sp/>forward<sp/>&lt;dim&gt;[{time.time()<sp/>-<sp/>start_time:.3g}s]&lt;/dim&gt;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logger.info(f</highlight><highlight class="stringliteral">&apos;Dendrite<sp/>\t|<sp/>Request<sp/>{num_endpoints}<sp/>x<sp/>{list(inputs_seq.shape)}<sp/>(prune_len={prune_len})&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>request_start_time<sp/>=<sp/>time.time()</highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Define<sp/>which<sp/>synapse<sp/>we<sp/>want<sp/>to<sp/>use<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>The<sp/>synapse<sp/>defines<sp/>the<sp/>task<sp/>we<sp/>are<sp/>sending<sp/>to<sp/>the<sp/>neurons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>synapses:<sp/>List[bittensor.synapse]:<sp/>synapse<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>TODO:<sp/>WORK<sp/>IN<sp/>PROGRESS,<sp/>prototype</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a1cfbc24d3abc9e81a32955e341a68877" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a90fe0804eb6b195cd57c619912815173" kindref="member">config</ref>.neuron.validation_synapse<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;TextCausalLMNext&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>synapses<sp/>=<sp/>[(bittensor.synapse.TextCausalLMNext(),<sp/>textcausallmnext)]</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:<sp/></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>synapses<sp/>=<sp/>[(bittensor.synapse.TextCausalLM(),<sp/>textcausallm)]</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Query<sp/>the<sp/>endpoints<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Makes<sp/>the<sp/>dendrite<sp/>call<sp/>into<sp/>the<sp/>network<sp/>returning<sp/>the<sp/>representations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>for<sp/>each<sp/>of<sp/>the<sp/>endpoints.<sp/>The<sp/>return<sp/>ops<sp/>can<sp/>be<sp/>used<sp/>to<sp/>filter<sp/>weights<sp/>and<sp/>outputs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>query_responses:<sp/>(List[torch.float64]):<sp/>responses<sp/>from<sp/>each<sp/>endpoint.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>query_responses.shape<sp/>=<sp/>self.config.nucleus.topk<sp/>*<sp/>num_synapses<sp/>*<sp/>[batch_size,<sp/>sequence_len,<sp/>synapse_dim]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>return_ops:<sp/>(torch.int64):<sp/>Return<sp/>ops.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>return_ops.shape<sp/>=<sp/>self.config.nucleus.topk<sp/>*<sp/>[num_synapses]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>query_responses,<sp/>return_ops,<sp/>times<sp/>=<sp/>dendrite.text(</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>endpoints=random_endpoints,</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputs=inputs_seq,</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>synapses=[syn<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>syn,<sp/>_<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>synapses],</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeout=bittensor.__blocktime__</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a1cfbc24d3abc9e81a32955e341a68877" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a90fe0804eb6b195cd57c619912815173" kindref="member">config</ref>.nucleus.no_dendrite_backward:</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>query_responses<sp/>=<sp/>[[syn.detach().to(self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a7fd75379b86f88aded056db210ad6e1f" kindref="member">device</ref>)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>syn<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>res]<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>res<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>query_responses]</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_ops<sp/>=<sp/>[ops.detach().to(self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a7fd75379b86f88aded056db210ad6e1f" kindref="member">device</ref>)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>ops<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>return_ops]</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>times<sp/>=<sp/>[t.detach().to(self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a7fd75379b86f88aded056db210ad6e1f" kindref="member">device</ref>)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>t<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>times]</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Send<sp/>responses<sp/>to<sp/>device.<sp/>This<sp/>is<sp/>required<sp/>to<sp/>ensure<sp/>we<sp/>move<sp/>the<sp/>responses</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Onto<sp/>the<sp/>correct<sp/>device.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>responses<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>query_responses:</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>response<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>responses:</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>response.to(self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a7fd75379b86f88aded056db210ad6e1f" kindref="member">device</ref>)</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logger.info(f</highlight><highlight class="stringliteral">&apos;Dendrite<sp/>\t|<sp/>Request<sp/>{num_endpoints}<sp/>x<sp/>{list(inputs_seq.shape)}<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&apos;&lt;dim&gt;[{time.time()<sp/>-<sp/>request_start_time:.3g}s]&lt;/dim&gt;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Prepare<sp/>validation<sp/>parameter<sp/>set<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>console_width<sp/>=<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a1cfbc24d3abc9e81a32955e341a68877" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a90fe0804eb6b195cd57c619912815173" kindref="member">config</ref>.get(</highlight><highlight class="stringliteral">&apos;width&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">)<sp/><sp/></highlight><highlight class="comment">#<sp/>console<sp/>width<sp/>for<sp/>rich<sp/>table<sp/>displays<sp/>of<sp/>synapse<sp/>measures</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>validation_params<sp/>=<sp/>(random_uids,<sp/>query_responses,<sp/>return_ops,<sp/>times,<sp/>routing_score,</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputs,<sp/>val_len,<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1aefd63dbb70e16d40467d4b08a5878e88" kindref="member">loss_fct</ref>,</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a1cfbc24d3abc9e81a32955e341a68877" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a90fe0804eb6b195cd57c619912815173" kindref="member">config</ref>.nucleus.scaling_law_power,<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a1cfbc24d3abc9e81a32955e341a68877" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a90fe0804eb6b195cd57c619912815173" kindref="member">config</ref>.nucleus.synergy_scaling_law_power,</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a1cfbc24d3abc9e81a32955e341a68877" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a90fe0804eb6b195cd57c619912815173" kindref="member">config</ref>.nucleus.logits_divergence,</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>console_width,<sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a1cfbc24d3abc9e81a32955e341a68877" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a90fe0804eb6b195cd57c619912815173" kindref="member">config</ref>.logging.debug<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a1cfbc24d3abc9e81a32955e341a68877" kindref="member">config</ref><ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a90fe0804eb6b195cd57c619912815173" kindref="member">config</ref>.logging.trace)</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>loss<sp/>=<sp/>torch.tensor(0.).to(self.<ref refid="classbittensor_1_1__neuron_1_1text_1_1core__validator_1_1nucleus_1a7fd75379b86f88aded056db210ad6e1f" kindref="member">device</ref>)<sp/><sp/></highlight><highlight class="comment">#<sp/>to<sp/>accumulate<sp/>neuron_loss<sp/>and<sp/>routing_loss<sp/>over<sp/>synapses</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>neuron_stats<sp/>=<sp/>{}<sp/><sp/></highlight><highlight class="comment">#<sp/>to<sp/>gather<sp/>neuron<sp/>synapse<sp/>validation<sp/>measures<sp/>and<sp/>statistics</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Validate<sp/>synapse<sp/>responses<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Iterate<sp/>over<sp/>all<sp/>queried<sp/>synapses<sp/>and<sp/>validate<sp/>responses</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i,<sp/>(synapse,<sp/>validate_func)<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>enumerate(synapses):</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_loss,<sp/>stats<sp/>=<sp/>validate_func(*validation_params,<sp/>synapse=synapse,<sp/>index_s=i)<sp/><sp/></highlight><highlight class="comment">#<sp/>validate<sp/>individual<sp/>synapse</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>loss<sp/>+=<sp/>_loss<sp/><sp/></highlight><highlight class="comment">#<sp/>add<sp/>neuron_loss<sp/>and<sp/>routing_loss</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>_uid,<sp/>_stats<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>stats.items():</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>neuron_stats.setdefault(_uid,<sp/>{})</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>neuron_stats[_uid].update(_stats)<sp/><sp/></highlight><highlight class="comment">#<sp/>gather<sp/>neuron<sp/>synapse<sp/>validation<sp/>measures<sp/>and<sp/>statistics</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>loss,<sp/>neuron_stats</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacebittensor_1_1__neuron_1_1text_1_1core__validator_1afbddc9ae968b91105cb4845cdec271d8" kindref="member">scaling_law_loss_to_params</ref>(loss):</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&quot;&quot;&quot;<sp/>(OpenAI<sp/>scaling<sp/>laws)<sp/>Kaplan,<sp/>Jared,<sp/>et<sp/>al.<sp/>&quot;Scaling<sp/>laws<sp/>for<sp/>neural<sp/>language<sp/>models.&quot;<sp/>arXiv:2001.08361<sp/>(2020)</highlight></codeline>
<codeline lineno="1056"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="1057"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>num_params<sp/>=<sp/>torch.exp(torch.log(torch.tensor(8.8e13).to(loss.device))<sp/>-</highlight></codeline>
<codeline lineno="1058"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>torch.log(torch.clamp(loss,<sp/>1.69))<sp/>/<sp/>0.076)<sp/><sp/></highlight><highlight class="comment">#<sp/>loss<sp/>lower<sp/>bound<sp/>1.69<sp/>is<sp/>entropy<sp/>of<sp/>natural<sp/>text</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>num_params</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacebittensor_1_1__neuron_1_1text_1_1core__validator_1a156659d617f14885b3e5c58286bf0ef5" kindref="member">textcausallm</ref>(uids:<sp/>torch.Tensor,<sp/>query_responses:<sp/>List[List[torch.FloatTensor]],<sp/>return_ops:<sp/>List[torch.LongTensor],</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>times:<sp/>List[torch.FloatTensor],<sp/>routing_score:<sp/>torch.FloatTensor,</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputs:<sp/>torch.FloatTensor,<sp/>validation_len:<sp/>int,<sp/>loss_fct:<sp/>Callable,</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scaling_law_power:<sp/>float,<sp/>synergy_scaling_law_power:<sp/>float,<sp/>logits_divergence_penalty:<sp/>float,</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>console_width:<sp/>int,<sp/>logging,<sp/>synapse:<sp/></highlight><highlight class="stringliteral">&apos;bittensor.TextCausalLM&apos;</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">,<sp/>index_s:<sp/>int<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>-&gt;<sp/>Tuple[torch.FloatTensor,<sp/>Dict]:</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="1069"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Calculate<sp/>Shapley<sp/>values<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>neuron<sp/>response<sp/>validation<sp/>measure<sp/>statistics,<sp/>given<sp/>TextCausalLM<sp/>synapse<sp/>responses.</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uids<sp/>(:obj:`torch.Tensor`,<sp/>`required`):<sp/>[num_neurons]</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Neuron<sp/>UIDs.</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>query_responses<sp/>(:obj:`List[List[torch.FloatTensor]]`,<sp/>`required`):</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>List<sp/>of<sp/>outputs<sp/></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>synapses,<sp/>each<sp/>a<sp/>list<sp/>of<sp/>size<sp/>num_endpoints<sp/>of<sp/>tensors<sp/></highlight><highlight class="keyword">with</highlight><highlight class="normal"><sp/>relevant<sp/>size.<sp/>Non-responses<sp/>are<sp/>zeroes<sp/>of<sp/>relevant</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>synapse<sp/>shape.<sp/>Shape<sp/>num_synapses<sp/>*<sp/>(<sp/>num_endpoints<sp/>*<sp/>(<sp/>-1,<sp/>-1,<sp/>-1<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_ops<sp/>(:obj:`List[torch.LongTensor]`<sp/>of<sp/>shape<sp/>:obj:`[num_endpoints]`,<sp/>`required`):</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Return<sp/>code<sp/>per<sp/>call<sp/>per<sp/>synapse.</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>times<sp/>(:obj:`List<sp/>[torch.FloatTensor]`<sp/>of<sp/>shape<sp/>:obj:`[num_endpoints]`,<sp/>`required`):</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Times<sp/>per<sp/>call<sp/>per<sp/>synapse.</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>routing_score<sp/>(:obj:`torch.FloatTensor`,<sp/>`required`):</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[metagraph.n]<sp/>Predictive<sp/>routing<sp/>score<sp/>per<sp/>endpoint<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>the<sp/>metagraph,<sp/>mean<sp/>over<sp/>the<sp/>batch.</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputs<sp/>(:obj:`torch.FloatTensor`,<sp/>`required`):</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[batch_size,<sp/>sequence_len<sp/>+<sp/>validation_len]<sp/>Token<sp/>batch<sp/>of<sp/>original<sp/>inputs<sp/></highlight><highlight class="keyword">with</highlight><highlight class="normal"><sp/>validation<sp/>tokens.</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>validation_len<sp/>(:obj:`int`,<sp/>`required`):</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Number<sp/>of<sp/>held-out<sp/>phrase<sp/>token<sp/>batch<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>extended<sp/>validation,<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>sent<sp/>to<sp/>neurons.</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>loss_fct<sp/>(:obj:`Callable`,<sp/>`required`):</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CrossEntropy<sp/>loss<sp/>function<sp/>to<sp/>use.</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scaling_law_power<sp/>(:obj:`float`,<sp/>`required`):</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Power<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>modified<sp/>scaling<sp/>law,<sp/>powered<sp/>down<sp/>to<sp/>improve<sp/>dynamic<sp/>range,<sp/>e.g.<sp/>3<sp/>→<sp/>6<sp/>nats<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>0.5.</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>synergy_scaling_law_power<sp/>(:obj:`float`,<sp/>`required`):</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Power<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>synergy<sp/>modified<sp/>scaling<sp/>law,<sp/>powered<sp/>down<sp/>to<sp/>improve<sp/>dynamic<sp/>range,<sp/>e.g.<sp/>3<sp/>→<sp/>6<sp/>nats<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>0.5.</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logits_divergence_penalty<sp/>(:obj:`float`,<sp/>`required`):</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Penalty<sp/>scaling<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>logits<sp/>divergence.</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>console_width<sp/>(:obj:`int`,<sp/>`required`):</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Config<sp/>console<sp/>width<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>table<sp/></highlight><highlight class="keywordflow">print</highlight><highlight class="normal">.</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logging<sp/>(:obj:`bool`,<sp/>`required`):</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Log<sp/>tables<sp/>to<sp/>console.</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>synapse<sp/>(:obj:`<ref refid="classbittensor_1_1__synapse_1_1text__causallm__impl_1_1_text_causal_l_m" kindref="compound">bittensor.TextCausalLM</ref>`,<sp/>`optional`):</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TextCausalLM<sp/>synapse<sp/>object.</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index_s<sp/>(:obj:`int`,<sp/>`optional`):</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Index<sp/>of<sp/>synapse<sp/>to<sp/>extract<sp/>responses.</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns:</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>loss<sp/>(:obj:`torch.FloatTensor`):</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Loss<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>training<sp/>validator<sp/>nucleus<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>dendrite<sp/>backward<sp/>to<sp/>endpoints.</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stats<sp/>(:obj:`Dict`,<sp/>`required`):</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Statistics<sp/>per<sp/>endpoint<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>this<sp/>batch.</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="1109"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1110"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>inputs_seq<sp/>=<sp/>inputs[...,<sp/>:-validation_len]<sp/><sp/></highlight><highlight class="comment">#<sp/>input<sp/>sequence<sp/>without<sp/>last<sp/>token<sp/>[batch_size,<sp/>sequence_len]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/>inputs_val<sp/>=<sp/>inputs[...,<sp/>-validation_len]<sp/><sp/></highlight><highlight class="comment">#<sp/>input<sp/>validation<sp/>with<sp/>next<sp/>token<sp/>[batch_size]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">_base_params(_stats,<sp/>query_response):</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_stats.update({</highlight><highlight class="stringliteral">&apos;logits&apos;</highlight><highlight class="normal">:<sp/>query_response[:,<sp/>:-1,<sp/>:],</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;logits_val&apos;</highlight><highlight class="normal">:<sp/>query_response[:,<sp/>-1:,<sp/>:]})</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"></highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>target,<sp/>_ext<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>[(inputs_seq[:,<sp/>1:],<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">),<sp/>(inputs_val,<sp/></highlight><highlight class="stringliteral">&apos;_val&apos;</highlight><highlight class="normal">)]:</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_loss<sp/>=<sp/>calc_loss_fct(loss_fct,<sp/>_stats[</highlight><highlight class="stringliteral">&apos;logits&apos;</highlight><highlight class="normal"><sp/>+<sp/>_ext],<sp/>target)<sp/><sp/></highlight><highlight class="comment">#<sp/>CausalLM<sp/>loss</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>_loss.isnan()<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>_loss.isinf():</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_loss<sp/>=<sp/>20<sp/><sp/></highlight><highlight class="comment">#<sp/>assign<sp/>large<sp/>loss</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal"></highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>estimate<sp/>the<sp/>effective<sp/>number<sp/>of<sp/>model<sp/>parameters,<sp/>modified<sp/>with<sp/>the<sp/>scaling_law_power</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_num_params<sp/>=<sp/><ref refid="namespacebittensor_1_1__neuron_1_1text_1_1core__validator_1afbddc9ae968b91105cb4845cdec271d8" kindref="member">scaling_law_loss_to_params</ref>(_loss)</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>powered<sp/>down<sp/>number<sp/>of<sp/>params,<sp/>e.g.<sp/>dynamic<sp/>range<sp/>3<sp/>→<sp/>6<sp/>nats<sp/>for<sp/>scaling_law_power=0.5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_pow_num_params<sp/>=<sp/>torch.pow(_num_params,<sp/>scaling_law_power)</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"></highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_stats.update({</highlight><highlight class="stringliteral">&apos;loss&apos;</highlight><highlight class="normal"><sp/>+<sp/>_ext:<sp/>_loss,</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;est_params&apos;</highlight><highlight class="normal"><sp/>+<sp/>_ext:<sp/>_num_params,<sp/></highlight><highlight class="stringliteral">&apos;base_params&apos;</highlight><highlight class="normal"><sp/>+<sp/>_ext:<sp/>_pow_num_params,</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;synergy&apos;</highlight><highlight class="normal"><sp/>+<sp/>_ext:<sp/>0,<sp/></highlight><highlight class="stringliteral">&apos;synergy_loss_diff&apos;</highlight><highlight class="normal"><sp/>+<sp/>_ext:<sp/>0})</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">_synergy(first,<sp/>second,<sp/>target,<sp/>_ext):</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Combined<sp/>logits:<sp/>log<sp/>of<sp/>average<sp/>probabilities<sp/>per<sp/>token<sp/>between<sp/>responses</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>combined_logits<sp/>=<sp/>torch.log((torch.softmax(first[</highlight><highlight class="stringliteral">&apos;logits&apos;</highlight><highlight class="normal"><sp/>+<sp/>_ext],<sp/>dim=-1)<sp/>+</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>torch.softmax(second[</highlight><highlight class="stringliteral">&apos;logits&apos;</highlight><highlight class="normal"><sp/>+<sp/>_ext],<sp/>dim=-1))<sp/>/<sp/>2<sp/>+<sp/>1e-40)</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>measured_loss<sp/>=<sp/>calc_loss_fct(loss_fct,<sp/>combined_logits,<sp/>target)<sp/><sp/></highlight><highlight class="comment">#<sp/>actual<sp/>measured<sp/>loss</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>measured_loss</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"></highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/>shapley_start_time<sp/>=<sp/>time.time()</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"></highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/>loss,<sp/>stats,<sp/>unsuccessful<sp/>=<sp/><ref refid="namespacebittensor_1_1__neuron_1_1text_1_1core__validator_1a826517b0b4f17e635dafcc3076a57a43" kindref="member">shapley_base</ref>(uids,<sp/>query_responses,<sp/>return_ops,<sp/>times,<sp/>routing_score,</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_base_params,<sp/>index_s,<sp/>ext=</highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/>logger.info(f</highlight><highlight class="stringliteral">&apos;{str(synapse)}<sp/>\t|<sp/>Shapley<sp/>base<sp/>values<sp/>(power={scaling_law_power:.1f})<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&apos;&lt;dim&gt;[{time.time()<sp/>-<sp/>shapley_start_time:.3g}s]&lt;/dim&gt;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"></highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/>synergy_start_time<sp/>=<sp/>time.time()</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/>syn_loss_diff<sp/>=<sp/><ref refid="namespacebittensor_1_1__neuron_1_1text_1_1core__validator_1a1bd51d8fbf1d03308c1beb60fd961dd1" kindref="member">shapley_synergy</ref>(stats,<sp/>_synergy,<sp/>ext=</highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">,<sp/>target=inputs_seq[:,<sp/>1:],</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scaling_law_power=synergy_scaling_law_power)</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/>syn_loss_diff_val<sp/>=<sp/><ref refid="namespacebittensor_1_1__neuron_1_1text_1_1core__validator_1a1bd51d8fbf1d03308c1beb60fd961dd1" kindref="member">shapley_synergy</ref>(stats,<sp/>_synergy,<sp/>ext=</highlight><highlight class="stringliteral">&apos;_val&apos;</highlight><highlight class="normal">,<sp/>target=inputs_val,</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scaling_law_power=synergy_scaling_law_power)</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"></highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Shapley<sp/>value<sp/>combination<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Combine<sp/>base<sp/>values<sp/>with<sp/>synergy<sp/>approximation<sp/>to<sp/>get<sp/>final<sp/>Shapley<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>s<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>stats.values():</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>ext<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>[</highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;_val&apos;</highlight><highlight class="normal">]:</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;base_params&apos;</highlight><highlight class="normal"><sp/>+<sp/>ext<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>s<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;synergy&apos;</highlight><highlight class="normal"><sp/>+<sp/>ext<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>s:</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s[</highlight><highlight class="stringliteral">&apos;shapley_values&apos;</highlight><highlight class="normal"><sp/>+<sp/>ext]<sp/>=<sp/>(s[</highlight><highlight class="stringliteral">&apos;base_params&apos;</highlight><highlight class="normal"><sp/>+<sp/>ext]<sp/>+<sp/>s[</highlight><highlight class="stringliteral">&apos;synergy&apos;</highlight><highlight class="normal"><sp/>+<sp/>ext])</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;logits&apos;</highlight><highlight class="normal"><sp/>+<sp/>ext<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>s:</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>del<sp/>s[</highlight><highlight class="stringliteral">&apos;logits&apos;</highlight><highlight class="normal"><sp/>+<sp/>ext]<sp/><sp/></highlight><highlight class="comment">#<sp/>remove<sp/>logits<sp/>-<sp/>not<sp/>needed<sp/>for<sp/>stats<sp/>anymore</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;shapley_values&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>s<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;shapley_values_val&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>s:</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s[</highlight><highlight class="stringliteral">&apos;shapley_values_min&apos;</highlight><highlight class="normal">]<sp/>=<sp/>torch.min(s[</highlight><highlight class="stringliteral">&apos;shapley_values&apos;</highlight><highlight class="normal">],<sp/>s[</highlight><highlight class="stringliteral">&apos;shapley_values_val&apos;</highlight><highlight class="normal">])</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"></highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>key<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>s:</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>hasattr(s[key],<sp/></highlight><highlight class="stringliteral">&apos;item&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s[key]<sp/>=<sp/>s[key].item()</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/>logger.info(f</highlight><highlight class="stringliteral">&apos;{str(synapse)}<sp/>\t|<sp/>Shapley<sp/>synergy<sp/>values<sp/>(power={synergy_scaling_law_power:.1f})<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&apos;&lt;dim&gt;[{time.time()<sp/>-<sp/>synergy_start_time:.3g}s]&lt;/dim&gt;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"></highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>logging:</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Synergy<sp/>table<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Prints<sp/>the<sp/>synergy<sp/>loss<sp/>diff<sp/>matrix<sp/>with<sp/>pairwise<sp/>loss<sp/>reduction<sp/>due<sp/>to<sp/>synergy<sp/>(original<sp/>loss<sp/>on<sp/>diagonal)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacebittensor_1_1__neuron_1_1text_1_1core__validator_1a6fd9748649f8e6a6f82cbbcb48b164a4" kindref="member">synergy_table</ref>(stats,<sp/>syn_loss_diff,<sp/></highlight><highlight class="stringliteral">&apos;shapley_values_min&apos;</highlight><highlight class="normal">,<sp/>console_width=console_width)</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Neuron<sp/>responses<sp/>(table)<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Prints<sp/>the<sp/>evaluation<sp/>of<sp/>the<sp/>neuron<sp/>responses<sp/>to<sp/>the<sp/>validator<sp/>request</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacebittensor_1_1__neuron_1_1text_1_1core__validator_1ac65c768421ed57928ee56b3da28e5cf8" kindref="member">synapse_table</ref>(str(synapse),<sp/>stats,<sp/></highlight><highlight class="stringliteral">&apos;shapley_values_min&apos;</highlight><highlight class="normal">,<sp/>console_width,<sp/>shapley_start_time)</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"></highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Unsuccessful<sp/>responses<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Prints<sp/>the<sp/>return<sp/>codes<sp/>and<sp/>response<sp/>times<sp/>of<sp/>unsuccessful<sp/>responses</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacebittensor_1_1__neuron_1_1text_1_1core__validator_1ab1b9785136040aef8a5a3e0588151ca1" kindref="member">unsuccess</ref>(str(synapse),<sp/>unsuccessful)</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"></highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>loss,<sp/>stats</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"></highlight></codeline>
<codeline lineno="1190"><highlight class="normal"></highlight></codeline>
<codeline lineno="1191"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacebittensor_1_1__neuron_1_1text_1_1core__validator_1ae13e132bc899ab97f56d1243dfdd9628" kindref="member">textcausallmnext</ref>(uids:<sp/>torch.Tensor,<sp/>query_responses:<sp/>List[List[torch.FloatTensor]],<sp/>return_ops:<sp/>List[torch.LongTensor],</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>times:<sp/>List[torch.FloatTensor],<sp/>routing_score:<sp/>torch.FloatTensor,</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputs:<sp/>torch.FloatTensor,<sp/>validation_len:<sp/>int,<sp/>loss_fct:<sp/>Callable,</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scaling_law_power:<sp/>float,<sp/>synergy_scaling_law_power:<sp/>float,<sp/>logits_divergence_penalty:<sp/>float,</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>console_width:<sp/>int,<sp/>logging,<sp/>synapse:<sp/></highlight><highlight class="stringliteral">&apos;bittensor.TextCausalLMNext&apos;</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">,<sp/>index_s:<sp/>int<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>-&gt;<sp/>Tuple[torch.FloatTensor,<sp/>Dict]:</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="1198"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Calculate<sp/>Shapley<sp/>values<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>neuron<sp/>response<sp/>validation<sp/>measure<sp/>statistics,<sp/>given<sp/>TextCausalLMNext<sp/>synapse<sp/>responses.</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uids<sp/>(:obj:`torch.Tensor`,<sp/>`required`):<sp/>[num_neurons]</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Neuron<sp/>UIDs.</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>query_responses<sp/>(:obj:`List[List[torch.FloatTensor]]`,<sp/>`required`):</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>List<sp/>of<sp/>outputs<sp/></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>synapses,<sp/>each<sp/>a<sp/>list<sp/>of<sp/>size<sp/>num_endpoints<sp/>of<sp/>tensors<sp/></highlight><highlight class="keyword">with</highlight><highlight class="normal"><sp/>relevant<sp/>size.<sp/>Non-responses<sp/>are<sp/>zeroes<sp/>of<sp/>relevant</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>synapse<sp/>shape.<sp/>Shape<sp/>num_synapses<sp/>*<sp/>(<sp/>num_endpoints<sp/>*<sp/>(<sp/>-1,<sp/>-1,<sp/>-1<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_ops<sp/>(:obj:`List[torch.LongTensor]`<sp/>of<sp/>shape<sp/>:obj:`[num_endpoints]`,<sp/>`required`):</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Return<sp/>code<sp/>per<sp/>call<sp/>per<sp/>synapse.</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>times<sp/>(:obj:`List<sp/>[torch.FloatTensor]`<sp/>of<sp/>shape<sp/>:obj:`[num_endpoints]`,<sp/>`required`):</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Times<sp/>per<sp/>call<sp/>per<sp/>synapse.</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>routing_score<sp/>(:obj:`torch.FloatTensor`,<sp/>`required`):</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[metagraph.n]<sp/>Predictive<sp/>routing<sp/>score<sp/>per<sp/>endpoint<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>the<sp/>metagraph,<sp/>mean<sp/>over<sp/>the<sp/>batch.</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputs<sp/>(:obj:`torch.FloatTensor`,<sp/>`required`):</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[batch_size,<sp/>sequence_len<sp/>+<sp/>validation_len]<sp/>Token<sp/>batch<sp/>of<sp/>original<sp/>inputs<sp/></highlight><highlight class="keyword">with</highlight><highlight class="normal"><sp/>validation<sp/>tokens.</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>validation_len<sp/>(:obj:`int`,<sp/>`required`):</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Number<sp/>of<sp/>held-out<sp/>phrase<sp/>token<sp/>batch<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>extended<sp/>validation,<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>sent<sp/>to<sp/>neurons.</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>loss_fct<sp/>(:obj:`Callable`,<sp/>`required`):</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CrossEntropy<sp/>loss<sp/>function<sp/>to<sp/>use.</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scaling_law_power<sp/>(:obj:`float`,<sp/>`required`):</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Power<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>modified<sp/>scaling<sp/>law,<sp/>powered<sp/>down<sp/>to<sp/>improve<sp/>dynamic<sp/>range,<sp/>e.g.<sp/>3<sp/>→<sp/>6<sp/>nats<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>0.5.</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>synergy_scaling_law_power<sp/>(:obj:`float`,<sp/>`required`):</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Power<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>synergy<sp/>modified<sp/>scaling<sp/>law,<sp/>powered<sp/>down<sp/>to<sp/>improve<sp/>dynamic<sp/>range,<sp/>e.g.<sp/>3<sp/>→<sp/>6<sp/>nats<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>0.5.</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logits_divergence_penalty<sp/>(:obj:`float`,<sp/>`required`):</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Penalty<sp/>scaling<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>logits<sp/>divergence.</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>console_width<sp/>(:obj:`int`,<sp/>`required`):</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Config<sp/>console<sp/>width<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>table<sp/></highlight><highlight class="keywordflow">print</highlight><highlight class="normal">.</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logging<sp/>(:obj:`bool`,<sp/>`required`):</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Log<sp/>tables<sp/>to<sp/>console.</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>synapse<sp/>(:obj:`<ref refid="classbittensor_1_1__synapse_1_1text__causallmnext__impl_1_1_text_causal_l_m_next" kindref="compound">bittensor.TextCausalLMNext</ref>`,<sp/>`optional`):</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TextCausalLMNext<sp/>Synapse<sp/>object.</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index_s<sp/>(:obj:`int`,<sp/>`optional`):</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Index<sp/>of<sp/>synapse<sp/>to<sp/>extract<sp/>responses.</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"></highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns:</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>loss<sp/>(:obj:`torch.FloatTensor`):</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Loss<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>training<sp/>validator<sp/>nucleus<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>dendrite<sp/>backward<sp/>to<sp/>endpoints.</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stats<sp/>(:obj:`Dict`,<sp/>`required`):</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Statistics<sp/>per<sp/>endpoint<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>this<sp/>batch.</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="1238"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1239"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>inputs_nxt<sp/>=<sp/>inputs[...,<sp/>-validation_len:]<sp/><sp/></highlight><highlight class="comment">#<sp/>input<sp/>validation<sp/>with<sp/>next<sp/>token<sp/>target<sp/>phrase<sp/>[batch_size,<sp/>val_len]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1240"><highlight class="normal"></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">_base_params(_stats,<sp/>query_response):</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>topk_tensor<sp/>=<sp/>unravel_topk_token_phrases(query_response,<sp/>topk=synapse.topk)<sp/><sp/>#<sp/>[batch_size,<sp/>topk<sp/>+<sp/>1,<sp/>max_len]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_losses_val,<sp/>_losses<sp/>=<sp/>phrase_cross_entropy(inputs_nxt,<sp/>query_response,<sp/>reduce=</highlight><highlight class="keyword">False</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_losses_val[_losses_val.isnan()]<sp/>=<sp/>20<sp/><sp/></highlight><highlight class="comment">#<sp/>assign<sp/>large<sp/>loss</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_losses[_losses.isnan()]<sp/>=<sp/>20<sp/><sp/></highlight><highlight class="comment">#<sp/>assign<sp/>large<sp/>loss</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_loss_val<sp/>=<sp/>_losses_val.mean()</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_loss<sp/>=<sp/>_losses.mean()</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"></highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_stats.update({</highlight><highlight class="stringliteral">&apos;loss_val_nxt&apos;</highlight><highlight class="normal">:<sp/>_loss_val,<sp/></highlight><highlight class="stringliteral">&apos;losses_nxt&apos;</highlight><highlight class="normal">:<sp/>_losses,<sp/></highlight><highlight class="stringliteral">&apos;loss_nxt&apos;</highlight><highlight class="normal">:<sp/>_loss,</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;synergy_nxt&apos;</highlight><highlight class="normal">:<sp/>0,<sp/></highlight><highlight class="stringliteral">&apos;synergy_loss_diff_nxt&apos;</highlight><highlight class="normal">:<sp/>0})</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"></highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">_synergy(first,<sp/>second,<sp/>target,<sp/>ext):</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>average<sp/>first<sp/>+<sp/>second<sp/>probabilities<sp/>per<sp/>batch<sp/>item,<sp/>convert<sp/>to<sp/>loss</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>measured_loss<sp/>=<sp/>-torch.log((torch.exp(-first[</highlight><highlight class="stringliteral">&apos;losses_nxt&apos;</highlight><highlight class="normal">])<sp/>+</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>torch.exp(-second[</highlight><highlight class="stringliteral">&apos;losses_nxt&apos;</highlight><highlight class="normal">]))<sp/>/<sp/>2<sp/>+<sp/>1e-40).mean()</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"></highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>measured_loss</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"></highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/>shapley_start_time<sp/>=<sp/>time.time()</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/>loss,<sp/>stats,<sp/>unsuccessful<sp/>=<sp/><ref refid="namespacebittensor_1_1__neuron_1_1text_1_1core__validator_1a826517b0b4f17e635dafcc3076a57a43" kindref="member">shapley_base</ref>(uids,<sp/>query_responses,<sp/>return_ops,<sp/>times,<sp/>routing_score,</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_base_params,<sp/>index_s,<sp/>ext=</highlight><highlight class="stringliteral">&apos;_nxt&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/>logger.info(f</highlight><highlight class="stringliteral">&apos;{str(synapse)}<sp/>\t|<sp/>Shapley<sp/>base<sp/>values<sp/>(power={scaling_law_power:.1f})<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&apos;&lt;dim&gt;[{time.time()<sp/>-<sp/>shapley_start_time:.3g}s]&lt;/dim&gt;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"></highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/>divergence_start_time<sp/>=<sp/>time.time()</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">with</highlight><highlight class="normal"><sp/>torch.no_grad():</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacebittensor_1_1__neuron_1_1text_1_1core__validator_1a3d48b0eacf487ad14a36ef50ef21df07" kindref="member">logits_divergence</ref>(stats,<sp/>uids,<sp/>query_responses,<sp/>return_ops,<sp/>times,<sp/>index_s,<sp/>ext=</highlight><highlight class="stringliteral">&apos;_nxt&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/>logger.info(f</highlight><highlight class="stringliteral">&apos;{str(synapse)}<sp/>\t|<sp/>Logits<sp/>divergences<sp/>(penalty={logits_divergence_penalty})<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&apos;&lt;dim&gt;[{time.time()<sp/>-<sp/>divergence_start_time:.3g}s]&lt;/dim&gt;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"></highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/>synergy_start_time<sp/>=<sp/>time.time()</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/>syn_loss_diff<sp/>=<sp/><ref refid="namespacebittensor_1_1__neuron_1_1text_1_1core__validator_1a1bd51d8fbf1d03308c1beb60fd961dd1" kindref="member">shapley_synergy</ref>(stats,<sp/>_synergy,<sp/></highlight><highlight class="stringliteral">&apos;_nxt&apos;</highlight><highlight class="normal">,<sp/>scaling_law_power=synergy_scaling_law_power)</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/>logger.info(f</highlight><highlight class="stringliteral">&apos;{str(synapse)}<sp/>\t|<sp/>Shapley<sp/>synergy<sp/>values<sp/>(power={synergy_scaling_law_power:.1f})<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&apos;&lt;dim&gt;[{time.time()<sp/>-<sp/>synergy_start_time:.3g}s]&lt;/dim&gt;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"></highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Shapley<sp/>value<sp/>combination<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Combine<sp/>base<sp/>values<sp/>with<sp/>synergy<sp/>approximation<sp/>to<sp/>get<sp/>final<sp/>Shapley<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>s<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>stats.values():</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;losses_nxt&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>s:</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>del<sp/>s[</highlight><highlight class="stringliteral">&apos;losses_nxt&apos;</highlight><highlight class="normal">]<sp/><sp/></highlight><highlight class="comment">#<sp/>remove<sp/>batch<sp/>losses<sp/>-<sp/>not<sp/>needed<sp/>for<sp/>stats<sp/>anymore</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1281"><highlight class="normal"></highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>key<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>s:</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>hasattr(s[key],<sp/></highlight><highlight class="stringliteral">&apos;item&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s[key]<sp/>=<sp/>s[key].item()</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"></highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>logging:</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Response<sp/>table<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Prints<sp/>the<sp/>query<sp/>response<sp/>table:<sp/>top<sp/>prediction<sp/>probabilities<sp/>and<sp/>texts<sp/>for<sp/>batch<sp/>tasks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>batch_predictions<sp/>=<sp/><ref refid="namespacebittensor_1_1__neuron_1_1text_1_1core__validator_1ad73b7e74829f07cd55e096f14a9a39a8" kindref="member">format_predictions</ref>(uids,<sp/>query_responses,<sp/>return_ops,<sp/>inputs,<sp/>validation_len,<sp/>index_s)</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacebittensor_1_1__neuron_1_1text_1_1core__validator_1a0c000ee81cd21336cf103755b8ffbe89" kindref="member">response_table</ref>(batch_predictions,<sp/>stats,<sp/>sort_col=</highlight><highlight class="stringliteral">&apos;loss_nxt&apos;</highlight><highlight class="normal">,<sp/>console_width=console_width)</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"></highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Synergy<sp/>table<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Prints<sp/>the<sp/>synergy<sp/>loss<sp/>diff<sp/>matrix<sp/>with<sp/>pairwise<sp/>loss<sp/>reduction<sp/>due<sp/>to<sp/>synergy<sp/>(original<sp/>loss<sp/>on<sp/>diagonal)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacebittensor_1_1__neuron_1_1text_1_1core__validator_1a6fd9748649f8e6a6f82cbbcb48b164a4" kindref="member">synergy_table</ref>(stats,<sp/>syn_loss_diff,<sp/></highlight><highlight class="stringliteral">&apos;loss_nxt&apos;</highlight><highlight class="normal">,<sp/>console_width)</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Neuron<sp/>responses<sp/>(table)<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Prints<sp/>the<sp/>evaluation<sp/>of<sp/>the<sp/>neuron<sp/>responses<sp/>to<sp/>the<sp/>validator<sp/>request</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacebittensor_1_1__neuron_1_1text_1_1core__validator_1ac65c768421ed57928ee56b3da28e5cf8" kindref="member">synapse_table</ref>(str(synapse),<sp/>stats,<sp/></highlight><highlight class="stringliteral">&apos;loss_nxt&apos;</highlight><highlight class="normal">,<sp/>console_width,<sp/>shapley_start_time)</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"></highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Unsuccessful<sp/>responses<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Prints<sp/>the<sp/>return<sp/>codes<sp/>and<sp/>response<sp/>times<sp/>of<sp/>unsuccessful<sp/>responses</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacebittensor_1_1__neuron_1_1text_1_1core__validator_1ab1b9785136040aef8a5a3e0588151ca1" kindref="member">unsuccess</ref>(str(synapse),<sp/>unsuccessful)</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"></highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>loss,<sp/>stats</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"></highlight></codeline>
<codeline lineno="1306"><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacebittensor_1_1__neuron_1_1text_1_1core__validator_1a826517b0b4f17e635dafcc3076a57a43" kindref="member">shapley_base</ref>(uids:<sp/>torch.Tensor,<sp/>query_responses:<sp/>List[List[torch.FloatTensor]],<sp/>return_ops:<sp/>List[torch.LongTensor],</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>times:<sp/>List[torch.FloatTensor],<sp/>routing_score:<sp/>torch.FloatTensor,</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base_params:<sp/>Callable,<sp/>index_s:<sp/>int<sp/>=<sp/>0,<sp/>ext:<sp/>str<sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">)<sp/>-&gt;<sp/>Tuple[Union[float,<sp/>torch.FloatTensor],</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Dict,</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>List]:</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="1313"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Calculate<sp/>Shapley<sp/>base<sp/>values<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>neuron<sp/>response<sp/>validation<sp/>measure<sp/>statistics,<sp/>given<sp/>responses<sp/></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>a<sp/>synapse.</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uids<sp/>(:obj:`torch.Tensor`,<sp/>`required`):<sp/>[num_neurons]</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Neuron<sp/>UIDs.</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>query_responses<sp/>(:obj:`List[List[torch.FloatTensor]]`,<sp/>`required`):</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>List<sp/>of<sp/>outputs<sp/></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>synapses,<sp/>each<sp/>a<sp/>list<sp/>of<sp/>size<sp/>num_endpoints<sp/>of<sp/>tensors<sp/></highlight><highlight class="keyword">with</highlight><highlight class="normal"><sp/>relevant<sp/>size.<sp/>Non-responses<sp/>are<sp/>zeroes<sp/>of<sp/>relevant</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>synapse<sp/>shape.<sp/>Shape<sp/>num_synapses<sp/>*<sp/>(<sp/>num_endpoints<sp/>*<sp/>(<sp/>-1,<sp/>-1,<sp/>-1<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_ops<sp/>(:obj:`List[torch.LongTensor]`<sp/>of<sp/>shape<sp/>:obj:`[num_endpoints]`,<sp/>`required`):</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Return<sp/>code<sp/>per<sp/>call<sp/>per<sp/>synapse.</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>times<sp/>(:obj:`List<sp/>[torch.FloatTensor]`<sp/>of<sp/>shape<sp/>:obj:`[num_endpoints]`,<sp/>`required`):</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Times<sp/>per<sp/>call<sp/>per<sp/>synapse.</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>routing_score<sp/>(:obj:`torch.FloatTensor`,<sp/>`required`):</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[metagraph.n]<sp/>Predictive<sp/>routing<sp/>score<sp/>per<sp/>endpoint<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>the<sp/>metagraph,<sp/>mean<sp/>over<sp/>the<sp/>batch.</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base_params<sp/>(:obj:`Callable`,<sp/>`required`):</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CrossEntropy<sp/>loss<sp/>function<sp/>to<sp/>use.</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index_s<sp/>(:obj:`int`,<sp/>`optional`):</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Index<sp/>of<sp/>synapse<sp/>to<sp/>extract<sp/>responses.</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ext<sp/>(:obj:`str`,<sp/>`optional`):</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Extension<sp/>to<sp/>parameter<sp/>string<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>stats<sp/>key.</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"></highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns:</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>loss<sp/>(:obj:`torch.FloatTensor`):</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Loss<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>training<sp/>validator<sp/>nucleus<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>dendrite<sp/>backward<sp/>to<sp/>endpoints.</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stats<sp/>(:obj:`Dict`,<sp/>`required`):</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Statistics<sp/>per<sp/>endpoint<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>this<sp/>batch.</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unsuccessful<sp/>(:obj:`List`,<sp/>`required`):</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Unsuccessful<sp/>endpoints<sp/>[(uid,<sp/>return_op,<sp/>time)].</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="1341"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>stats<sp/>=<sp/>{}</highlight></codeline>
<codeline lineno="1342"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>unsuccessful<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="1343"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>neuron_loss<sp/>=<sp/>0.<sp/><sp/></highlight><highlight class="comment">#<sp/>neuron<sp/>losses<sp/>to<sp/>accumulate<sp/>to<sp/>then<sp/>backward()<sp/>via<sp/>dendrite</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/>routing_loss<sp/>=<sp/>0.<sp/><sp/></highlight><highlight class="comment">#<sp/>validator<sp/>routing<sp/>loss<sp/>for<sp/>local<sp/>model<sp/>update</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1345"><highlight class="normal"></highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Base<sp/>parameter<sp/>estimation<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Shapley<sp/>values<sp/>-<sp/>base<sp/>level<sp/>-<sp/>coalition<sp/>size<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Collect<sp/>successful<sp/>neuron<sp/>responses,<sp/>calculate<sp/>base<sp/>Shapley<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Measured<sp/>in<sp/>effective<sp/>number<sp/>of<sp/>model<sp/>parameters,<sp/>according<sp/>to<sp/>OpenAI<sp/>scaling<sp/>laws.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>index,<sp/>_uid<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>enumerate(uids.tolist()):</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>return_ops[index][index_s]<sp/>==<sp/>bittensor.proto.ReturnCode.Success:</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_stats<sp/>=<sp/>{</highlight><highlight class="stringliteral">&apos;uid&apos;</highlight><highlight class="normal">:<sp/>_uid,</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;response_time&apos;</highlight><highlight class="normal"><sp/>+<sp/>ext:<sp/>times[index][index_s],</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;routing_score&apos;</highlight><highlight class="normal">:<sp/>routing_score[_uid]}</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"></highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base_params(_stats,<sp/>query_responses[index][index_s])</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"></highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>neuron_loss<sp/>+=<sp/>_stats[</highlight><highlight class="stringliteral">&apos;loss&apos;</highlight><highlight class="normal"><sp/>+<sp/>ext]<sp/><sp/></highlight><highlight class="comment">#<sp/>add<sp/>sequence<sp/>loss<sp/>to<sp/>be<sp/>backward()<sp/>to<sp/>neuron</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1360"><highlight class="normal"></highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Add<sp/>routing<sp/>loss<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>MSE<sp/>loss<sp/>between<sp/>predicted<sp/>routing<sp/>score<sp/>and<sp/>ideal<sp/>target<sp/>routing<sp/>score.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>The<sp/>Bayes<sp/>risk<sp/>approx.<sp/>1.69,<sp/>i.e.<sp/>the<sp/>minimal<sp/>loss<sp/>achievable<sp/>for<sp/>next-token</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>prediction<sp/>on<sp/>the<sp/>full<sp/>distribution<sp/>𝑃,<sp/>a.k.a<sp/>the<sp/>&quot;entropy<sp/>of<sp/>natural<sp/>text&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Hoffmann,<sp/>Jordan,<sp/>et<sp/>al.<sp/>&quot;Training<sp/>Compute-Optimal<sp/>Large<sp/>Language<sp/>Models.&quot;<sp/>arXiv:2203.15556<sp/>(2022).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>routing_score_target<sp/>=<sp/>torch.exp(-torch.clamp(_stats[</highlight><highlight class="stringliteral">&apos;loss&apos;</highlight><highlight class="normal"><sp/>+<sp/>ext].detach()<sp/>-<sp/>1.69,<sp/>0))</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_routing_loss<sp/>=<sp/>(routing_score[_uid]<sp/>-<sp/>routing_score_target)<sp/>**<sp/>2<sp/><sp/></highlight><highlight class="comment">#<sp/>MSE<sp/>loss</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>routing_loss<sp/>+=<sp/>_routing_loss</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_stats.update({</highlight><highlight class="stringliteral">&apos;routing_score_target&apos;</highlight><highlight class="normal"><sp/>+<sp/>ext:<sp/>routing_score_target,<sp/></highlight><highlight class="stringliteral">&apos;routing_loss&apos;</highlight><highlight class="normal"><sp/>+<sp/>ext:<sp/>_routing_loss})</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"></highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stats[_uid]<sp/>=<sp/>_stats</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>Exception<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>e:</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logger.warning(f</highlight><highlight class="stringliteral">&apos;Synapse<sp/>{index_s}<sp/>error<sp/>(shapley_base)\t|<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&apos;UID<sp/>{_uid}<sp/>&lt;dim&gt;[{times[index][index_s]:.2f}s]&lt;/dim&gt;:<sp/>{e}&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stats[_uid]<sp/>=<sp/>_stats</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unsuccessful<sp/>+=<sp/>[(_uid,<sp/>return_ops[index][index_s],<sp/>times[index][index_s])]</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stats[_uid]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&apos;uid&apos;</highlight><highlight class="normal">:<sp/>_uid,</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;response_time&apos;</highlight><highlight class="normal"><sp/>+<sp/>ext:<sp/>times[index][index_s],</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;routing_score&apos;</highlight><highlight class="normal">:<sp/>routing_score[_uid]}</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unsuccessful<sp/>+=<sp/>[(_uid,<sp/>return_ops[index][index_s],<sp/>times[index][index_s])]</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"></highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>neuron_loss<sp/>+<sp/>routing_loss,<sp/>stats,<sp/>unsuccessful</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"></highlight></codeline>
<codeline lineno="1385"><highlight class="normal"></highlight></codeline>
<codeline lineno="1386"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacebittensor_1_1__neuron_1_1text_1_1core__validator_1a3d48b0eacf487ad14a36ef50ef21df07" kindref="member">logits_divergence</ref>(stats:<sp/>Dict,<sp/>uids:<sp/>torch.Tensor,<sp/>query_responses:<sp/>List[List[torch.FloatTensor]],</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_ops:<sp/>List[torch.LongTensor],<sp/>times:<sp/>List[torch.FloatTensor],</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index_s:<sp/>int<sp/>=<sp/>0,<sp/>ext:<sp/>str<sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="1390"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Calculate<sp/>each<sp/>logits<sp/>divergence<sp/>per<sp/>neuron<sp/>per<sp/>task<sp/></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>the<sp/>average<sp/>logits<sp/>over<sp/>all<sp/>neurons<sp/>per<sp/>task,</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/>given<sp/>responses<sp/></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>a<sp/>synapse.</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stats<sp/>(:obj:`Dict`,<sp/>`required`):</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Statistics<sp/>per<sp/>endpoint<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>this<sp/>batch.</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uids<sp/>(:obj:`torch.Tensor`,<sp/>`required`):<sp/>[num_neurons]</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Neuron<sp/>UIDs.</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>query_responses<sp/>(:obj:`List[List[torch.FloatTensor]]`,<sp/>`required`):</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>List<sp/>of<sp/>outputs<sp/></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>synapses,<sp/>each<sp/>a<sp/>list<sp/>of<sp/>size<sp/>num_endpoints<sp/>of<sp/>tensors<sp/></highlight><highlight class="keyword">with</highlight><highlight class="normal"><sp/>relevant<sp/>size.</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Non-responses<sp/>are<sp/>zeroes<sp/>of<sp/>relevant<sp/>synapse<sp/>shape.</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Shape<sp/>num_synapses<sp/>*<sp/>(<sp/>num_endpoints<sp/>*<sp/>(<sp/>-1,<sp/>-1,<sp/>-1<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_ops<sp/>(:obj:`List[torch.LongTensor]`<sp/>of<sp/>shape<sp/>:obj:`[num_endpoints]`,<sp/>`required`):</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Return<sp/>code<sp/>per<sp/>call<sp/>per<sp/>synapse.</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>times<sp/>(:obj:`List<sp/>[torch.FloatTensor]`<sp/>of<sp/>shape<sp/>:obj:`[num_endpoints]`,<sp/>`required`):</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Times<sp/>per<sp/>call<sp/>per<sp/>synapse.</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index_s<sp/>(:obj:`int`,<sp/>`optional`):</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Index<sp/>of<sp/>synapse<sp/>to<sp/>extract<sp/>responses.</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ext<sp/>(:obj:`str`,<sp/>`optional`):</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Extension<sp/>to<sp/>parameter<sp/>string<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>stats<sp/>key.</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="1410"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>probs_k<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="1411"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>probs_avg<sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1412"><highlight class="normal"></highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Probs<sp/>averaging<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Calculate<sp/>the<sp/>average<sp/>token<sp/>distribution<sp/>for<sp/>each<sp/>batch<sp/>task.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>index,<sp/>_uid<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>enumerate(uids.tolist()):</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>return_ops[index][index_s]<sp/>==<sp/>bittensor.proto.ReturnCode.Success:</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>probs<sp/>=<sp/>topk_tokens_to_vocab_size(query_responses[index][index_s],</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bittensor.__vocab_size__)<sp/><sp/></highlight><highlight class="comment">#<sp/>[batch_size,<sp/>vocab_size]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>probs_avg<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>probs_avg<sp/>=<sp/>probs</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>probs_avg<sp/>+=<sp/>probs</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>probs_k<sp/>+=<sp/>1</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"></highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>Exception<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>e:</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logger.warning(f</highlight><highlight class="stringliteral">&apos;Synapse<sp/>{index_s}<sp/>error<sp/>(logits_divergence)\t|<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&apos;UID<sp/>{_uid}<sp/>&lt;dim&gt;[{times[index][index_s]:.2f}s]&lt;/dim&gt;:<sp/>{e}&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"></highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>probs_avg<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>probs_avg<sp/>/=<sp/>probs_k</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>probs_avg_sqrt<sp/>=<sp/>probs_avg.sqrt()</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>batch_divergences<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"></highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Distribution<sp/>divergence<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Calculate<sp/>the<sp/>Hellinger<sp/>distance<sp/>(f-divergence)<sp/>from<sp/>the<sp/>average<sp/>probability<sp/>distribution<sp/>for<sp/>each<sp/>batch<sp/>task.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>index,<sp/>_uid<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>enumerate(uids.tolist()):</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>return_ops[index][index_s]<sp/>==<sp/>bittensor.proto.ReturnCode.Success:</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>probs<sp/>=<sp/>topk_tokens_to_vocab_size(query_responses[index][index_s],</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bittensor.__vocab_size__)<sp/><sp/></highlight><highlight class="comment">#<sp/>[batch_size,<sp/>vocab_size]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>divergences<sp/>=<sp/>0.5<sp/>*<sp/>torch.pow(probs.sqrt()<sp/>-<sp/>probs_avg_sqrt,<sp/>2).sum(dim=1)<sp/><sp/></highlight><highlight class="comment">#<sp/>[batch_size]<sp/>in<sp/>[0,<sp/>1]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>divergences<sp/>=<sp/>divergences.sqrt()</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stats[_uid][</highlight><highlight class="stringliteral">&apos;logits_divergences&apos;</highlight><highlight class="normal"><sp/>+<sp/>ext]<sp/>=<sp/>divergences<sp/><sp/></highlight><highlight class="comment">#<sp/>[batch_size]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stats[_uid][</highlight><highlight class="stringliteral">&apos;logits_divergence&apos;</highlight><highlight class="normal"><sp/>+<sp/>ext]<sp/>=<sp/>divergences.mean()<sp/><sp/></highlight><highlight class="comment">#<sp/>scalar</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>batch_divergences<sp/>+=<sp/>[divergences]</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"></highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>Exception<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>e:</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logger.warning(f</highlight><highlight class="stringliteral">&apos;Synapse<sp/>{index_s}<sp/>error<sp/>(logits_divergence)\t|<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&apos;UID<sp/>{_uid}<sp/>&lt;dim&gt;[{times[index][index_s]:.2f}s]&lt;/dim&gt;:<sp/>{e}&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"></highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>batch_divergences<sp/>=<sp/>torch.stack(batch_divergences)<sp/><sp/></highlight><highlight class="comment">#<sp/>[uids_len,<sp/>batch_size]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>avg<sp/>=<sp/>batch_divergences.mean(dim=0)<sp/><sp/></highlight><highlight class="comment">#<sp/>[batch_size]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std<sp/>=<sp/>batch_divergences.std(dim=0)<sp/><sp/></highlight><highlight class="comment">#<sp/>[batch_size]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1455"><highlight class="normal"></highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>logger.info(f&quot;Logits<sp/>divergences:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f&quot;avg={&apos;,<sp/>&apos;.join([f&apos;{i}:{v:.3g}&apos;<sp/>for<sp/>i,<sp/>v<sp/>in<sp/>enumerate(avg)])}&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>logger.info(f&quot;std={&apos;,<sp/>&apos;.join([f&apos;{i}:{v:.3g}&apos;<sp/>for<sp/>i,<sp/>v<sp/>in<sp/>enumerate(std)])}&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1459"><highlight class="normal"></highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Calculate<sp/>divergence<sp/>excess<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>For<sp/>each<sp/>batch<sp/>task,<sp/>calculate<sp/>excess<sp/>deviation<sp/>above<sp/>a<sp/>single<sp/>stddev,<sp/>in<sp/>terms<sp/>of<sp/>stddev,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>and<sp/>apply<sp/>power<sp/>to<sp/>increase<sp/>score<sp/>above<sp/>two<sp/>stddev,<sp/>and<sp/>decrease<sp/>between<sp/>one<sp/>and<sp/>two<sp/>stddev.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>This<sp/>will<sp/>effectively<sp/>allow<sp/>zero<sp/>excess<sp/>below<sp/>one<sp/>stddev,<sp/>and<sp/>minimal<sp/>excess<sp/>below<sp/>two<sp/>stddev,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>but<sp/>amplify<sp/>any<sp/>excess<sp/>above<sp/>two<sp/>stddev<sp/>(only<sp/>2.1%<sp/>of<sp/>population<sp/>for<sp/>normal<sp/>dist).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>_uid,<sp/>_stats<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>stats.items():</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;logits_divergences&apos;</highlight><highlight class="normal"><sp/>+<sp/>ext<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>_stats:</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>excess<sp/>=<sp/>torch.clamp(_stats[</highlight><highlight class="stringliteral">&apos;logits_divergences&apos;</highlight><highlight class="normal"><sp/>+<sp/>ext]<sp/>-<sp/>(avg<sp/>+<sp/>std),<sp/>0)<sp/><sp/></highlight><highlight class="comment">#<sp/>divergence<sp/>&gt;<sp/>avg<sp/>+<sp/>std</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>excess<sp/>/=<sp/>std<sp/>+<sp/>1e-9<sp/><sp/></highlight><highlight class="comment">#<sp/>stddev<sp/>multiples<sp/>above<sp/>1<sp/>stddev</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>excess<sp/>=<sp/>torch.pow(excess,<sp/>3)<sp/><sp/></highlight><highlight class="comment">#<sp/>reduce<sp/>&lt;<sp/>2std,<sp/>increase<sp/>&gt;<sp/>2std</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>excess<sp/>=<sp/>torch.clamp(excess,<sp/>0,<sp/>10)<sp/><sp/></highlight><highlight class="comment">#<sp/>maximum<sp/>excess<sp/>ratio<sp/>of<sp/>10</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1472"><highlight class="normal"></highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_stats[</highlight><highlight class="stringliteral">&apos;logits_excess&apos;</highlight><highlight class="normal"><sp/>+<sp/>ext]<sp/>=<sp/>excess.mean()<sp/><sp/></highlight><highlight class="comment">#<sp/>in<sp/>[0,<sp/>10]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>del<sp/>_stats[</highlight><highlight class="stringliteral">&apos;logits_divergences&apos;</highlight><highlight class="normal"><sp/>+<sp/>ext]<sp/><sp/></highlight><highlight class="comment">#<sp/>keep<sp/>only<sp/>scalar<sp/>stats<sp/>beyond<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1475"><highlight class="normal"></highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>logger.info(f&quot;UID{uid}<sp/>divergences<sp/>[{_stats[&apos;logits_divergences&apos;<sp/>+<sp/>ext].mean():.4g}]:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f&quot;{&apos;,<sp/>&apos;.join([f&apos;{i}:{dist:.3g}&apos;<sp/>for<sp/>i,<sp/>dist<sp/>in<sp/>enumerate(_stats[&apos;logits_divergences&apos;<sp/>+<sp/>ext])])}&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>logger.info(f&quot;UID{uid}<sp/>excess<sp/>[{excess.mean():.3g}]:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f&quot;{&apos;,<sp/>&apos;.join([f&apos;{i}:{exc:.3g}&apos;<sp/>for<sp/>i,<sp/>exc<sp/>in<sp/>enumerate(excess)])}&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1480"><highlight class="normal"></highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>Exception<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>e:</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logger.warning(f</highlight><highlight class="stringliteral">&apos;Synapse<sp/>{index_s}<sp/>error<sp/>(logits_divergence)\t|<sp/>UID<sp/>{_uid}:<sp/>{e}&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"></highlight></codeline>
<codeline lineno="1484"><highlight class="normal"></highlight></codeline>
<codeline lineno="1485"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacebittensor_1_1__neuron_1_1text_1_1core__validator_1a1bd51d8fbf1d03308c1beb60fd961dd1" kindref="member">shapley_synergy</ref>(stats:<sp/>Dict,<sp/>synergy:<sp/>Callable,<sp/>ext:<sp/>str,<sp/>target:<sp/>torch.Tensor<sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">,<sp/>scaling_law_power:<sp/>float<sp/>=<sp/>0.5):</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="1487"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Calculates<sp/>Shapley<sp/>synergy<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>coalition<sp/>size<sp/>2,<sp/>measured<sp/>performance<sp/>above<sp/>expected<sp/>performance.</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/>Measured<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>effective<sp/>number<sp/>of<sp/>model<sp/>parameters,<sp/>just<sp/>like<sp/>base<sp/>Shapley<sp/>values.</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stats<sp/>(:obj:`Dict`,<sp/>`required`):</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Statistics<sp/>per<sp/>endpoint<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>this<sp/>batch.</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>synergy<sp/>(:obj:`Callable`,<sp/>`required`)</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function<sp/>to<sp/>calculate<sp/>measured<sp/>loss.</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ext<sp/>(:obj:`str`,<sp/>`optional`):</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Extension<sp/>to<sp/>parameter<sp/>string<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>stats<sp/>key.</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target<sp/>(:obj:`torch.Tensor`,<sp/>`optional`):</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Target<sp/>to<sp/>measure<sp/>loss<sp/>against.</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scaling_law_power<sp/>(:obj:`float`,<sp/>`optional`):</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Power<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>modified<sp/>scaling<sp/>law,<sp/>powered<sp/>down<sp/>to<sp/>improve<sp/>dynamic<sp/>range,<sp/>e.g.<sp/>3<sp/>→<sp/>6<sp/>nats<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>0.5.</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"></highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns:</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>syn_loss_diff<sp/>(:obj:`Dict`,<sp/>`required`):</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Dictionary<sp/>table<sp/>of<sp/>pairwise<sp/>synergies<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>loss<sp/>reductions,<sp/></highlight><highlight class="keyword">with</highlight><highlight class="normal"><sp/>direct<sp/>loss<sp/>on<sp/>diagonal.</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="1505"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Shapley<sp/>synergy<sp/>approximation<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Shapley<sp/>values<sp/>-<sp/>second<sp/>level<sp/>-<sp/>coalition<sp/>size<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Synergy<sp/>=<sp/>measured<sp/>performance<sp/>above<sp/>expected<sp/>performance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Measured<sp/>in<sp/>effective<sp/>number<sp/>of<sp/>model<sp/>parameters,<sp/>just<sp/>like<sp/>base<sp/>Shapley<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/>syn_loss_diff<sp/>=<sp/>{}<sp/><sp/></highlight><highlight class="comment">#<sp/>expected_loss<sp/>-<sp/>measured_loss<sp/>(where<sp/>&gt;<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/>responsives<sp/>=<sp/>[uid<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>uid,<sp/>stat<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>stats.items()<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;loss&apos;</highlight><highlight class="normal"><sp/>+<sp/>ext<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>stat]</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>_first,<sp/>first<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>stats.items():</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;loss&apos;</highlight><highlight class="normal"><sp/>+<sp/>ext<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>first:</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first_diff<sp/>=<sp/>syn_loss_diff.setdefault(_first,<sp/>{})</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first_diff[_first]<sp/>=<sp/>first[</highlight><highlight class="stringliteral">&apos;loss&apos;</highlight><highlight class="normal"><sp/>+<sp/>ext]<sp/><sp/></highlight><highlight class="comment">#<sp/>diagonal<sp/>keeps<sp/>direct<sp/>loss</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1516"><highlight class="normal"></highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>_second,<sp/>second<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>stats.items():</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;loss&apos;</highlight><highlight class="normal"><sp/>+<sp/>ext<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>second<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>_second<sp/>&lt;=<sp/>_first:</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>second_diff<sp/>=<sp/>syn_loss_diff.setdefault(_second,<sp/>{})</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"></highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">with</highlight><highlight class="normal"><sp/>torch.no_grad():</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expected_loss<sp/>=<sp/>torch.min(first[</highlight><highlight class="stringliteral">&apos;loss&apos;</highlight><highlight class="normal"><sp/>+<sp/>ext],<sp/>second[</highlight><highlight class="stringliteral">&apos;loss&apos;</highlight><highlight class="normal"><sp/>+<sp/>ext])<sp/><sp/></highlight><highlight class="comment">#<sp/>expecting<sp/>min<sp/>loss</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1524"><highlight class="normal"></highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>measured_loss<sp/>=<sp/>synergy(first,<sp/>second,<sp/>target,<sp/>ext)</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"></highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>loss_diff_share<sp/>=<sp/>torch.clamp(expected_loss<sp/>-<sp/>measured_loss,<sp/>0)<sp/>/<sp/>2<sp/><sp/></highlight><highlight class="comment">#<sp/>record<sp/>direct<sp/>loss<sp/>diff</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>loss_diff_share<sp/>/=<sp/>len(responsives)<sp/><sp/></highlight><highlight class="comment">#<sp/>average<sp/>over<sp/>responsives</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first[</highlight><highlight class="stringliteral">&apos;synergy_loss_diff&apos;</highlight><highlight class="normal"><sp/>+<sp/>ext]<sp/>+=<sp/>loss_diff_share</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>second[</highlight><highlight class="stringliteral">&apos;synergy_loss_diff&apos;</highlight><highlight class="normal"><sp/>+<sp/>ext]<sp/>+=<sp/>loss_diff_share</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"></highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>pairwise<sp/>loss<sp/>reduction<sp/>of<sp/>expected<sp/>to<sp/>measured<sp/>loss<sp/>due<sp/>to<sp/>synergy<sp/>between<sp/>first<sp/>and<sp/>second</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first_diff[_second]<sp/>=<sp/>loss_diff_share</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>second_diff[_first]<sp/>=<sp/>loss_diff_share</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"></highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>measured_params<sp/>=<sp/><ref refid="namespacebittensor_1_1__neuron_1_1text_1_1core__validator_1afbddc9ae968b91105cb4845cdec271d8" kindref="member">scaling_law_loss_to_params</ref>(measured_loss)</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expected_params<sp/>=<sp/><ref refid="namespacebittensor_1_1__neuron_1_1text_1_1core__validator_1afbddc9ae968b91105cb4845cdec271d8" kindref="member">scaling_law_loss_to_params</ref>(expected_loss)</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"></highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>powered<sp/>down<sp/>number<sp/>of<sp/>params,<sp/>e.g.<sp/>dynamic<sp/>range<sp/>3<sp/>→<sp/>6<sp/>nats<sp/>for<sp/>scaling_law_power=0.5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pow_measured_params<sp/>=<sp/>torch.pow(measured_params,<sp/>scaling_law_power)</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pow_expected_params<sp/>=<sp/>torch.pow(expected_params,<sp/>scaling_law_power)</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"></highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>synergy_share<sp/>=<sp/>torch.clamp(pow_measured_params<sp/>-<sp/>pow_expected_params,<sp/>0)<sp/>/<sp/>2</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>synergy_share<sp/>/=<sp/>len(responsives)<sp/><sp/></highlight><highlight class="comment">#<sp/>average<sp/>over<sp/>responsives</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first[</highlight><highlight class="stringliteral">&apos;synergy&apos;</highlight><highlight class="normal"><sp/>+<sp/>ext]<sp/>+=<sp/>synergy_share<sp/><sp/></highlight><highlight class="comment">#<sp/>share<sp/>synergy<sp/>amongst<sp/>coalition<sp/>members</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>second[</highlight><highlight class="stringliteral">&apos;synergy&apos;</highlight><highlight class="normal"><sp/>+<sp/>ext]<sp/>+=<sp/>synergy_share</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"></highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>syn_loss_diff</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"></highlight></codeline>
<codeline lineno="1550"><highlight class="normal"></highlight></codeline>
<codeline lineno="1551"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacebittensor_1_1__neuron_1_1text_1_1core__validator_1ad73b7e74829f07cd55e096f14a9a39a8" kindref="member">format_predictions</ref>(uids:<sp/>torch.Tensor,<sp/>query_responses:<sp/>List[List[torch.FloatTensor]],</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_ops:<sp/>List[torch.LongTensor],<sp/>inputs:<sp/>torch.FloatTensor,</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>validation_len:<sp/>int,<sp/>index_s:<sp/>int<sp/>=<sp/>0,<sp/>number_of_predictions:<sp/>int<sp/>=<sp/>3)<sp/>-&gt;<sp/>List:</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&quot;&quot;&quot;<sp/>Format<sp/>batch<sp/>task<sp/>topk<sp/>predictions<sp/>for<sp/>rich<sp/>table<sp/>print<sp/>of<sp/>query<sp/>responses.</highlight></codeline>
<codeline lineno="1555"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="1556"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>batch_predictions<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="1557"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>std_tokenizer<sp/>=<sp/><ref refid="classbittensor_1_1__tokenizer_1_1tokenizer" kindref="compound">bittensor.tokenizer</ref>()</highlight></codeline>
<codeline lineno="1558"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1559"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Batch<sp/>iteration<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>batch_item<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(inputs.shape[0]):</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Task<sp/>formatting<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>context<sp/>=<sp/>inputs[batch_item][:-validation_len]</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>answer<sp/>=<sp/>inputs[batch_item][-validation_len:]</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"></highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>context<sp/>=<sp/>repr(std_tokenizer.decode(context))[1:-1][-30:]<sp/><sp/></highlight><highlight class="comment">#<sp/>strip<sp/>&apos;&apos;<sp/>and<sp/>truncate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>answer<sp/>=<sp/>repr(std_tokenizer.decode(answer))[1:-1][:15]<sp/><sp/></highlight><highlight class="comment">#<sp/>strip<sp/>&apos;&apos;<sp/>and<sp/>truncate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1567"><highlight class="normal"></highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task<sp/>=<sp/>f</highlight><highlight class="stringliteral">&quot;[reverse]{context}[/reverse][bold]{answer}[/bold]&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1569"><highlight class="normal"></highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Prediction<sp/>formatting<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>predictions<sp/>=<sp/>{}</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>index,<sp/>uid<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>enumerate(uids.tolist()):</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>return_ops[index][index_s]<sp/>==<sp/>bittensor.proto.ReturnCode.Success:</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>topk_tensor<sp/>=<sp/>query_responses[index][index_s]<sp/><sp/></highlight><highlight class="comment">#<sp/>[batch_size,<sp/>(topk<sp/>+<sp/>1),<sp/>max_len]<sp/>(prob_k)<sp/>+<sp/>floor_prob</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>topk_tokens<sp/>=<sp/>topk_tensor[batch_item,<sp/>:-1,<sp/>1:].int()<sp/><sp/></highlight><highlight class="comment">#<sp/>[batch_size,<sp/>topk,<sp/>max_len<sp/>-<sp/>1]<sp/>Phrase<sp/>tokens<sp/>with<sp/>ignore_index<sp/>token<sp/>for<sp/>padding.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>topk_probs<sp/>=<sp/>topk_tensor[batch_item,<sp/>:-1,<sp/>0]<sp/><sp/></highlight><highlight class="comment">#<sp/>[batch_size,<sp/>topk]<sp/>Probabilities<sp/>for<sp/>each<sp/>phrase<sp/>in<sp/>topk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1577"><highlight class="normal"></highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Topk<sp/>iteration<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>topk_predictions<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(number_of_predictions):</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>phrase<sp/>=<sp/>topk_tokens[i]</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>phrase<sp/>=<sp/>phrase[phrase<sp/>&gt;=<sp/>0]<sp/><sp/></highlight><highlight class="comment">#<sp/>strip<sp/>negative<sp/>ignore_index<sp/>=<sp/>-100</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>phrase_str<sp/>=<sp/>repr(std_tokenizer.decode(phrase))[:15]<sp/><sp/></highlight><highlight class="comment">#<sp/>decode,<sp/>escape<sp/>and<sp/>truncate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prob<sp/>=<sp/>f</highlight><highlight class="stringliteral">&apos;{topk_probs[i]:.3f}&apos;</highlight><highlight class="normal">.lstrip(</highlight><highlight class="stringliteral">&apos;0&apos;</highlight><highlight class="normal">).replace(</highlight><highlight class="stringliteral">&apos;1.000&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;1.00&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>topk_predictions<sp/>+=<sp/>f</highlight><highlight class="stringliteral">&quot;[green]{prob}[/green]:<sp/>{phrase_str}<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1586"><highlight class="normal"></highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>predictions[uid]<sp/>=<sp/>topk_predictions[:-1]<sp/><sp/></highlight><highlight class="comment">#<sp/>strip<sp/>trailing<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1588"><highlight class="normal"></highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>batch_predictions<sp/>+=<sp/>[(task,<sp/>predictions)]</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"></highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>batch_predictions</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"></highlight></codeline>
<codeline lineno="1593"><highlight class="normal"></highlight></codeline>
<codeline lineno="1594"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacebittensor_1_1__neuron_1_1text_1_1core__validator_1a0c000ee81cd21336cf103755b8ffbe89" kindref="member">response_table</ref>(batch_predictions:<sp/>List,<sp/>stats:<sp/>Dict,<sp/>sort_col:<sp/>str,<sp/>console_width:<sp/>int,</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task_repeat:<sp/>int<sp/>=<sp/>4,<sp/>tasks_per_server:<sp/>int<sp/>=<sp/>3):</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&quot;&quot;&quot;<sp/>Prints<sp/>the<sp/>query<sp/>response<sp/>table:<sp/>top<sp/>prediction<sp/>probabilities<sp/>and<sp/>texts<sp/>for<sp/>batch<sp/>tasks.</highlight></codeline>
<codeline lineno="1597"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="1598"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Batch<sp/>permutation<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/>batch_size<sp/>=<sp/>len(batch_predictions)</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>batch_size<sp/>==<sp/>0:</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/>batch_perm<sp/>=<sp/>torch.randperm(batch_size)<sp/><sp/></highlight><highlight class="comment">#<sp/>avoid<sp/>restricting<sp/>observation<sp/>to<sp/>predictable<sp/>subsets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1603"><highlight class="normal"></highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Column<sp/>selection<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/>columns<sp/>=<sp/>[c[:]<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>c<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>neuron_stats_columns<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>c[1]<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>[</highlight><highlight class="stringliteral">&apos;uid&apos;</highlight><highlight class="normal">,<sp/>sort_col,<sp/></highlight><highlight class="stringliteral">&apos;loss_nxt&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;synergy_nxt&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;logits_excess_nxt&apos;</highlight><highlight class="normal">]]</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/>col_keys<sp/>=<sp/>[c[1]<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>c<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>columns]</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"></highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Sort<sp/>rows<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/>sort<sp/>=<sp/>sorted([(uid,<sp/>s[sort_col])<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>uid,<sp/>s<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>stats.items()<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>sort_col<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>s],</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reverse=</highlight><highlight class="stringliteral">&apos;loss&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>sort_col,<sp/>key=</highlight><highlight class="keyword">lambda</highlight><highlight class="normal"><sp/>_row:<sp/>_row[1])</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>sort_col<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>col_keys:</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sort_idx<sp/>=<sp/>col_keys.index(sort_col)<sp/><sp/></highlight><highlight class="comment">#<sp/>sort<sp/>column<sp/>with<sp/>key<sp/>of<sp/>sort_col</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>columns[sort_idx][0]<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;\u2193&apos;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>↓<sp/>downwards<sp/>arrow<sp/>(sort)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1614"><highlight class="normal"></highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i,<sp/>(uid,<sp/>val)<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>enumerate(sort):</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>New<sp/>table<sp/>section<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>i<sp/>%<sp/>task_repeat<sp/>==<sp/>0:</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>table<sp/>=<sp/>Table(width=console_width,<sp/>box=</highlight><highlight class="keywordtype">None</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>i<sp/>==<sp/>0:</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>table.title<sp/>=<sp/>f</highlight><highlight class="stringliteral">&quot;[white<sp/>bold]<sp/>Query<sp/>responses<sp/>[/white<sp/>bold]<sp/>|<sp/>&quot;</highlight><highlight class="normal"><sp/>\</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&quot;[white]context[/white][bold]continuation[/bold]<sp/>|<sp/>.prob:<sp/>&apos;prediction&apos;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1622"><highlight class="normal"></highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>col,<sp/>_,<sp/>_,<sp/>stl<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>columns:<sp/><sp/></highlight><highlight class="comment">#<sp/>[Column_name,<sp/>key_name,<sp/>format_string,<sp/>rich_style]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>table.add_column(col,<sp/>style=stl,<sp/>justify=</highlight><highlight class="stringliteral">&apos;right&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"></highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Last<sp/>table<sp/>section<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>i<sp/>==<sp/>len(sort)<sp/>-<sp/>1:</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>table.caption<sp/>=<sp/>f</highlight><highlight class="stringliteral">&apos;[bold]{len(sort)}[/bold]/{len(stats)}<sp/>(respond/topk)<sp/>|<sp/>&apos;</highlight><highlight class="normal"><sp/>\</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&apos;[bold]{tasks_per_server}[/bold]<sp/>tasks<sp/>per<sp/>server<sp/>|<sp/>&apos;</highlight><highlight class="normal"><sp/>\</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&apos;repeat<sp/>tasks<sp/>over<sp/>[bold]{task_repeat}[/bold]<sp/>servers<sp/>&apos;</highlight><highlight class="normal"><sp/>\</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&apos;[white]\[{math.ceil(1.<sp/>*<sp/>len(sort)<sp/>/<sp/>task_repeat)<sp/>*<sp/>tasks_per_server}/&apos;</highlight><highlight class="normal"><sp/>\</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&apos;{batch_size}<sp/>batch<sp/>tasks][/white]&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1633"><highlight class="normal"></highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Row<sp/>addition<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row<sp/>=<sp/>[txt.format(stats[uid][key])<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>_,<sp/>key,<sp/>txt,<sp/>_<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>columns]</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>j<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(tasks_per_server):</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>batch_item<sp/>=<sp/>((i<sp/>//<sp/>task_repeat)<sp/>*<sp/>tasks_per_server<sp/>+<sp/>j)<sp/>%<sp/>batch_size<sp/><sp/></highlight><highlight class="comment">#<sp/>repeat<sp/>task<sp/>over<sp/>servers,<sp/>do<sp/>not<sp/>exceed<sp/>batch_size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task,<sp/>predictions<sp/>=<sp/>batch_predictions[batch_perm[batch_item]]</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row<sp/>+=<sp/>[predictions[uid]]</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"></highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>i<sp/>%<sp/>task_repeat<sp/>==<sp/>0:</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>table.add_column(task,<sp/>header_style=</highlight><highlight class="stringliteral">&apos;not<sp/>bold&apos;</highlight><highlight class="normal">,<sp/>style=</highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">,<sp/>justify=</highlight><highlight class="stringliteral">&apos;left&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"></highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>table.add_row(*row)</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"></highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Table<sp/>print<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>len(sort)<sp/>-<sp/>1)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>(i<sp/>%<sp/>task_repeat<sp/>==<sp/>task_repeat<sp/>-<sp/>1):</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(table)</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>MarkupError<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>e:</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(e)</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>i<sp/>==<sp/>len(sort)<sp/>-<sp/>1:</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print()</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"></highlight></codeline>
<codeline lineno="1656"><highlight class="normal"></highlight></codeline>
<codeline lineno="1657"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacebittensor_1_1__neuron_1_1text_1_1core__validator_1a6fd9748649f8e6a6f82cbbcb48b164a4" kindref="member">synergy_table</ref>(stats,<sp/>syn_loss_diff,<sp/>sort_col,<sp/>console_width):</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&quot;&quot;&quot;<sp/>Prints<sp/>the<sp/>synergy<sp/>loss<sp/>diff<sp/>matrix<sp/>with<sp/>pairwise<sp/>loss<sp/>reduction<sp/>due<sp/>to<sp/>synergy<sp/>(original<sp/>loss<sp/>on<sp/>diagonal)</highlight></codeline>
<codeline lineno="1659"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="1660"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>sort<sp/>=<sp/>sorted([(uid,<sp/>s[sort_col])<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>uid,<sp/>s<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>stats.items()<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>sort_col<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>s],</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reverse=</highlight><highlight class="stringliteral">&apos;loss&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>sort_col,<sp/>key=</highlight><highlight class="keyword">lambda</highlight><highlight class="normal"><sp/>_row:<sp/>_row[1])</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/>uid_col<sp/>=<sp/>neuron_stats_columns[0]<sp/><sp/></highlight><highlight class="comment">#<sp/>[Column_name,<sp/>key_name,<sp/>format_string,<sp/>rich_style]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/>columns<sp/>=<sp/>[uid_col]<sp/>+<sp/>[[f</highlight><highlight class="stringliteral">&apos;{s[0]}&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;{:.2f}&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">]<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>s<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>sort]</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/>rows<sp/>=<sp/>[[uid_col[2].format(s[0])]<sp/>+</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[(</highlight><highlight class="stringliteral">&apos;[bright_cyan]{:.2f}[/bright_cyan]&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>t<sp/>==<sp/>s<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;[magenta]{:.3f}[/magenta]&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>syn_loss_diff[s[0]][t[0]]<sp/>&gt;<sp/>0<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;[dim]{:.0f}[/dim]&apos;</highlight><highlight class="normal">).format(syn_loss_diff[s[0]][t[0]]).replace(</highlight><highlight class="stringliteral">&apos;0.&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;.&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>t<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>sort]<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>s<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>sort]</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"></highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Synergy<sp/>table<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/>table<sp/>=<sp/>Table(width=console_width,<sp/>box=</highlight><highlight class="keywordtype">None</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/>table.title<sp/>=<sp/>f</highlight><highlight class="stringliteral">&apos;[white]<sp/>Synergy<sp/>table<sp/>[/white]<sp/>|<sp/>Pairwise<sp/>synergy&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/><sp/>table.caption<sp/>=<sp/>f</highlight><highlight class="stringliteral">&apos;loss<sp/>decrease&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1673"><highlight class="normal"></highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>col,<sp/>_,<sp/>_,<sp/>stl<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>columns:<sp/><sp/></highlight><highlight class="comment">#<sp/>[Column_name,<sp/>key_name,<sp/>format_string,<sp/>rich_style]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>table.add_column(col,<sp/>style=stl,<sp/>justify=</highlight><highlight class="stringliteral">&apos;right&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>row<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>rows:</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>table.add_row(*row)</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"></highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len(rows):</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(table)</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print()</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"></highlight></codeline>
<codeline lineno="1683"><highlight class="normal"></highlight></codeline>
<codeline lineno="1684"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacebittensor_1_1__neuron_1_1text_1_1core__validator_1a3b98321f53ed9671d10985f26470e151" kindref="member">stats_table</ref>(stats,<sp/>sort_col,<sp/>console_width,<sp/>title,<sp/>caption,<sp/>mark_uids=None):</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&quot;&quot;&quot;<sp/>Gathers<sp/>data<sp/>and<sp/>constructs<sp/>neuron<sp/>statistics<sp/>table<sp/>and<sp/>prints<sp/>it</highlight></codeline>
<codeline lineno="1686"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="1687"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Gather<sp/>columns<sp/>and<sp/>rows<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>mark_uids<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mark_uids<sp/>=<sp/>list()</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/>stats_keys<sp/>=<sp/>[set(k<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>k<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>stat)</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>stat<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>stats.values()<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>sort_col<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>stat]<sp/><sp/></highlight><highlight class="comment">#<sp/>all<sp/>available<sp/>stats<sp/>keys<sp/>with<sp/>sort_col</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1692"><highlight class="normal"></highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len(stats_keys)<sp/>==<sp/>0:</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>nothing<sp/>to<sp/>print</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1695"><highlight class="normal"></highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/>stats_keys<sp/>=<sp/>set.union(*stats_keys)</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/>columns<sp/>=<sp/>[c[:]<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>c<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>neuron_stats_columns<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>c[1]<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>stats_keys]<sp/><sp/></highlight><highlight class="comment">#<sp/>available<sp/>columns<sp/>intersecting<sp/>with<sp/>stats_keys</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/>rows<sp/>=<sp/>[[(</highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">,<sp/>0)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>key<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>stat</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>((</highlight><highlight class="stringliteral">&apos;*<sp/>&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>key<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;uid&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>mark_uids<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>uid<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>mark_uids<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">)<sp/>+<sp/>txt.format(stat[key]),<sp/>stat[key])</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>_,<sp/>key,<sp/>txt,<sp/>_<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>columns]</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>uid,<sp/>stat<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>stats.items()<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>sort_col<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>stat]<sp/><sp/></highlight><highlight class="comment">#<sp/>only<sp/>keep<sp/>rows<sp/>with<sp/>at<sp/>least<sp/>one<sp/>non-empty<sp/>cell</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1702"><highlight class="normal"></highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len(columns)<sp/>==<sp/>0<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>len(rows)<sp/>==<sp/>0:</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>nothing<sp/>to<sp/>print</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1705"><highlight class="normal"></highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Sort<sp/>rows<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/>col_keys<sp/>=<sp/>[c[1]<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>c<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>columns]</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>sort_col<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>col_keys:</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sort_idx<sp/>=<sp/>col_keys.index(sort_col)<sp/><sp/></highlight><highlight class="comment">#<sp/>sort<sp/>column<sp/>with<sp/>key<sp/>of<sp/>sort_col</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>columns[sort_idx][0]<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;\u2193&apos;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>↓<sp/>downwards<sp/>arrow<sp/>(sort)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rows<sp/>=<sp/>sorted(rows,<sp/>reverse=</highlight><highlight class="stringliteral">&apos;loss&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>sort_col,<sp/>key=</highlight><highlight class="keyword">lambda</highlight><highlight class="normal"><sp/>_row:<sp/>_row[sort_idx][1])<sp/><sp/></highlight><highlight class="comment">#<sp/>sort<sp/>according<sp/>to<sp/>sortcol</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1712"><highlight class="normal"></highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Instantiate<sp/>stats<sp/>table<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/>table<sp/>=<sp/>Table(width=console_width,<sp/>box=</highlight><highlight class="keywordtype">None</highlight><highlight class="normal">,<sp/>row_styles=[Style(bgcolor=</highlight><highlight class="stringliteral">&apos;grey15&apos;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">])</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/>table.title<sp/>=<sp/>title</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/>table.caption<sp/>=<sp/>caption</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"></highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>col,<sp/>_,<sp/>_,<sp/>stl<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>columns:<sp/><sp/></highlight><highlight class="comment">#<sp/>[Column_name,<sp/>key_name,<sp/>format_string,<sp/>rich_style]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>table.add_column(col,<sp/>style=stl,<sp/>justify=</highlight><highlight class="stringliteral">&apos;right&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>row<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>rows:</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>table.add_row(*[txt<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>txt,<sp/>val<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>row])</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"></highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Print<sp/>table<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/>print(table)</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"></highlight></codeline>
<codeline lineno="1726"><highlight class="normal"></highlight></codeline>
<codeline lineno="1727"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacebittensor_1_1__neuron_1_1text_1_1core__validator_1ac65c768421ed57928ee56b3da28e5cf8" kindref="member">synapse_table</ref>(name,<sp/>stats,<sp/>sort_col,<sp/>console_width,<sp/>start_time):</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&quot;&quot;&quot;<sp/>Prints<sp/>the<sp/>evaluation<sp/>of<sp/>the<sp/>neuron<sp/>responses<sp/>to<sp/>the<sp/>validator<sp/>request</highlight></codeline>
<codeline lineno="1729"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="1730"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><ref refid="namespacebittensor_1_1__neuron_1_1text_1_1core__validator_1a3b98321f53ed9671d10985f26470e151" kindref="member">stats_table</ref>(stats,<sp/>sort_col,<sp/>console_width,</highlight></codeline>
<codeline lineno="1731"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f&apos;[white]<sp/>\[{name}]<sp/>responses<sp/>[/white]<sp/>|<sp/>Validator<sp/>forward&apos;</highlight><highlight class="normal">,<sp/><sp/></highlight><highlight class="comment">#<sp/>title</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&apos;[bold]{len([s<sp/>for<sp/>s<sp/>in<sp/>stats.values()<sp/>if<sp/>len(s)<sp/>and<sp/>sort_col<sp/>in<sp/>s])}[/bold]/&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&apos;{len(stats)}<sp/>(respond/topk)<sp/>|<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&apos;[bold]Synapse[/bold]<sp/>|<sp/>[white]\[{time.time()<sp/>-<sp/>start_time:.3g}s][/white]&apos;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>caption</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"></highlight></codeline>
<codeline lineno="1737"><highlight class="normal"></highlight></codeline>
<codeline lineno="1738"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacebittensor_1_1__neuron_1_1text_1_1core__validator_1ab1b9785136040aef8a5a3e0588151ca1" kindref="member">unsuccess</ref>(_name,<sp/>_unsuccessful):</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&quot;&quot;&quot;<sp/>Prints<sp/>the<sp/>return<sp/>codes<sp/>and<sp/>response<sp/>times<sp/>of<sp/>unsuccessful<sp/>responses</highlight></codeline>
<codeline lineno="1740"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="1741"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===<sp/>Unsuccessful<sp/>responses<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/>unsuccess_txt<sp/>=<sp/>f</highlight><highlight class="stringliteral">&apos;{_name}<sp/>\t|<sp/>Unsuccessful<sp/>&lt;cyan&gt;UID&lt;/cyan&gt;[&lt;red&gt;return_op&lt;/red&gt;<sp/>&lt;yellow&gt;time&lt;/yellow&gt;]:<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>_uid,<sp/>_return_op,<sp/>_time<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>_unsuccessful:</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unsuccess_txt<sp/>+=<sp/>f</highlight><highlight class="stringliteral">&apos;{_uid}[&lt;red&gt;{_return_op}&lt;/red&gt;<sp/>&lt;yellow&gt;{_time:.2f}&lt;/yellow&gt;]<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/>logger.info(unsuccess_txt)</highlight></codeline>
    </programlisting>
    <location file="/Users/macthrasher/bittensor/bittensor/_neuron/text/core_validator/__init__.py"/>
  </compounddef>
</doxygen>
