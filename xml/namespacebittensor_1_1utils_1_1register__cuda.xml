<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="namespacebittensor_1_1utils_1_1register__cuda" kind="namespace" language="Python">
    <compoundname>bittensor::utils::register_cuda</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="register__cuda_8py_1a95fe0b17fa446eabe38bd29cf40f76c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Tuple[np.int64, bytes]</type>
        <definition> Tuple[np.int64, bytes] bittensor.utils.register_cuda.solve_cuda</definition>
        <argsstring>(np.int64 nonce_start, np.int64 update_interval, int TPB, bytes block_bytes, int bn, int difficulty, int limit, int dev_id=0)</argsstring>
        <name>solve_cuda</name>
        <qualifiedname>bittensor.utils.register_cuda.solve_cuda</qualifiedname>
        <param>
          <type>np.int64</type>
          <declname>nonce_start</declname>
        </param>
        <param>
          <type>np.int64</type>
          <declname>update_interval</declname>
        </param>
        <param>
          <type>int</type>
          <declname>TPB</declname>
        </param>
        <param>
          <type>bytes</type>
          <declname>block_bytes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bn</declname>
        </param>
        <param>
          <type>int</type>
          <declname>difficulty</declname>
        </param>
        <param>
          <type>int</type>
          <declname>limit</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dev_id</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Solves the PoW problem using CUDA.
Args:
    nonce_start: int64
        Starting nonce.
    update_interval: int64
        Number of nonces to solve before updating block information.
    TPB: int
        Threads per block.
    block_bytes: bytes
        Bytes of the block hash. 64 bytes.
    difficulty: int256
        Difficulty of the PoW problem.
    limit: int256
        Upper limit of the nonce.
    dev_id: int (default=0)
        The CUDA device ID
Returns:
    Tuple[int64, bytes]
        Tuple of the nonce and the seal corresponding to the solution.  
        Returns -1 for nonce if no solution is found.     
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/macthrasher/bittensor/bittensor/utils/register_cuda.py" line="13" column="1" bodyfile="/Users/macthrasher/bittensor/bittensor/utils/register_cuda.py" bodystart="13" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="register__cuda_8py_1ac5a6adddffc94aa767b7b31e5d1331ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def bittensor.utils.register_cuda.reset_cuda</definition>
        <argsstring>()</argsstring>
        <name>reset_cuda</name>
        <qualifiedname>bittensor.utils.register_cuda.reset_cuda</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Resets the CUDA environment.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/macthrasher/bittensor/bittensor/utils/register_cuda.py" line="80" column="1" bodyfile="/Users/macthrasher/bittensor/bittensor/utils/register_cuda.py" bodystart="80" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="register__cuda_8py_1ab920653b0447fc74606a2bda341b71b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>str</type>
        <definition> str bittensor.utils.register_cuda.log_cuda_errors</definition>
        <argsstring>()</argsstring>
        <name>log_cuda_errors</name>
        <qualifiedname>bittensor.utils.register_cuda.log_cuda_errors</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Logs any CUDA errors.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/macthrasher/bittensor/bittensor/utils/register_cuda.py" line="91" column="1" bodyfile="/Users/macthrasher/bittensor/bittensor/utils/register_cuda.py" bodystart="91" bodyend="111"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/Users/macthrasher/bittensor/bittensor/utils/register_cuda.py" line="1" column="1"/>
  </compounddef>
</doxygen>
