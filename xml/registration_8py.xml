<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="registration_8py" kind="file" language="Python">
    <compoundname>registration.py</compoundname>
    <innerclass refid="classbittensor_1_1utils_1_1registration_1_1_c_u_d_a_exception" prot="public">bittensor::utils::registration::CUDAException</innerclass>
    <innerclass refid="classbittensor_1_1utils_1_1registration_1_1_p_o_w_solution" prot="public">bittensor::utils::registration::POWSolution</innerclass>
    <innerclass refid="classbittensor_1_1utils_1_1registration_1_1_solver_base" prot="public">bittensor::utils::registration::SolverBase</innerclass>
    <innerclass refid="classbittensor_1_1utils_1_1registration_1_1_solver" prot="public">bittensor::utils::registration::Solver</innerclass>
    <innerclass refid="classbittensor_1_1utils_1_1registration_1_1_c_u_d_a_solver" prot="public">bittensor::utils::registration::CUDASolver</innerclass>
    <innerclass refid="classbittensor_1_1utils_1_1registration_1_1_registration_statistics" prot="public">bittensor::utils::registration::RegistrationStatistics</innerclass>
    <innerclass refid="classbittensor_1_1utils_1_1registration_1_1_registration_statistics_logger" prot="public">bittensor::utils::registration::RegistrationStatisticsLogger</innerclass>
    <innerclass refid="classbittensor_1_1utils_1_1registration_1_1_using_spawn_start_method" prot="public">bittensor::utils::registration::UsingSpawnStartMethod</innerclass>
    <innernamespace refid="namespacebittensor">bittensor</innernamespace>
    <innernamespace refid="namespacebittensor_1_1utils">bittensor::utils</innernamespace>
    <innernamespace refid="namespacebittensor_1_1utils_1_1registration">bittensor::utils::registration</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="registration_8py_1abf77b1074f21e08fa2da3c0f9d65028f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def bittensor.utils.registration.hex_bytes_to_u8_list</definition>
        <argsstring>(bytes hex_bytes)</argsstring>
        <name>hex_bytes_to_u8_list</name>
        <qualifiedname>bittensor.utils.registration.hex_bytes_to_u8_list</qualifiedname>
        <param>
          <type>bytes</type>
          <declname>hex_bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/macthrasher/bittensor/bittensor/utils/registration.py" line="28" column="1" bodyfile="/Users/macthrasher/bittensor/bittensor/utils/registration.py" bodystart="28" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="registration_8py_1ab1bfdbd96c22c07abcb72b8ccbc8fe62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def bittensor.utils.registration.u8_list_to_hex</definition>
        <argsstring>(list values)</argsstring>
        <name>u8_list_to_hex</name>
        <qualifiedname>bittensor.utils.registration.u8_list_to_hex</qualifiedname>
        <param>
          <type>list</type>
          <declname>values</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/macthrasher/bittensor/bittensor/utils/registration.py" line="33" column="1" bodyfile="/Users/macthrasher/bittensor/bittensor/utils/registration.py" bodystart="33" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="registration_8py_1abf3136dbedab86f9bd387d6800755132" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bytes</type>
        <definition> bytes bittensor.utils.registration.create_seal_hash</definition>
        <argsstring>(bytes block_hash, int nonce)</argsstring>
        <name>create_seal_hash</name>
        <qualifiedname>bittensor.utils.registration.create_seal_hash</qualifiedname>
        <param>
          <type>bytes</type>
          <declname>block_hash</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nonce</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/macthrasher/bittensor/bittensor/utils/registration.py" line="40" column="1" bodyfile="/Users/macthrasher/bittensor/bittensor/utils/registration.py" bodystart="40" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="registration_8py_1ab93576431130ee6797d24f123f430ed6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def bittensor.utils.registration.seal_meets_difficulty</definition>
        <argsstring>(bytes seal, int difficulty)</argsstring>
        <name>seal_meets_difficulty</name>
        <qualifiedname>bittensor.utils.registration.seal_meets_difficulty</qualifiedname>
        <param>
          <type>bytes</type>
          <declname>seal</declname>
        </param>
        <param>
          <type>int</type>
          <declname>difficulty</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/macthrasher/bittensor/bittensor/utils/registration.py" line="50" column="1" bodyfile="/Users/macthrasher/bittensor/bittensor/utils/registration.py" bodystart="50" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="registration_8py_1aa545c271f47bcc63d2e419c7c24f9f48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def bittensor.utils.registration.solve_for_difficulty</definition>
        <argsstring>(block_hash, difficulty)</argsstring>
        <name>solve_for_difficulty</name>
        <qualifiedname>bittensor.utils.registration.solve_for_difficulty</qualifiedname>
        <param>
          <type>block_hash</type>
          <defname>block_hash</defname>
        </param>
        <param>
          <type>difficulty</type>
          <defname>difficulty</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/macthrasher/bittensor/bittensor/utils/registration.py" line="60" column="1" bodyfile="/Users/macthrasher/bittensor/bittensor/utils/registration.py" bodystart="60" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="registration_8py_1a96d082b232e2f07e3cbfcccf36d3ff4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def bittensor.utils.registration.get_human_readable</definition>
        <argsstring>(num, suffix=&quot;H&quot;)</argsstring>
        <name>get_human_readable</name>
        <qualifiedname>bittensor.utils.registration.get_human_readable</qualifiedname>
        <param>
          <type>num</type>
          <defname>num</defname>
        </param>
        <param>
          <type>suffix</type>
          <defname>suffix</defname>
          <defval>&quot;H&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/macthrasher/bittensor/bittensor/utils/registration.py" line="72" column="1" bodyfile="/Users/macthrasher/bittensor/bittensor/utils/registration.py" bodystart="72" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="registration_8py_1ac27b584f8099744deeddf5260638d4a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def bittensor.utils.registration.millify</definition>
        <argsstring>(int n)</argsstring>
        <name>millify</name>
        <qualifiedname>bittensor.utils.registration.millify</qualifiedname>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/macthrasher/bittensor/bittensor/utils/registration.py" line="80" column="1" bodyfile="/Users/macthrasher/bittensor/bittensor/utils/registration.py" bodystart="80" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="registration_8py_1a5d6b929bb31df660eb9a7bfe21868fe6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition> bool bittensor.utils.registration.POWNotStale</definition>
        <argsstring>(&apos;bittensor.Subtensor&apos; subtensor, Dict pow_result)</argsstring>
        <name>POWNotStale</name>
        <qualifiedname>bittensor.utils.registration.POWNotStale</qualifiedname>
        <param>
          <type>&apos;<ref refid="classbittensor_1_1__subtensor_1_1subtensor__impl_1_1_subtensor" kindref="compound">bittensor.Subtensor</ref>&apos;</type>
          <declname>subtensor</declname>
        </param>
        <param>
          <type>Dict</type>
          <declname>pow_result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Returns True if the POW is not stale.
This means the block the POW is solved for is within 3 blocks of the current block.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/macthrasher/bittensor/bittensor/utils/registration.py" line="89" column="1" bodyfile="/Users/macthrasher/bittensor/bittensor/utils/registration.py" bodystart="89" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="registration_8py_1a9c9865df7bce952fe1b7e12d161c28a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Optional[POWSolution]</type>
        <definition> Optional[POWSolution] bittensor.utils.registration.solve_for_nonce_block_cuda</definition>
        <argsstring>(CUDASolver solver, int nonce_start, int update_interval, bytes block_bytes, int difficulty, int limit, int block_number, int dev_id, int TPB)</argsstring>
        <name>solve_for_nonce_block_cuda</name>
        <qualifiedname>bittensor.utils.registration.solve_for_nonce_block_cuda</qualifiedname>
        <param>
          <type>CUDASolver</type>
          <declname>solver</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nonce_start</declname>
        </param>
        <param>
          <type>int</type>
          <declname>update_interval</declname>
        </param>
        <param>
          <type>bytes</type>
          <declname>block_bytes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>difficulty</declname>
        </param>
        <param>
          <type>int</type>
          <declname>limit</declname>
        </param>
        <param>
          <type>int</type>
          <declname>block_number</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dev_id</declname>
        </param>
        <param>
          <type>int</type>
          <declname>TPB</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Tries to solve the POW on a CUDA device for a block of nonces (nonce_start, nonce_start + update_interval * TPB</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/macthrasher/bittensor/bittensor/utils/registration.py" line="258" column="1" bodyfile="/Users/macthrasher/bittensor/bittensor/utils/registration.py" bodystart="258" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="registration_8py_1a9532c01506777a3a051292dbb69a6886" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Optional[POWSolution]</type>
        <definition> Optional[POWSolution] bittensor.utils.registration.solve_for_nonce_block</definition>
        <argsstring>(Solver solver, int nonce_start, int nonce_end, bytes block_bytes, int difficulty, int limit, int block_number)</argsstring>
        <name>solve_for_nonce_block</name>
        <qualifiedname>bittensor.utils.registration.solve_for_nonce_block</qualifiedname>
        <param>
          <type>Solver</type>
          <declname>solver</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nonce_start</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nonce_end</declname>
        </param>
        <param>
          <type>bytes</type>
          <declname>block_bytes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>difficulty</declname>
        </param>
        <param>
          <type>int</type>
          <declname>limit</declname>
        </param>
        <param>
          <type>int</type>
          <declname>block_number</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Tries to solve the POW for a block of nonces (nonce_start, nonce_end)</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/macthrasher/bittensor/bittensor/utils/registration.py" line="276" column="1" bodyfile="/Users/macthrasher/bittensor/bittensor/utils/registration.py" bodystart="276" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="registration_8py_1adfe1ac40e953c8d10f69638d4285dc7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition> int bittensor.utils.registration.registration_diff_unpack</definition>
        <argsstring>(multiprocessing.Array packed_diff)</argsstring>
        <name>registration_diff_unpack</name>
        <qualifiedname>bittensor.utils.registration.registration_diff_unpack</qualifiedname>
        <param>
          <type>multiprocessing.Array</type>
          <declname>packed_diff</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Unpacks the packed two 32-bit integers into one 64-bit integer. Little endian.</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/macthrasher/bittensor/bittensor/utils/registration.py" line="296" column="1" bodyfile="/Users/macthrasher/bittensor/bittensor/utils/registration.py" bodystart="296" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="registration_8py_1a380a8d7db8e86aa4a53bddd74cc80567" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def bittensor.utils.registration.registration_diff_pack</definition>
        <argsstring>(int diff, multiprocessing.Array packed_diff)</argsstring>
        <name>registration_diff_pack</name>
        <qualifiedname>bittensor.utils.registration.registration_diff_pack</qualifiedname>
        <param>
          <type>int</type>
          <declname>diff</declname>
        </param>
        <param>
          <type>multiprocessing.Array</type>
          <declname>packed_diff</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Packs the difficulty into two 32-bit integers. Little endian.</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/macthrasher/bittensor/bittensor/utils/registration.py" line="301" column="1" bodyfile="/Users/macthrasher/bittensor/bittensor/utils/registration.py" bodystart="301" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="registration_8py_1a8121de47c494c0c25272f98cf94633ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def bittensor.utils.registration.update_curr_block</definition>
        <argsstring>(multiprocessing.Array curr_diff, multiprocessing.Array curr_block, multiprocessing.Value curr_block_num, int block_number, bytes block_bytes, int diff, multiprocessing.Lock lock)</argsstring>
        <name>update_curr_block</name>
        <qualifiedname>bittensor.utils.registration.update_curr_block</qualifiedname>
        <param>
          <type>multiprocessing.Array</type>
          <declname>curr_diff</declname>
        </param>
        <param>
          <type>multiprocessing.Array</type>
          <declname>curr_block</declname>
        </param>
        <param>
          <type>multiprocessing.Value</type>
          <declname>curr_block_num</declname>
        </param>
        <param>
          <type>int</type>
          <declname>block_number</declname>
        </param>
        <param>
          <type>bytes</type>
          <declname>block_bytes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>diff</declname>
        </param>
        <param>
          <type>multiprocessing.Lock</type>
          <declname>lock</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/macthrasher/bittensor/bittensor/utils/registration.py" line="307" column="1" bodyfile="/Users/macthrasher/bittensor/bittensor/utils/registration.py" bodystart="307" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="registration_8py_1aeb1393cd6285a7e6607727d113a10c39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def bittensor.utils.registration.get_cpu_count</definition>
        <argsstring>()</argsstring>
        <name>get_cpu_count</name>
        <qualifiedname>bittensor.utils.registration.get_cpu_count</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/macthrasher/bittensor/bittensor/utils/registration.py" line="315" column="1" bodyfile="/Users/macthrasher/bittensor/bittensor/utils/registration.py" bodystart="315" bodyend="322"/>
      </memberdef>
      <memberdef kind="function" id="registration_8py_1ab92650c6d7cfae926cb1e93e8d3356a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Optional[POWSolution]</type>
        <definition> Optional[POWSolution] bittensor.utils.registration.solve_for_difficulty_fast</definition>
        <argsstring>(subtensor, wallet, bool output_in_place=True, Optional[int] num_processes=None, Optional[int] update_interval=None, int n_samples=10, float alpha_=0.80, bool log_verbose=False)</argsstring>
        <name>solve_for_difficulty_fast</name>
        <qualifiedname>bittensor.utils.registration.solve_for_difficulty_fast</qualifiedname>
        <param>
          <type>subtensor</type>
          <defname>subtensor</defname>
        </param>
        <param>
          <type>wallet</type>
          <defname>wallet</defname>
        </param>
        <param>
          <type>bool</type>
          <declname>output_in_place</declname>
          <defval>True</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>num_processes</declname>
          <array>[int]</array>
          <defval>None</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>update_interval</declname>
          <array>[int]</array>
          <defval>None</defval>
        </param>
        <param>
          <type>int</type>
          <declname>n_samples</declname>
          <defval>10</defval>
        </param>
        <param>
          <type>float</type>
          <declname>alpha_</declname>
          <defval>0.80</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>log_verbose</declname>
          <defval>False</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Solves the POW for registration using multiprocessing.
Args:
    subtensor
        Subtensor to connect to for block information and to submit.
    wallet:
        Wallet to use for registration.
    output_in_place: bool
        If true, prints the status in place. Otherwise, prints the status on a new line.
    num_processes: int
        Number of processes to use.
    update_interval: int
        Number of nonces to solve before updating block information.
    n_samples: int
        The number of samples of the hash_rate to keep for the EWMA
    alpha_: float
        The alpha for the EWMA for the hash_rate calculation
    log_verbose: bool
        If true, prints more verbose logging of the registration metrics.
Note: The hash rate is calculated as an exponentially weighted moving average in order to make the measure more robust.
Note: 
- We can also modify the update interval to do smaller blocks of work,
    while still updating the block information after a different number of nonces,
    to increase the transparency of the process while still keeping the speed.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/macthrasher/bittensor/bittensor/utils/registration.py" line="381" column="1" bodyfile="/Users/macthrasher/bittensor/bittensor/utils/registration.py" bodystart="381" bodyend="548"/>
      </memberdef>
      <memberdef kind="function" id="registration_8py_1a8132a159b9571b2b7560380784a35ea0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Tuple[int, int, bytes]</type>
        <definition> Tuple[int, int, bytes] bittensor.utils.registration.get_block_with_retry</definition>
        <argsstring>(&apos;bittensor.Subtensor&apos; subtensor)</argsstring>
        <name>get_block_with_retry</name>
        <qualifiedname>bittensor.utils.registration.get_block_with_retry</qualifiedname>
        <param>
          <type>&apos;<ref refid="classbittensor_1_1__subtensor_1_1subtensor__impl_1_1_subtensor" kindref="compound">bittensor.Subtensor</ref>&apos;</type>
          <declname>subtensor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/macthrasher/bittensor/bittensor/utils/registration.py" line="549" column="1" bodyfile="/Users/macthrasher/bittensor/bittensor/utils/registration.py" bodystart="549" bodyend="557"/>
      </memberdef>
      <memberdef kind="function" id="registration_8py_1af28694b6779b8262dd63843af34aee81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition> int bittensor.utils.registration.check_for_newest_block_and_update</definition>
        <argsstring>(&apos;bittensor.Subtensor&apos; subtensor, int old_block_number, multiprocessing.Array curr_diff, multiprocessing.Array curr_block, multiprocessing.Value curr_block_num, Callable update_curr_block, &apos;multiprocessing.Lock&apos; check_block, List[Solver] solvers, RegistrationStatistics curr_stats)</argsstring>
        <name>check_for_newest_block_and_update</name>
        <qualifiedname>bittensor.utils.registration.check_for_newest_block_and_update</qualifiedname>
        <param>
          <type>&apos;<ref refid="classbittensor_1_1__subtensor_1_1subtensor__impl_1_1_subtensor" kindref="compound">bittensor.Subtensor</ref>&apos;</type>
          <declname>subtensor</declname>
        </param>
        <param>
          <type>int</type>
          <declname>old_block_number</declname>
        </param>
        <param>
          <type>multiprocessing.Array</type>
          <declname>curr_diff</declname>
        </param>
        <param>
          <type>multiprocessing.Array</type>
          <declname>curr_block</declname>
        </param>
        <param>
          <type>multiprocessing.Value</type>
          <declname>curr_block_num</declname>
        </param>
        <param>
          <type>Callable</type>
          <declname>update_curr_block</declname>
        </param>
        <param>
          <type>&apos;multiprocessing.Lock&apos;</type>
          <declname>check_block</declname>
        </param>
        <param>
          <type>List</type>
          <declname>solvers</declname>
          <array>[Solver]</array>
        </param>
        <param>
          <type>RegistrationStatistics</type>
          <declname>curr_stats</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Checks for a new block and updates the current block information if a new block is found.

Args:
    subtensor (:obj:`bittensor.Subtensor`, `required`):
        The subtensor object to use for getting the current block.
    old_block_number (:obj:`int`, `required`):
        The old block number to check against.
    curr_diff (:obj:`multiprocessing.Array`, `required`):
        The current difficulty as a multiprocessing array.
    curr_block (:obj:`multiprocessing.Array`, `required`):
        Where the current block is stored as a multiprocessing array.
    curr_block_num (:obj:`multiprocessing.Value`, `required`):
        Where the current block number is stored as a multiprocessing value.
    update_curr_block (:obj:`Callable`, `required`):
        A function that updates the current block.
    check_block (:obj:`multiprocessing.Lock`, `required`):
        A mp lock that is used to check for a new block.
    solvers (:obj:`List[Solver]`, `required`):
        A list of solvers to update the current block for.
    curr_stats (:obj:`RegistrationStatistics`, `required`):
        The current registration statistics to update.

Returns:
    (int) The current block number.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/macthrasher/bittensor/bittensor/utils/registration.py" line="575" column="1" bodyfile="/Users/macthrasher/bittensor/bittensor/utils/registration.py" bodystart="585" bodyend="635"/>
      </memberdef>
      <memberdef kind="function" id="registration_8py_1a2f3cccb2c5867097e89342a974c7fb9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Optional[POWSolution]</type>
        <definition> Optional[POWSolution] bittensor.utils.registration.solve_for_difficulty_fast_cuda</definition>
        <argsstring>(&apos;bittensor.Subtensor&apos; subtensor, &apos;bittensor.Wallet&apos; wallet, bool output_in_place=True, int update_interval=50_000, int TPB=512, Union[List[int], int] dev_id=0, int n_samples=10, float alpha_=0.80, bool log_verbose=False)</argsstring>
        <name>solve_for_difficulty_fast_cuda</name>
        <qualifiedname>bittensor.utils.registration.solve_for_difficulty_fast_cuda</qualifiedname>
        <param>
          <type>&apos;<ref refid="classbittensor_1_1__subtensor_1_1subtensor__impl_1_1_subtensor" kindref="compound">bittensor.Subtensor</ref>&apos;</type>
          <declname>subtensor</declname>
        </param>
        <param>
          <type>&apos;<ref refid="classbittensor_1_1__wallet_1_1wallet__impl_1_1_wallet" kindref="compound">bittensor.Wallet</ref>&apos;</type>
          <declname>wallet</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>output_in_place</declname>
          <defval>True</defval>
        </param>
        <param>
          <type>int</type>
          <declname>update_interval</declname>
          <defval>50_000</defval>
        </param>
        <param>
          <type>int</type>
          <declname>TPB</declname>
          <defval>512</defval>
        </param>
        <param>
          <type>Union</type>
          <defname>dev_id</defname>
          <array>[List[int]</array>
        </param>
        <param>
          <type>int]</type>
          <declname>dev_id</declname>
          <defname>n_samples</defname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>n_samples</declname>
          <defname>alpha_</defname>
          <defval>10</defval>
        </param>
        <param>
          <type>float</type>
          <declname>alpha_</declname>
          <defname>log_verbose</defname>
          <defval>0.80</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>log_verbose</declname>
          <defval>False</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Solves the registration fast using CUDA
Args:
    subtensor: bittensor.Subtensor
        The subtensor node to grab blocks
    wallet: bittensor.Wallet
        The wallet to register
    output_in_place: bool
        If true, prints the output in place, otherwise prints to new lines
    update_interval: int
        The number of nonces to try before checking for more blocks
    TPB: int
        The number of threads per block. CUDA param that should match the GPU capability
    dev_id: Union[List[int], int]
        The CUDA device IDs to execute the registration on, either a single device or a list of devices
    n_samples: int
        The number of samples of the hash_rate to keep for the EWMA
    alpha_: float
        The alpha for the EWMA for the hash_rate calculation
    log_verbose: bool
        If true, prints more verbose logging of the registration metrics.
Note: The hash rate is calculated as an exponentially weighted moving average in order to make the measure more robust.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/macthrasher/bittensor/bittensor/utils/registration.py" line="636" column="1" bodyfile="/Users/macthrasher/bittensor/bittensor/utils/registration.py" bodystart="636" bodyend="806"/>
      </memberdef>
      <memberdef kind="function" id="registration_8py_1a0f2eeeb9e5dcb082fe114f1de2987415" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>None</type>
        <definition> None bittensor.utils.registration.terminate_workers_and_wait_for_exit</definition>
        <argsstring>(List[multiprocessing.Process] workers)</argsstring>
        <name>terminate_workers_and_wait_for_exit</name>
        <qualifiedname>bittensor.utils.registration.terminate_workers_and_wait_for_exit</qualifiedname>
        <param>
          <type>List</type>
          <declname>workers</declname>
          <array>[multiprocessing.Process]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/macthrasher/bittensor/bittensor/utils/registration.py" line="807" column="1" bodyfile="/Users/macthrasher/bittensor/bittensor/utils/registration.py" bodystart="807" bodyend="812"/>
      </memberdef>
      <memberdef kind="function" id="registration_8py_1acb9814852ff0e114ec1558ccb593bbec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Optional[Dict[str, Any]]</type>
        <definition> Optional[Dict[str, Any]] bittensor.utils.registration.create_pow</definition>
        <argsstring>(subtensor, wallet, bool output_in_place=True, bool cuda=False, Union[List[int], int] dev_id=0, int tpb=256, int num_processes=None, int update_interval=None, bool log_verbose=False)</argsstring>
        <name>create_pow</name>
        <qualifiedname>bittensor.utils.registration.create_pow</qualifiedname>
        <param>
          <type>subtensor</type>
          <defname>subtensor</defname>
        </param>
        <param>
          <type>wallet</type>
          <defname>wallet</defname>
        </param>
        <param>
          <type>bool</type>
          <declname>output_in_place</declname>
          <defval>True</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>cuda</declname>
          <defval>False</defval>
        </param>
        <param>
          <type>Union</type>
          <defname>dev_id</defname>
          <array>[List[int]</array>
        </param>
        <param>
          <type>int]</type>
          <declname>dev_id</declname>
          <defname>tpb</defname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>tpb</declname>
          <defname>num_processes</defname>
          <defval>256</defval>
        </param>
        <param>
          <type>int</type>
          <declname>num_processes</declname>
          <defname>update_interval</defname>
          <defval>None</defval>
        </param>
        <param>
          <type>int</type>
          <declname>update_interval</declname>
          <defname>log_verbose</defname>
          <defval>None</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>log_verbose</declname>
          <defval>False</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/macthrasher/bittensor/bittensor/utils/registration.py" line="813" column="1" bodyfile="/Users/macthrasher/bittensor/bittensor/utils/registration.py" bodystart="823" bodyend="839"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="keyword">import</highlight><highlight class="normal"><sp/>binascii</highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>hashlib</highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>math</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>multiprocessing</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>os</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>random</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>time</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>dataclasses<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>dataclass</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>datetime<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>timedelta</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>queue<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>Empty,<sp/>Full</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>typing<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>Any,<sp/>Callable,<sp/>Dict,<sp/>List,<sp/>Optional,<sp/>Tuple,<sp/>Union</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>backoff</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>bittensor</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>torch</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>Crypto.Hash<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>keccak</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>rich<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>console<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>rich_console</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>rich<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>status<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>rich_status</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>.register_cuda<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>solve_cuda</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="classbittensor_1_1utils_1_1registration_1_1_c_u_d_a_exception" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classbittensor_1_1utils_1_1registration_1_1_c_u_d_a_exception" kindref="compound">CUDAException</ref>(Exception):</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;An<sp/>exception<sp/>raised<sp/>when<sp/>an<sp/>error<sp/>occurs<sp/>in<sp/>the<sp/>CUDA<sp/>environment.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">pass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">hex_bytes_to_u8_list(<sp/>hex_bytes:<sp/>bytes<sp/>):</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>hex_chunks<sp/>=<sp/>[int(hex_bytes[i:i+2],<sp/>16)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(0,<sp/>len(hex_bytes),<sp/>2)]</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hex_chunks</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">u8_list_to_hex(<sp/>values:<sp/>list<sp/>):</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>total<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>val<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>reversed(values):</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total<sp/>=<sp/>(total<sp/>&lt;&lt;<sp/>8)<sp/>+<sp/>val</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>total<sp/></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">create_seal_hash(<sp/>block_hash:bytes,<sp/>nonce:int<sp/>)<sp/>-&gt;<sp/>bytes:</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>block_bytes<sp/>=<sp/>block_hash.encode(</highlight><highlight class="stringliteral">&apos;utf-8&apos;</highlight><highlight class="normal">)[2:]</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>nonce_bytes<sp/>=<sp/>binascii.hexlify(nonce.to_bytes(8,<sp/></highlight><highlight class="stringliteral">&apos;little&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>pre_seal<sp/>=<sp/>nonce_bytes<sp/>+<sp/>block_bytes</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>seal_sh256<sp/>=<sp/>hashlib.sha256(<sp/>bytearray(hex_bytes_to_u8_list(pre_seal))<sp/>).digest()</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>kec<sp/>=<sp/>keccak.new(digest_bits=256)</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>seal<sp/>=<sp/>kec.update(<sp/>seal_sh256<sp/>).digest()</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>seal</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">seal_meets_difficulty(<sp/>seal:bytes,<sp/>difficulty:int<sp/>):</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>seal_number<sp/>=<sp/>int.from_bytes(seal,<sp/></highlight><highlight class="stringliteral">&quot;big&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>product<sp/>=<sp/>seal_number<sp/>*<sp/>difficulty</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>limit<sp/>=<sp/>int(math.pow(2,256))-<sp/>1</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>product<sp/>&gt;<sp/>limit:</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">solve_for_difficulty(<sp/>block_hash,<sp/>difficulty<sp/>):</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>meets<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>nonce<sp/>=<sp/>-1</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>meets:</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nonce<sp/>+=<sp/>1<sp/></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seal<sp/>=<sp/>create_seal_hash(<sp/>block_hash,<sp/>nonce<sp/>)</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>meets<sp/>=<sp/>seal_meets_difficulty(<sp/>seal,<sp/>difficulty<sp/>)</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>nonce<sp/>&gt;<sp/>1:</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nonce,<sp/>seal</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">get_human_readable(num,<sp/>suffix=&quot;H&quot;):</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>unit<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>[</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;K&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;M&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;G&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;T&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;P&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;E&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Z&quot;</highlight><highlight class="normal">]:</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>abs(num)<sp/>&lt;<sp/>1000.0:</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f</highlight><highlight class="stringliteral">&quot;{num:3.1f}{unit}{suffix}&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num<sp/>/=<sp/>1000.0</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f</highlight><highlight class="stringliteral">&quot;{num:.1f}Y{suffix}&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">millify(n:<sp/>int):</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>millnames<sp/>=<sp/>[</highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;<sp/>K&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;<sp/>M&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;<sp/>B&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;<sp/>T&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>float(n)</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>millidx<sp/>=<sp/>max(0,min(len(millnames)-1,</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int(math.floor(0<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>n<sp/>==<sp/>0<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>math.log10(abs(n))/3))))</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;{:.2f}{}&apos;</highlight><highlight class="normal">.format(n<sp/>/<sp/>10**(3<sp/>*<sp/>millidx),<sp/>millnames[millidx])</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">POWNotStale(subtensor:<sp/></highlight><highlight class="stringliteral">&apos;bittensor.Subtensor&apos;</highlight><highlight class="normal">,<sp/>pow_result:<sp/>Dict)<sp/>-&gt;<sp/>bool:</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Returns<sp/>True<sp/>if<sp/>the<sp/>POW<sp/>is<sp/>not<sp/>stale.</highlight></codeline>
<codeline lineno="91"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>This<sp/>means<sp/>the<sp/>block<sp/>the<sp/>POW<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>solved<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>within<sp/>3<sp/>blocks<sp/>of<sp/>the<sp/>current<sp/>block.</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="93"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pow_result[</highlight><highlight class="stringliteral">&apos;block_number&apos;</highlight><highlight class="normal">]<sp/>&gt;=<sp/>subtensor.get_current_block()<sp/>-<sp/>3</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">@dataclass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97" refid="classbittensor_1_1utils_1_1registration_1_1_p_o_w_solution" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classbittensor_1_1utils_1_1registration_1_1_p_o_w_solution" kindref="compound">POWSolution</ref>:</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;A<sp/>solution<sp/>to<sp/>the<sp/>registration<sp/>PoW<sp/>problem.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>nonce:<sp/>int</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>block_number:<sp/>int</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>difficulty:<sp/>int</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>seal:<sp/>bytes</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105" refid="classbittensor_1_1utils_1_1registration_1_1_solver_base" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base" kindref="compound">SolverBase</ref>(multiprocessing.Process):</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="107"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>A<sp/>process<sp/>that<sp/>solves<sp/>the<sp/>registration<sp/>PoW<sp/>problem.</highlight></codeline>
<codeline lineno="108"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="109"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="110"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>proc_num:<sp/>int</highlight></codeline>
<codeline lineno="111"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>number<sp/>of<sp/>the<sp/>process<sp/>being<sp/>created.</highlight></codeline>
<codeline lineno="112"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_proc:<sp/>int</highlight></codeline>
<codeline lineno="113"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>total<sp/>number<sp/>of<sp/>processes<sp/>running.</highlight></codeline>
<codeline lineno="114"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>update_interval:<sp/>int</highlight></codeline>
<codeline lineno="115"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>number<sp/>of<sp/>nonces<sp/>to<sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>to<sp/>solve<sp/>before<sp/>checking<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>a<sp/>new<sp/>block.</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_queue:<sp/>multiprocessing.Queue</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>queue<sp/>to<sp/>put<sp/>the<sp/>process<sp/>number<sp/>when<sp/>a<sp/>process<sp/>finishes<sp/>each<sp/>update_interval.</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Used<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>calculating<sp/>the<sp/>average<sp/>time<sp/>per<sp/>update_interval<sp/>across<sp/>all<sp/>processes.</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solution_queue:<sp/>multiprocessing.Queue</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>queue<sp/>to<sp/>put<sp/>the<sp/>solution<sp/>the<sp/>process<sp/>has<sp/>found<sp/>during<sp/>the<sp/>pow<sp/>solve.</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newBlockEvent:<sp/>multiprocessing.Event</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>event<sp/>to<sp/>set<sp/>by<sp/>the<sp/>main<sp/>process<sp/>when<sp/>a<sp/>new<sp/>block<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>finalized<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>the<sp/>network.</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>solver<sp/>process<sp/>will<sp/>check<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>the<sp/>event<sp/>after<sp/>each<sp/>update_interval.</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>solver<sp/>process<sp/>will<sp/>get<sp/>the<sp/>new<sp/>block<sp/>hash<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>difficulty<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>start<sp/>solving<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>a<sp/>new<sp/>nonce.</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stopEvent:<sp/>multiprocessing.Event</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>event<sp/>to<sp/>set<sp/>by<sp/>the<sp/>main<sp/>process<sp/>when<sp/>all<sp/>the<sp/>solver<sp/>processes<sp/>should<sp/>stop.</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>solver<sp/>process<sp/>will<sp/>check<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>the<sp/>event<sp/>after<sp/>each<sp/>update_interval.</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>solver<sp/>process<sp/>will<sp/>stop<sp/>when<sp/>the<sp/>event<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>set.</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Used<sp/>to<sp/>stop<sp/>the<sp/>solver<sp/>processes<sp/>when<sp/>a<sp/>solution<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>found.</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr_block:<sp/>multiprocessing.Array</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>array<sp/>containing<sp/>this<sp/>process</highlight><highlight class="stringliteral">&apos;s<sp/>current<sp/>block<sp/>hash.</highlight></codeline>
<codeline lineno="132"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>main<sp/>process<sp/>will<sp/>set<sp/>the<sp/>array<sp/>to<sp/>the<sp/>new<sp/>block<sp/>hash<sp/>when<sp/>a<sp/>new<sp/>block<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>finalized<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>the<sp/>network.</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>solver<sp/>process<sp/>will<sp/>get<sp/>the<sp/>new<sp/>block<sp/>hash<sp/></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>this<sp/>array<sp/>when<sp/>newBlockEvent<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>set.</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr_block_num:<sp/>multiprocessing.Value</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>value<sp/>containing<sp/>this<sp/>process</highlight><highlight class="stringliteral">&apos;s<sp/>current<sp/>block<sp/>number.</highlight></codeline>
<codeline lineno="136"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>main<sp/>process<sp/>will<sp/>set<sp/>the<sp/>value<sp/>to<sp/>the<sp/>new<sp/>block<sp/>number<sp/>when<sp/>a<sp/>new<sp/>block<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>finalized<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>the<sp/>network.</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>solver<sp/>process<sp/>will<sp/>get<sp/>the<sp/>new<sp/>block<sp/>number<sp/></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>this<sp/>value<sp/>when<sp/>newBlockEvent<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>set.</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr_diff:<sp/>multiprocessing.Array</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>array<sp/>containing<sp/>this<sp/>process</highlight><highlight class="stringliteral">&apos;s<sp/>current<sp/>difficulty.</highlight></codeline>
<codeline lineno="140"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>main<sp/>process<sp/>will<sp/>set<sp/>the<sp/>array<sp/>to<sp/>the<sp/>new<sp/>difficulty<sp/>when<sp/>a<sp/>new<sp/>block<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>finalized<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>the<sp/>network.</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>solver<sp/>process<sp/>will<sp/>get<sp/>the<sp/>new<sp/>difficulty<sp/></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>this<sp/>array<sp/>when<sp/>newBlockEvent<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>set.</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_block:<sp/>multiprocessing.Lock</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>lock<sp/>to<sp/>prevent<sp/>this<sp/>process<sp/></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>getting<sp/>the<sp/>new<sp/>block<sp/>data<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>the<sp/>main<sp/>process<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>updating<sp/>the<sp/>data.</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>limit:<sp/>int</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>limit<sp/>of<sp/>the<sp/>pow<sp/>solve<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>a<sp/>valid<sp/>solution.</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="147"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>proc_num:<sp/>int</highlight></codeline>
<codeline lineno="148"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>num_proc:<sp/>int</highlight></codeline>
<codeline lineno="149"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>update_interval:<sp/>int</highlight></codeline>
<codeline lineno="150"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>finished_queue:<sp/>multiprocessing.Queue</highlight></codeline>
<codeline lineno="151"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>solution_queue:<sp/>multiprocessing.Queue</highlight></codeline>
<codeline lineno="152"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>newBlockEvent:<sp/>multiprocessing.Event</highlight></codeline>
<codeline lineno="153"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>stopEvent:<sp/>multiprocessing.Event</highlight></codeline>
<codeline lineno="154"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>curr_block:<sp/>multiprocessing.Array</highlight></codeline>
<codeline lineno="155"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>curr_block_num:<sp/>multiprocessing.Value</highlight></codeline>
<codeline lineno="156"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>curr_diff:<sp/>multiprocessing.Array</highlight></codeline>
<codeline lineno="157"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>check_block:<sp/>multiprocessing.Lock</highlight></codeline>
<codeline lineno="158"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>limit:<sp/>int</highlight></codeline>
<codeline lineno="159"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="160"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">__init__(self,<sp/>proc_num,<sp/>num_proc,<sp/>update_interval,<sp/>finished_queue,<sp/>solution_queue,<sp/>stopEvent,<sp/>curr_block,<sp/>curr_block_num,<sp/>curr_diff,<sp/>check_block,<sp/>limit):</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>multiprocessing.Process.__init__(self,<sp/>daemon=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1a0a92bd76af997c045d350237581c7dbc" kindref="member">proc_num</ref><ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1ae6350ee352d6bae1a1556553096a50fb" kindref="member">proc_num</ref><sp/>=<sp/>proc_num</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1ab4d14ed2f95ffa7df895d5f9cc573063" kindref="member">num_proc</ref><ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1a1dad06b7c658325fc30ab1cd0aee2871" kindref="member">num_proc</ref><sp/>=<sp/>num_proc</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1a9e19ddaf1e05033396fd91e88d08c145" kindref="member">update_interval</ref><ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1a4ddb90f211f8cbcd194a0cbebf38fd0f" kindref="member">update_interval</ref><sp/>=<sp/>update_interval</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1ac79d2c033ee35e5d212164a0f87965f0" kindref="member">finished_queue</ref><ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1a0ab7a33e30b47c36f71e2ffab8fbfc5e" kindref="member">finished_queue</ref><sp/>=<sp/>finished_queue</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1a9f758006126a5939ab0da9557ce1abd0" kindref="member">solution_queue</ref><ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1af3cb77a7d93141bb0c8834bc3321abe2" kindref="member">solution_queue</ref><sp/>=<sp/>solution_queue</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1a7805983d63bec73b0d80a6127e6e99fd" kindref="member">newBlockEvent</ref><ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1ac5e62a5e6ef5bd215b6cd7b4ad1d1553" kindref="member">newBlockEvent</ref><sp/>=<sp/>multiprocessing.Event()</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1a7805983d63bec73b0d80a6127e6e99fd" kindref="member">newBlockEvent</ref><ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1ac5e62a5e6ef5bd215b6cd7b4ad1d1553" kindref="member">newBlockEvent</ref>.clear()</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1a715d901084ee2ebbf9e153e4494fe123" kindref="member">curr_block</ref><ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1a454d6294cf9914ab56272d09aa3e5155" kindref="member">curr_block</ref><sp/>=<sp/>curr_block</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1abd0facd26f8a1ae6c2fe73643f8dd64e" kindref="member">curr_block_num</ref><ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1a86c8632c1cbd51b7b41dc21d59f49736" kindref="member">curr_block_num</ref><sp/>=<sp/>curr_block_num</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1af5e25920336661ecc497e4d5db48a37b" kindref="member">curr_diff</ref><ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1a6903e52d697baac85594dbddcb0fff66" kindref="member">curr_diff</ref><sp/>=<sp/>curr_diff</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1ad2148580f9b678611afe4629c73eb19d" kindref="member">check_block</ref><ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1a62e004aa811ff4c7aa196fa442ad5251" kindref="member">check_block</ref><sp/>=<sp/>check_block</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1a10a25240348f4bec5b99dcf56b10088b" kindref="member">stopEvent</ref><ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1ac0fbe4d943cf23cccf00424803e83498" kindref="member">stopEvent</ref><sp/>=<sp/>stopEvent</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1a85f4ede5b1ece531b02964c3c199c6e0" kindref="member">limit</ref><ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1a5302809ae88926e4b269d52a9efcfe9e" kindref="member">limit</ref><sp/>=<sp/>limit</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">run(self):</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>NotImplementedError(</highlight><highlight class="stringliteral">&quot;SolverBase<sp/>is<sp/>an<sp/>abstract<sp/>class&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180" refid="classbittensor_1_1utils_1_1registration_1_1_solver" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classbittensor_1_1utils_1_1registration_1_1_solver" kindref="compound">Solver</ref>(<ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base" kindref="compound">SolverBase</ref>):</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">run(self):</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block_number:<sp/>int</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block_bytes:<sp/>bytes</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block_difficulty:<sp/>int</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nonce_limit<sp/>=<sp/>int(math.pow(2,64))<sp/>-<sp/>1</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Start<sp/>at<sp/>random<sp/>nonce</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nonce_start<sp/>=<sp/>random.randint(<sp/>0,<sp/>nonce_limit<sp/>)</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nonce_end<sp/>=<sp/>nonce_start<sp/>+<sp/>self.<ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1a9e19ddaf1e05033396fd91e88d08c145" kindref="member">update_interval</ref><ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1a4ddb90f211f8cbcd194a0cbebf38fd0f" kindref="member">update_interval</ref></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>self.<ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1a10a25240348f4bec5b99dcf56b10088b" kindref="member">stopEvent</ref><ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1ac0fbe4d943cf23cccf00424803e83498" kindref="member">stopEvent</ref>.is_set():</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1a7805983d63bec73b0d80a6127e6e99fd" kindref="member">newBlockEvent</ref><ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1ac5e62a5e6ef5bd215b6cd7b4ad1d1553" kindref="member">newBlockEvent</ref>.is_set():</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">with</highlight><highlight class="normal"><sp/>self.<ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1ad2148580f9b678611afe4629c73eb19d" kindref="member">check_block</ref><ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1a62e004aa811ff4c7aa196fa442ad5251" kindref="member">check_block</ref>:</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block_number<sp/>=<sp/>self.<ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1abd0facd26f8a1ae6c2fe73643f8dd64e" kindref="member">curr_block_num</ref><ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1a86c8632c1cbd51b7b41dc21d59f49736" kindref="member">curr_block_num</ref>.value</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block_bytes<sp/>=<sp/>bytes(self.<ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1a715d901084ee2ebbf9e153e4494fe123" kindref="member">curr_block</ref><ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1a454d6294cf9914ab56272d09aa3e5155" kindref="member">curr_block</ref>)</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block_difficulty<sp/>=<sp/>registration_diff_unpack(self.<ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1af5e25920336661ecc497e4d5db48a37b" kindref="member">curr_diff</ref><ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1a6903e52d697baac85594dbddcb0fff66" kindref="member">curr_diff</ref>)</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1a7805983d63bec73b0d80a6127e6e99fd" kindref="member">newBlockEvent</ref><ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1ac5e62a5e6ef5bd215b6cd7b4ad1d1553" kindref="member">newBlockEvent</ref>.clear()</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Do<sp/>a<sp/>block<sp/>of<sp/>nonces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solution<sp/>=<sp/>solve_for_nonce_block(self,<sp/>nonce_start,<sp/>nonce_end,<sp/>block_bytes,<sp/>block_difficulty,<sp/>self.<ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1a85f4ede5b1ece531b02964c3c199c6e0" kindref="member">limit</ref><ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1a5302809ae88926e4b269d52a9efcfe9e" kindref="member">limit</ref>,<sp/>block_number)</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>solution<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1a9f758006126a5939ab0da9557ce1abd0" kindref="member">solution_queue</ref><ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1af3cb77a7d93141bb0c8834bc3321abe2" kindref="member">solution_queue</ref>.put(solution)</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Send<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1ac79d2c033ee35e5d212164a0f87965f0" kindref="member">finished_queue</ref><ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1a0ab7a33e30b47c36f71e2ffab8fbfc5e" kindref="member">finished_queue</ref>.put_nowait(self.<ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1a0a92bd76af997c045d350237581c7dbc" kindref="member">proc_num</ref><ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1ae6350ee352d6bae1a1556553096a50fb" kindref="member">proc_num</ref>)</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>Full:</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">pass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nonce_start<sp/>=<sp/>random.randint(<sp/>0,<sp/>nonce_limit<sp/>)</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nonce_start<sp/>=<sp/>nonce_start<sp/>%<sp/>nonce_limit</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nonce_end<sp/>=<sp/>nonce_start<sp/>+<sp/>self.<ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1a9e19ddaf1e05033396fd91e88d08c145" kindref="member">update_interval</ref><ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1a4ddb90f211f8cbcd194a0cbebf38fd0f" kindref="member">update_interval</ref></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215" refid="classbittensor_1_1utils_1_1registration_1_1_c_u_d_a_solver" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classbittensor_1_1utils_1_1registration_1_1_c_u_d_a_solver" kindref="compound">CUDASolver</ref>(<ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base" kindref="compound">SolverBase</ref>):</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>dev_id:<sp/>int</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>TPB:<sp/>int</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">__init__(self,<sp/>proc_num,<sp/>num_proc,<sp/>update_interval,<sp/>finished_queue,<sp/>solution_queue,<sp/>stopEvent,<sp/>curr_block,<sp/>curr_block_num,<sp/>curr_diff,<sp/>check_block,<sp/>limit,<sp/>dev_id:<sp/>int,<sp/>TPB:<sp/>int):</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>super().__init__(proc_num,<sp/>num_proc,<sp/>update_interval,<sp/>finished_queue,<sp/>solution_queue,<sp/>stopEvent,<sp/>curr_block,<sp/>curr_block_num,<sp/>curr_diff,<sp/>check_block,<sp/>limit)</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1utils_1_1registration_1_1_c_u_d_a_solver_1a73ce5e6e755aefb17e35d975c36a7f7e" kindref="member">dev_id</ref><ref refid="classbittensor_1_1utils_1_1registration_1_1_c_u_d_a_solver_1aa9cf66b49b7e77e54000170c48f05779" kindref="member">dev_id</ref><sp/>=<sp/>dev_id</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1utils_1_1registration_1_1_c_u_d_a_solver_1a242d65d1d78cb31d1079ef3a5535c4cf" kindref="member">TPB</ref><ref refid="classbittensor_1_1utils_1_1registration_1_1_c_u_d_a_solver_1a9ef23801a925d5b97346960e2fc7797a" kindref="member">TPB</ref><sp/>=<sp/>TPB</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">run(self):</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block_number:<sp/>int<sp/>=<sp/>0<sp/></highlight><highlight class="comment">#<sp/>dummy<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block_bytes:<sp/>bytes<sp/>=<sp/>b</highlight><highlight class="stringliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>*<sp/>32<sp/></highlight><highlight class="comment">#<sp/>dummy<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block_difficulty:<sp/>int<sp/>=<sp/>int(math.pow(2,64))<sp/>-<sp/>1<sp/></highlight><highlight class="comment">#<sp/>dummy<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nonce_limit<sp/>=<sp/>int(math.pow(2,64))<sp/>-<sp/>1<sp/></highlight><highlight class="comment">#<sp/>U64MAX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Start<sp/>at<sp/>random<sp/>nonce</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nonce_start<sp/>=<sp/>random.randint(<sp/>0,<sp/>nonce_limit<sp/>)</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>self.<ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1a10a25240348f4bec5b99dcf56b10088b" kindref="member">stopEvent</ref><ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1ac0fbe4d943cf23cccf00424803e83498" kindref="member">stopEvent</ref>.is_set():</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1a7805983d63bec73b0d80a6127e6e99fd" kindref="member">newBlockEvent</ref><ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1ac5e62a5e6ef5bd215b6cd7b4ad1d1553" kindref="member">newBlockEvent</ref>.is_set():</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">with</highlight><highlight class="normal"><sp/>self.<ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1ad2148580f9b678611afe4629c73eb19d" kindref="member">check_block</ref><ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1a62e004aa811ff4c7aa196fa442ad5251" kindref="member">check_block</ref>:</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block_number<sp/>=<sp/>self.<ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1abd0facd26f8a1ae6c2fe73643f8dd64e" kindref="member">curr_block_num</ref><ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1a86c8632c1cbd51b7b41dc21d59f49736" kindref="member">curr_block_num</ref>.value</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block_bytes<sp/>=<sp/>bytes(self.<ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1a715d901084ee2ebbf9e153e4494fe123" kindref="member">curr_block</ref><ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1a454d6294cf9914ab56272d09aa3e5155" kindref="member">curr_block</ref>)</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block_difficulty<sp/>=<sp/>registration_diff_unpack(self.<ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1af5e25920336661ecc497e4d5db48a37b" kindref="member">curr_diff</ref><ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1a6903e52d697baac85594dbddcb0fff66" kindref="member">curr_diff</ref>)</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1a7805983d63bec73b0d80a6127e6e99fd" kindref="member">newBlockEvent</ref><ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1ac5e62a5e6ef5bd215b6cd7b4ad1d1553" kindref="member">newBlockEvent</ref>.clear()</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Do<sp/>a<sp/>block<sp/>of<sp/>nonces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solution<sp/>=<sp/>solve_for_nonce_block_cuda(self,<sp/>nonce_start,<sp/>self.<ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1a9e19ddaf1e05033396fd91e88d08c145" kindref="member">update_interval</ref><ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1a4ddb90f211f8cbcd194a0cbebf38fd0f" kindref="member">update_interval</ref>,<sp/>block_bytes,<sp/>block_difficulty,<sp/>self.<ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1a85f4ede5b1ece531b02964c3c199c6e0" kindref="member">limit</ref><ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1a5302809ae88926e4b269d52a9efcfe9e" kindref="member">limit</ref>,<sp/>block_number,<sp/>self.<ref refid="classbittensor_1_1utils_1_1registration_1_1_c_u_d_a_solver_1a73ce5e6e755aefb17e35d975c36a7f7e" kindref="member">dev_id</ref><ref refid="classbittensor_1_1utils_1_1registration_1_1_c_u_d_a_solver_1aa9cf66b49b7e77e54000170c48f05779" kindref="member">dev_id</ref>,<sp/>self.<ref refid="classbittensor_1_1utils_1_1registration_1_1_c_u_d_a_solver_1a242d65d1d78cb31d1079ef3a5535c4cf" kindref="member">TPB</ref><ref refid="classbittensor_1_1utils_1_1registration_1_1_c_u_d_a_solver_1a9ef23801a925d5b97346960e2fc7797a" kindref="member">TPB</ref>)</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>solution<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1a9f758006126a5939ab0da9557ce1abd0" kindref="member">solution_queue</ref><ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1af3cb77a7d93141bb0c8834bc3321abe2" kindref="member">solution_queue</ref>.put(solution)</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Signal<sp/>that<sp/>a<sp/>nonce_block<sp/>was<sp/>finished<sp/>using<sp/>queue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>send<sp/>our<sp/>proc_num</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1ac79d2c033ee35e5d212164a0f87965f0" kindref="member">finished_queue</ref><ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1a0ab7a33e30b47c36f71e2ffab8fbfc5e" kindref="member">finished_queue</ref>.put(self.<ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1a0a92bd76af997c045d350237581c7dbc" kindref="member">proc_num</ref><ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1ae6350ee352d6bae1a1556553096a50fb" kindref="member">proc_num</ref>)</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>Full:</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">pass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>increase<sp/>nonce<sp/>by<sp/>number<sp/>of<sp/>nonces<sp/>processed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nonce_start<sp/>+=<sp/>self.<ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1a9e19ddaf1e05033396fd91e88d08c145" kindref="member">update_interval</ref><ref refid="classbittensor_1_1utils_1_1registration_1_1_solver_base_1a4ddb90f211f8cbcd194a0cbebf38fd0f" kindref="member">update_interval</ref><sp/>*<sp/>self.<ref refid="classbittensor_1_1utils_1_1registration_1_1_c_u_d_a_solver_1a242d65d1d78cb31d1079ef3a5535c4cf" kindref="member">TPB</ref><ref refid="classbittensor_1_1utils_1_1registration_1_1_c_u_d_a_solver_1a9ef23801a925d5b97346960e2fc7797a" kindref="member">TPB</ref><sp/></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nonce_start<sp/>=<sp/>nonce_start<sp/>%<sp/>nonce_limit</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">solve_for_nonce_block_cuda(solver:<sp/>CUDASolver,<sp/>nonce_start:<sp/>int,<sp/>update_interval:<sp/>int,<sp/>block_bytes:<sp/>bytes,<sp/>difficulty:<sp/>int,<sp/>limit:<sp/>int,<sp/>block_number:<sp/>int,<sp/>dev_id:<sp/>int,<sp/>TPB:<sp/>int)<sp/>-&gt;<sp/>Optional[POWSolution]:</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Tries<sp/>to<sp/>solve<sp/>the<sp/>POW<sp/>on<sp/>a<sp/>CUDA<sp/>device<sp/>for<sp/>a<sp/>block<sp/>of<sp/>nonces<sp/>(nonce_start,<sp/>nonce_start<sp/>+<sp/>update_interval<sp/>*<sp/>TPB&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>solution,<sp/>seal<sp/>=<sp/>solve_cuda(nonce_start,</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>update_interval,</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TPB,</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block_bytes,<sp/></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block_number,</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>difficulty,<sp/></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>limit,</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dev_id)</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(solution<sp/>!=<sp/>-1):</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Check<sp/>if<sp/>solution<sp/>is<sp/>valid<sp/>(i.e.<sp/>not<sp/>-1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classbittensor_1_1utils_1_1registration_1_1_p_o_w_solution" kindref="compound">POWSolution</ref>(solution,<sp/>block_number,<sp/>difficulty,<sp/>seal)</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">solve_for_nonce_block(solver:<sp/>Solver,<sp/>nonce_start:<sp/>int,<sp/>nonce_end:<sp/>int,<sp/>block_bytes:<sp/>bytes,<sp/>difficulty:<sp/>int,<sp/>limit:<sp/>int,<sp/>block_number:<sp/>int)<sp/>-&gt;<sp/>Optional[POWSolution]:</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Tries<sp/>to<sp/>solve<sp/>the<sp/>POW<sp/>for<sp/>a<sp/>block<sp/>of<sp/>nonces<sp/>(nonce_start,<sp/>nonce_end)&quot;&quot;&quot;</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>nonce<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(nonce_start,<sp/>nonce_end):</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Create<sp/>seal.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nonce_bytes<sp/>=<sp/>binascii.hexlify(nonce.to_bytes(8,<sp/></highlight><highlight class="stringliteral">&apos;little&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pre_seal<sp/>=<sp/>nonce_bytes<sp/>+<sp/>block_bytes</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seal_sh256<sp/>=<sp/>hashlib.sha256(<sp/>bytearray(hex_bytes_to_u8_list(pre_seal))<sp/>).digest()</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kec<sp/>=<sp/>keccak.new(digest_bits=256)</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seal<sp/>=<sp/>kec.update(<sp/>seal_sh256<sp/>).digest()</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seal_number<sp/>=<sp/>int.from_bytes(seal,<sp/></highlight><highlight class="stringliteral">&quot;big&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Check<sp/>if<sp/>seal<sp/>meets<sp/>difficulty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>product<sp/>=<sp/>seal_number<sp/>*<sp/>difficulty</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>product<sp/>&lt;<sp/>limit:</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Found<sp/>a<sp/>solution,<sp/>save<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classbittensor_1_1utils_1_1registration_1_1_p_o_w_solution" kindref="compound">POWSolution</ref>(nonce,<sp/>block_number,<sp/>difficulty,<sp/>seal)</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">registration_diff_unpack(packed_diff:<sp/>multiprocessing.Array)<sp/>-&gt;<sp/>int:</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Unpacks<sp/>the<sp/>packed<sp/>two<sp/>32-bit<sp/>integers<sp/>into<sp/>one<sp/>64-bit<sp/>integer.<sp/>Little<sp/>endian.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>int(packed_diff[0]<sp/>&lt;&lt;<sp/>32<sp/>|<sp/>packed_diff[1])</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">registration_diff_pack(diff:<sp/>int,<sp/>packed_diff:<sp/>multiprocessing.Array):</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Packs<sp/>the<sp/>difficulty<sp/>into<sp/>two<sp/>32-bit<sp/>integers.<sp/>Little<sp/>endian.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>packed_diff[0]<sp/>=<sp/>diff<sp/>&gt;&gt;<sp/>32</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>packed_diff[1]<sp/>=<sp/>diff<sp/>&amp;<sp/>0xFFFFFFFF<sp/></highlight><highlight class="comment">#<sp/>low<sp/>32<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">update_curr_block(curr_diff:<sp/>multiprocessing.Array,<sp/>curr_block:<sp/>multiprocessing.Array,<sp/>curr_block_num:<sp/>multiprocessing.Value,<sp/>block_number:<sp/>int,<sp/>block_bytes:<sp/>bytes,<sp/>diff:<sp/>int,<sp/>lock:<sp/>multiprocessing.Lock):</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">with</highlight><highlight class="normal"><sp/>lock:</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr_block_num.value<sp/>=<sp/>block_number</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(64):</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr_block[i]<sp/>=<sp/>block_bytes[i]</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registration_diff_pack(diff,<sp/>curr_diff)</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">get_cpu_count():</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>len(os.sched_getaffinity(0))</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>AttributeError:</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>OSX<sp/>does<sp/>not<sp/>have<sp/>sched_getaffinity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os.cpu_count()</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="preprocessor">@dataclass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323" refid="classbittensor_1_1utils_1_1registration_1_1_registration_statistics" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classbittensor_1_1utils_1_1registration_1_1_registration_statistics" kindref="compound">RegistrationStatistics</ref>:</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Statistics<sp/>for<sp/>a<sp/>registration.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>time_spent_total:<sp/>float</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>rounds_total:<sp/>int</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>time_average:<sp/>float</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>time_spent:<sp/>float</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>hash_rate_perpetual:<sp/>float</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>hash_rate:<sp/>float</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>difficulty:<sp/>int</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>block_number:<sp/>int</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>block_hash:<sp/>bytes</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336" refid="classbittensor_1_1utils_1_1registration_1_1_registration_statistics_logger" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classbittensor_1_1utils_1_1registration_1_1_registration_statistics_logger" kindref="compound">RegistrationStatisticsLogger</ref>:</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Logs<sp/>statistics<sp/>for<sp/>a<sp/>registration.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>console:<sp/>rich_console.Console</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>status:<sp/>Optional[rich_status.Status]<sp/></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">__init__(<sp/>self,<sp/>console:<sp/>rich_console.Console,<sp/>output_in_place:<sp/>bool<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal">)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1utils_1_1registration_1_1_registration_statistics_logger_1a6963bd1b13b6d6e87fe576056ca77ece" kindref="member">console</ref><ref refid="classbittensor_1_1utils_1_1registration_1_1_registration_statistics_logger_1ac78679aa39d73d467e9a1b3f1d53d82f" kindref="member">console</ref><sp/>=<sp/>console</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>output_in_place:</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1utils_1_1registration_1_1_registration_statistics_logger_1a36d7a1572884c966d9a2e0249baebeda" kindref="member">status</ref><ref refid="classbittensor_1_1utils_1_1registration_1_1_registration_statistics_logger_1abb7f722834fc112bfb567b67ea4ca50c" kindref="member">status</ref><sp/>=<sp/>self.<ref refid="classbittensor_1_1utils_1_1registration_1_1_registration_statistics_logger_1a6963bd1b13b6d6e87fe576056ca77ece" kindref="member">console</ref><ref refid="classbittensor_1_1utils_1_1registration_1_1_registration_statistics_logger_1ac78679aa39d73d467e9a1b3f1d53d82f" kindref="member">console</ref>.status(</highlight><highlight class="stringliteral">&quot;Solving&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1utils_1_1registration_1_1_registration_statistics_logger_1a36d7a1572884c966d9a2e0249baebeda" kindref="member">status</ref><ref refid="classbittensor_1_1utils_1_1registration_1_1_registration_statistics_logger_1abb7f722834fc112bfb567b67ea4ca50c" kindref="member">status</ref><sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">start(<sp/>self<sp/>)<sp/>-&gt;<sp/>None:</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classbittensor_1_1utils_1_1registration_1_1_registration_statistics_logger_1a36d7a1572884c966d9a2e0249baebeda" kindref="member">status</ref><ref refid="classbittensor_1_1utils_1_1registration_1_1_registration_statistics_logger_1abb7f722834fc112bfb567b67ea4ca50c" kindref="member">status</ref><sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1utils_1_1registration_1_1_registration_statistics_logger_1a36d7a1572884c966d9a2e0249baebeda" kindref="member">status</ref><ref refid="classbittensor_1_1utils_1_1registration_1_1_registration_statistics_logger_1abb7f722834fc112bfb567b67ea4ca50c" kindref="member">status</ref>.start()</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">stop(<sp/>self<sp/>)<sp/>-&gt;<sp/>None:</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classbittensor_1_1utils_1_1registration_1_1_registration_statistics_logger_1a36d7a1572884c966d9a2e0249baebeda" kindref="member">status</ref><ref refid="classbittensor_1_1utils_1_1registration_1_1_registration_statistics_logger_1abb7f722834fc112bfb567b67ea4ca50c" kindref="member">status</ref><sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1utils_1_1registration_1_1_registration_statistics_logger_1a36d7a1572884c966d9a2e0249baebeda" kindref="member">status</ref><ref refid="classbittensor_1_1utils_1_1registration_1_1_registration_statistics_logger_1abb7f722834fc112bfb567b67ea4ca50c" kindref="member">status</ref>.stop()</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">get_status_message(cls,<sp/>stats:<sp/>RegistrationStatistics,<sp/>verbose:<sp/>bool<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal">)<sp/>-&gt;<sp/>str:</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message<sp/>=<sp/>\</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Solving\n&quot;</highlight><highlight class="normal"><sp/>+<sp/>\</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&quot;Time<sp/>Spent<sp/>(total):<sp/>[bold<sp/>white]{timedelta(seconds=stats.time_spent_total)}[/bold<sp/>white]\n&quot;</highlight><highlight class="normal"><sp/>+<sp/>\</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&quot;Time<sp/>Spent<sp/>This<sp/>Round:<sp/>{timedelta(seconds=stats.time_spent)}\n&quot;</highlight><highlight class="normal"><sp/>+<sp/>\</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&quot;Time<sp/>Spent<sp/>Average:<sp/>{timedelta(seconds=stats.time_average)}\n&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>verbose<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>+<sp/>\</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&quot;Registration<sp/>Difficulty:<sp/>[bold<sp/>white]{millify(stats.difficulty)}[/bold<sp/>white]\n&quot;</highlight><highlight class="normal"><sp/>+<sp/>\</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&quot;Iters<sp/>(Inst/Perp):<sp/>[bold<sp/>white]{get_human_readable(stats.hash_rate,<sp/>&apos;H&apos;)}/s<sp/>/<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>\</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&quot;{get_human_readable(stats.hash_rate_perpetual,<sp/>&apos;H&apos;)}/s[/bold<sp/>white]\n&quot;</highlight><highlight class="normal"><sp/>+<sp/>\</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&quot;Block<sp/>Number:<sp/>[bold<sp/>white]{stats.block_number}[/bold<sp/>white]\n&quot;</highlight><highlight class="normal"><sp/>+<sp/>\</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&quot;Block<sp/>Hash:<sp/>[bold<sp/>white]{stats.block_hash.encode(&apos;utf-8&apos;)}[/bold<sp/>white]\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>message</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">update(<sp/>self,<sp/>stats:<sp/>RegistrationStatistics,<sp/>verbose:<sp/>bool<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"><sp/>)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classbittensor_1_1utils_1_1registration_1_1_registration_statistics_logger_1a36d7a1572884c966d9a2e0249baebeda" kindref="member">status</ref><ref refid="classbittensor_1_1utils_1_1registration_1_1_registration_statistics_logger_1abb7f722834fc112bfb567b67ea4ca50c" kindref="member">status</ref><sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1utils_1_1registration_1_1_registration_statistics_logger_1a36d7a1572884c966d9a2e0249baebeda" kindref="member">status</ref><ref refid="classbittensor_1_1utils_1_1registration_1_1_registration_statistics_logger_1abb7f722834fc112bfb567b67ea4ca50c" kindref="member">status</ref>.update(<sp/>self.<ref refid="classbittensor_1_1utils_1_1registration_1_1_registration_statistics_logger_1a413913a29ac5718515fa2569b0542095" kindref="member">get_status_message</ref>(stats,<sp/>verbose=verbose)<sp/>)</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1utils_1_1registration_1_1_registration_statistics_logger_1a6963bd1b13b6d6e87fe576056ca77ece" kindref="member">console</ref><ref refid="classbittensor_1_1utils_1_1registration_1_1_registration_statistics_logger_1ac78679aa39d73d467e9a1b3f1d53d82f" kindref="member">console</ref>.log(<sp/>self.<ref refid="classbittensor_1_1utils_1_1registration_1_1_registration_statistics_logger_1a413913a29ac5718515fa2569b0542095" kindref="member">get_status_message</ref>(stats,<sp/>verbose=verbose),<sp/>)</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">solve_for_difficulty_fast(<sp/>subtensor,<sp/>wallet,<sp/>output_in_place:<sp/>bool<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>num_processes:<sp/>Optional[int]<sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">,<sp/>update_interval:<sp/>Optional[int]<sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">,<sp/><sp/>n_samples:<sp/>int<sp/>=<sp/>10,<sp/>alpha_:<sp/>float<sp/>=<sp/>0.80,<sp/>log_verbose:<sp/>bool<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"><sp/>)<sp/>-&gt;<sp/>Optional[POWSolution]:</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="383"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Solves<sp/>the<sp/>POW<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>registration<sp/>using<sp/>multiprocessing.</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subtensor</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Subtensor<sp/>to<sp/>connect<sp/>to<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>block<sp/>information<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>to<sp/>submit.</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wallet:</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Wallet<sp/>to<sp/>use<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>registration.</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_in_place:<sp/>bool</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>true,<sp/>prints<sp/>the<sp/>status<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>place.<sp/>Otherwise,<sp/>prints<sp/>the<sp/>status<sp/>on<sp/>a<sp/>new<sp/>line.</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_processes:<sp/>int</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Number<sp/>of<sp/>processes<sp/>to<sp/>use.</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>update_interval:<sp/>int</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Number<sp/>of<sp/>nonces<sp/>to<sp/>solve<sp/>before<sp/>updating<sp/>block<sp/>information.</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_samples:<sp/>int</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>number<sp/>of<sp/>samples<sp/>of<sp/>the<sp/>hash_rate<sp/>to<sp/>keep<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>the<sp/>EWMA</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alpha_:<sp/>float</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>alpha<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>the<sp/>EWMA<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>the<sp/>hash_rate<sp/>calculation</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_verbose:<sp/>bool</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>true,<sp/>prints<sp/>more<sp/>verbose<sp/>logging<sp/>of<sp/>the<sp/>registration<sp/>metrics.</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>Note:<sp/>The<sp/>hash<sp/>rate<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>calculated<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>an<sp/>exponentially<sp/>weighted<sp/>moving<sp/>average<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>order<sp/>to<sp/>make<sp/>the<sp/>measure<sp/>more<sp/>robust.</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>Note:<sp/></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>We<sp/>can<sp/>also<sp/>modify<sp/>the<sp/>update<sp/>interval<sp/>to<sp/>do<sp/>smaller<sp/>blocks<sp/>of<sp/>work,</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>still<sp/>updating<sp/>the<sp/>block<sp/>information<sp/>after<sp/>a<sp/>different<sp/>number<sp/>of<sp/>nonces,</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>increase<sp/>the<sp/>transparency<sp/>of<sp/>the<sp/>process<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>still<sp/>keeping<sp/>the<sp/>speed.</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="407"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>num_processes<sp/>==<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>get<sp/>the<sp/>number<sp/>of<sp/>allowed<sp/>processes<sp/>for<sp/>this<sp/>process</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_processes<sp/>=<sp/>min(1,<sp/>get_cpu_count())</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>update_interval<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>update_interval<sp/>=<sp/>50_000</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>limit<sp/>=<sp/>int(math.pow(2,256))<sp/>-<sp/>1</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>curr_block<sp/>=<sp/>multiprocessing.Array(</highlight><highlight class="stringliteral">&apos;h&apos;</highlight><highlight class="normal">,<sp/>64,<sp/>lock=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">#<sp/>byte<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>curr_block_num<sp/>=<sp/>multiprocessing.Value(</highlight><highlight class="stringliteral">&apos;i&apos;</highlight><highlight class="normal">,<sp/>0,<sp/>lock=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">#<sp/>int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>curr_diff<sp/>=<sp/>multiprocessing.Array(</highlight><highlight class="stringliteral">&apos;Q&apos;</highlight><highlight class="normal">,<sp/>[0,<sp/>0],<sp/>lock=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">#<sp/>[high,<sp/>low]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Establish<sp/>communication<sp/>queues</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>stopEvent<sp/>=<sp/>multiprocessing.Event()</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>stopEvent.clear()</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>solution_queue<sp/>=<sp/>multiprocessing.Queue()</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>finished_queues<sp/>=<sp/>[multiprocessing.Queue()<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>_<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(num_processes)]</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>check_block<sp/>=<sp/>multiprocessing.Lock()</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Start<sp/>consumers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>solvers<sp/>=<sp/>[<sp/><ref refid="classbittensor_1_1utils_1_1registration_1_1_solver" kindref="compound">Solver</ref>(i,<sp/>num_processes,<sp/>update_interval,<sp/>finished_queues[i],<sp/>solution_queue,<sp/>stopEvent,<sp/>curr_block,<sp/>curr_block_num,<sp/>curr_diff,<sp/>check_block,<sp/>limit)</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(num_processes)<sp/>]</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Get<sp/>first<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>block_number<sp/>=<sp/>subtensor.get_current_block()</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>difficulty<sp/>=<sp/>subtensor.difficulty</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>block_hash<sp/>=<sp/>subtensor.substrate.get_block_hash(<sp/>block_number<sp/>)</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>block_hash<sp/>==<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block_hash<sp/>=<sp/>subtensor.substrate.get_block_hash(<sp/>block_number<sp/>)</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>block_bytes<sp/>=<sp/>block_hash.encode(</highlight><highlight class="stringliteral">&apos;utf-8&apos;</highlight><highlight class="normal">)[2:]</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>old_block_number<sp/>=<sp/>block_number</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Set<sp/>to<sp/>current<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>update_curr_block(curr_diff,<sp/>curr_block,<sp/>curr_block_num,<sp/>block_number,<sp/>block_bytes,<sp/>difficulty,<sp/>check_block)</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Set<sp/>new<sp/>block<sp/>events<sp/>for<sp/>each<sp/>solver<sp/>to<sp/>start<sp/>at<sp/>the<sp/>initial<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>worker<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>solvers:</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>worker.newBlockEvent.set()</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>worker<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>solvers:</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>worker.start()<sp/></highlight><highlight class="comment">#<sp/>start<sp/>the<sp/>solver<sp/>processes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>start_time<sp/>=<sp/>time.time()<sp/></highlight><highlight class="comment">#<sp/>time<sp/>that<sp/>the<sp/>registration<sp/>started</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>time_last<sp/>=<sp/>start_time<sp/></highlight><highlight class="comment">#<sp/>time<sp/>that<sp/>the<sp/>last<sp/>work<sp/>blocks<sp/>completed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>curr_stats<sp/>=<sp/><ref refid="classbittensor_1_1utils_1_1registration_1_1_registration_statistics" kindref="compound">RegistrationStatistics</ref>(</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time_spent_total<sp/>=<sp/>0.0,</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time_average<sp/>=<sp/>0.0,</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rounds_total<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time_spent<sp/>=<sp/>0.0,</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash_rate_perpetual<sp/>=<sp/>0.0,</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash_rate<sp/>=<sp/>0.0,</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>difficulty<sp/>=<sp/>difficulty,</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block_number<sp/>=<sp/>block_number,</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block_hash<sp/>=<sp/>block_hash</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>start_time_perpetual<sp/>=<sp/>time.time()</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>console<sp/>=<sp/>bittensor.__console__</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>logger<sp/>=<sp/><ref refid="classbittensor_1_1utils_1_1registration_1_1_registration_statistics_logger" kindref="compound">RegistrationStatisticsLogger</ref>(console,<sp/>output_in_place)</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>logger.start()</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>solution<sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>hash_rates<sp/>=<sp/>[0]<sp/>*<sp/>n_samples<sp/></highlight><highlight class="comment">#<sp/>The<sp/>last<sp/>n<sp/>true<sp/>hash_rates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>weights<sp/>=<sp/>[alpha_<sp/>**<sp/>i<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(n_samples)]<sp/></highlight><highlight class="comment">#<sp/>weights<sp/>decay<sp/>by<sp/>alpha</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>wallet.is_registered(subtensor):</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Wait<sp/>until<sp/>a<sp/>solver<sp/>finds<sp/>a<sp/>solution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solution<sp/>=<sp/>solution_queue.get(block=</highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>timeout=0.25)</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>solution<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>Empty:</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>No<sp/>solution<sp/>found,<sp/>try<sp/>again</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">pass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>check<sp/>for<sp/>new<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>old_block_number<sp/>=<sp/>check_for_newest_block_and_update(</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subtensor<sp/>=<sp/>subtensor,</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>old_block_number=old_block_number,</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr_diff=curr_diff,</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr_block=curr_block,</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr_block_num=curr_block_num,</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr_stats=curr_stats,</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>update_curr_block=update_curr_block,</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_block=check_block,</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solvers=solvers</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_time<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>finished_queue<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>finished_queues:</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>proc_num<sp/>=<sp/>finished_queue.get(timeout=0.1)</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_time<sp/>+=<sp/>1</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>Empty:</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time_now<sp/>=<sp/>time.time()<sp/></highlight><highlight class="comment">#<sp/>get<sp/>current<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time_since_last<sp/>=<sp/>time_now<sp/>-<sp/>time_last<sp/></highlight><highlight class="comment">#<sp/>get<sp/>time<sp/>since<sp/>last<sp/>work<sp/>block(s)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>num_time<sp/>&gt;<sp/>0<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>time_since_last<sp/>&gt;<sp/>0.0:</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>create<sp/>EWMA<sp/>of<sp/>the<sp/>hash_rate<sp/>to<sp/>make<sp/>measure<sp/>more<sp/>robust</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash_rate_<sp/>=<sp/>(num_time<sp/>*<sp/>update_interval)<sp/>/<sp/>time_since_last</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash_rates.append(hash_rate_)</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash_rates.pop(0)<sp/></highlight><highlight class="comment">#<sp/>remove<sp/>the<sp/>0th<sp/>data<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr_stats.hash_rate<sp/>=<sp/>sum([hash_rates[i]*weights[i]<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(n_samples)])/(sum(weights))</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>update<sp/>time<sp/>last<sp/>to<sp/>now</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time_last<sp/>=<sp/>time_now</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr_stats.time_average<sp/>=<sp/>(curr_stats.time_average*curr_stats.rounds_total<sp/>+<sp/>curr_stats.time_spent)/(curr_stats.rounds_total+num_time)</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr_stats.rounds_total<sp/>+=<sp/>num_time</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Update<sp/>stats</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr_stats.time_spent<sp/>=<sp/>time_since_last</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_time_spent_total<sp/>=<sp/>time_now<sp/>-<sp/>start_time_perpetual</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr_stats.hash_rate_perpetual<sp/>=<sp/>(curr_stats.rounds_total*update_interval)/<sp/>new_time_spent_total</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr_stats.time_spent_total<sp/>=<sp/>new_time_spent_total</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Update<sp/>the<sp/>logger</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logger.update(curr_stats,<sp/>verbose=log_verbose)</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>exited<sp/>while,<sp/>solution<sp/>contains<sp/>the<sp/>nonce<sp/>or<sp/>wallet<sp/>is<sp/>registered</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>stopEvent.set()<sp/></highlight><highlight class="comment">#<sp/>stop<sp/>all<sp/>other<sp/>processes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>logger.stop()</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>terminate<sp/>and<sp/>wait<sp/>for<sp/>all<sp/>solvers<sp/>to<sp/>exit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>terminate_workers_and_wait_for_exit(solvers)</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>solution</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight><highlight class="preprocessor">@backoff.on_exception</highlight><highlight class="normal">(backoff.constant,</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Exception,</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>interval=1,</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_tries=3)</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">get_block_with_retry(subtensor:<sp/></highlight><highlight class="stringliteral">&apos;bittensor.Subtensor&apos;</highlight><highlight class="normal">)<sp/>-&gt;<sp/>Tuple[int,<sp/>int,<sp/>bytes]:</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>block_number<sp/>=<sp/>subtensor.get_current_block()</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>difficulty<sp/>=<sp/>subtensor.difficulty</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>block_hash<sp/>=<sp/>subtensor.substrate.get_block_hash(<sp/>block_number<sp/>)</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>block_hash<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>Exception(</highlight><highlight class="stringliteral">&quot;Network<sp/>error.<sp/>Could<sp/>not<sp/>connect<sp/>to<sp/>substrate<sp/>to<sp/>get<sp/>block<sp/>hash&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>block_number,<sp/>difficulty,<sp/>block_hash</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558" refid="classbittensor_1_1utils_1_1registration_1_1_using_spawn_start_method" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classbittensor_1_1utils_1_1registration_1_1_using_spawn_start_method" kindref="compound">UsingSpawnStartMethod</ref>():</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">__init__(self,<sp/>force:<sp/>bool<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1utils_1_1registration_1_1_using_spawn_start_method_1a81d5b453cb08b3e03b248138084e8bbf" kindref="member">_old_start_method</ref><sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1utils_1_1registration_1_1_using_spawn_start_method_1abd0d355ade3d143b65aec45c63d01b5a" kindref="member">_force</ref><sp/>=<sp/>force</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">__enter__(self):</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1utils_1_1registration_1_1_using_spawn_start_method_1a81d5b453cb08b3e03b248138084e8bbf" kindref="member">_old_start_method</ref><sp/>=<sp/>multiprocessing.get_start_method(allow_none=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classbittensor_1_1utils_1_1registration_1_1_using_spawn_start_method_1a81d5b453cb08b3e03b248138084e8bbf" kindref="member">_old_start_method</ref><sp/>==<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbittensor_1_1utils_1_1registration_1_1_using_spawn_start_method_1a81d5b453cb08b3e03b248138084e8bbf" kindref="member">_old_start_method</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&apos;spawn&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">#<sp/>default<sp/>to<sp/>spawn</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>multiprocessing.set_start_method(</highlight><highlight class="stringliteral">&apos;spawn&apos;</highlight><highlight class="normal">,<sp/>force=self.<ref refid="classbittensor_1_1utils_1_1registration_1_1_using_spawn_start_method_1abd0d355ade3d143b65aec45c63d01b5a" kindref="member">_force</ref>)</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">__exit__(self,<sp/>*args):</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>restore<sp/>the<sp/>old<sp/>start<sp/>method</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>multiprocessing.set_start_method(self.<ref refid="classbittensor_1_1utils_1_1registration_1_1_using_spawn_start_method_1a81d5b453cb08b3e03b248138084e8bbf" kindref="member">_old_start_method</ref>,<sp/>force=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">check_for_newest_block_and_update(</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/>subtensor:<sp/></highlight><highlight class="stringliteral">&apos;bittensor.Subtensor&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>old_block_number:<sp/>int,</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/>curr_diff:<sp/>multiprocessing.Array,</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/>curr_block:<sp/>multiprocessing.Array,</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>curr_block_num:<sp/>multiprocessing.Value,</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>update_curr_block:<sp/>Callable,</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/>check_block:<sp/></highlight><highlight class="stringliteral">&apos;multiprocessing.Lock&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/>solvers:<sp/>List[Solver],</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/>curr_stats:<sp/>RegistrationStatistics</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>)<sp/>-&gt;<sp/>int:</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="587"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Checks<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>a<sp/>new<sp/>block<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>updates<sp/>the<sp/>current<sp/>block<sp/>information<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>a<sp/>new<sp/>block<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>found.</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subtensor<sp/>(:obj:`<ref refid="classbittensor_1_1__subtensor_1_1subtensor__impl_1_1_subtensor" kindref="compound">bittensor.Subtensor</ref>`,<sp/>`required`):</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>subtensor<sp/>object<sp/>to<sp/>use<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>getting<sp/>the<sp/>current<sp/>block.</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>old_block_number<sp/>(:obj:`int`,<sp/>`required`):</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>old<sp/>block<sp/>number<sp/>to<sp/>check<sp/>against.</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr_diff<sp/>(:obj:`multiprocessing.Array`,<sp/>`required`):</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>current<sp/>difficulty<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>a<sp/>multiprocessing<sp/>array.</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr_block<sp/>(:obj:`multiprocessing.Array`,<sp/>`required`):</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Where<sp/>the<sp/>current<sp/>block<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>stored<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>a<sp/>multiprocessing<sp/>array.</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr_block_num<sp/>(:obj:`multiprocessing.Value`,<sp/>`required`):</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Where<sp/>the<sp/>current<sp/>block<sp/>number<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>stored<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>a<sp/>multiprocessing<sp/>value.</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>update_curr_block<sp/>(:obj:`Callable`,<sp/>`required`):</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>function<sp/>that<sp/>updates<sp/>the<sp/>current<sp/>block.</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_block<sp/>(:obj:`multiprocessing.Lock`,<sp/>`required`):</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>mp<sp/>lock<sp/>that<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>used<sp/>to<sp/>check<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>a<sp/>new<sp/>block.</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solvers<sp/>(:obj:`List[Solver]`,<sp/>`required`):</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>list<sp/>of<sp/>solvers<sp/>to<sp/>update<sp/>the<sp/>current<sp/>block<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">.</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr_stats<sp/>(:obj:`RegistrationStatistics`,<sp/>`required`):</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>current<sp/>registration<sp/>statistics<sp/>to<sp/>update.</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/>Returns:</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(int)<sp/>The<sp/>current<sp/>block<sp/>number.</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="612"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>block_number<sp/>=<sp/>subtensor.get_current_block()</highlight></codeline>
<codeline lineno="613"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>block_number<sp/>!=<sp/>old_block_number:</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>old_block_number<sp/>=<sp/>block_number</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>update<sp/>block<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block_hash<sp/>=<sp/>subtensor.substrate.get_block_hash(<sp/>block_number)</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>block_hash<sp/>==<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block_hash<sp/>=<sp/>subtensor.substrate.get_block_hash(<sp/>block_number)</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block_bytes<sp/>=<sp/>block_hash.encode(</highlight><highlight class="stringliteral">&apos;utf-8&apos;</highlight><highlight class="normal">)[2:]</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>difficulty<sp/>=<sp/>subtensor.difficulty</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>update_curr_block(curr_diff,<sp/>curr_block,<sp/>curr_block_num,<sp/>block_number,<sp/>block_bytes,<sp/>difficulty,<sp/>check_block)</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Set<sp/>new<sp/>block<sp/>events<sp/>for<sp/>each<sp/>solver</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>worker<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>solvers:</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>worker.newBlockEvent.set()</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>update<sp/>stats</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr_stats.block_number<sp/>=<sp/>block_number</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr_stats.block_hash<sp/>=<sp/>block_hash</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr_stats.difficulty<sp/>=<sp/>difficulty</highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>old_block_number</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">solve_for_difficulty_fast_cuda(<sp/>subtensor:<sp/></highlight><highlight class="stringliteral">&apos;bittensor.Subtensor&apos;</highlight><highlight class="normal">,<sp/>wallet:<sp/></highlight><highlight class="stringliteral">&apos;bittensor.Wallet&apos;</highlight><highlight class="normal">,<sp/>output_in_place:<sp/>bool<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>update_interval:<sp/>int<sp/>=<sp/>50_000,<sp/>TPB:<sp/>int<sp/>=<sp/>512,<sp/>dev_id:<sp/>Union[List[int],<sp/>int]<sp/>=<sp/>0,<sp/>n_samples:<sp/>int<sp/>=<sp/>10,<sp/>alpha_:<sp/>float<sp/>=<sp/>0.80,<sp/>log_verbose:<sp/>bool<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"><sp/>)<sp/>-&gt;<sp/>Optional[POWSolution]:</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="638"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Solves<sp/>the<sp/>registration<sp/>fast<sp/>using<sp/>CUDA</highlight></codeline>
<codeline lineno="639"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="640"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subtensor:<sp/><ref refid="classbittensor_1_1__subtensor_1_1subtensor__impl_1_1_subtensor" kindref="compound">bittensor.Subtensor</ref></highlight></codeline>
<codeline lineno="641"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>subtensor<sp/>node<sp/>to<sp/>grab<sp/>blocks</highlight></codeline>
<codeline lineno="642"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wallet:<sp/><ref refid="classbittensor_1_1__wallet_1_1wallet__impl_1_1_wallet" kindref="compound">bittensor.Wallet</ref></highlight></codeline>
<codeline lineno="643"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>wallet<sp/>to<sp/>register</highlight></codeline>
<codeline lineno="644"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_in_place:<sp/>bool</highlight></codeline>
<codeline lineno="645"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>true,<sp/>prints<sp/>the<sp/>output<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>place,<sp/>otherwise<sp/>prints<sp/>to<sp/>new<sp/>lines</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>update_interval:<sp/>int</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>number<sp/>of<sp/>nonces<sp/>to<sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>before<sp/>checking<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>more<sp/>blocks</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TPB:<sp/>int</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>number<sp/>of<sp/>threads<sp/>per<sp/>block.<sp/>CUDA<sp/>param<sp/>that<sp/>should<sp/>match<sp/>the<sp/>GPU<sp/>capability</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dev_id:<sp/>Union[List[int],<sp/>int]</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>CUDA<sp/>device<sp/>IDs<sp/>to<sp/>execute<sp/>the<sp/>registration<sp/>on,<sp/>either<sp/>a<sp/>single<sp/>device<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>a<sp/>list<sp/>of<sp/>devices</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_samples:<sp/>int</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>number<sp/>of<sp/>samples<sp/>of<sp/>the<sp/>hash_rate<sp/>to<sp/>keep<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>the<sp/>EWMA</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alpha_:<sp/>float</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>alpha<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>the<sp/>EWMA<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>the<sp/>hash_rate<sp/>calculation</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_verbose:<sp/>bool</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>true,<sp/>prints<sp/>more<sp/>verbose<sp/>logging<sp/>of<sp/>the<sp/>registration<sp/>metrics.</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/>Note:<sp/>The<sp/>hash<sp/>rate<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>calculated<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>an<sp/>exponentially<sp/>weighted<sp/>moving<sp/>average<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>order<sp/>to<sp/>make<sp/>the<sp/>measure<sp/>more<sp/>robust.</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="660"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>isinstance(dev_id,<sp/>int):</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dev_id<sp/>=<sp/>[dev_id]</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>dev_id<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dev_id<sp/>=<sp/>[0]</highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>update_interval<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>update_interval<sp/>=<sp/>50_000</highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>torch.cuda.is_available():</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>Exception(</highlight><highlight class="stringliteral">&quot;CUDA<sp/>not<sp/>available&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/>limit<sp/>=<sp/>int(math.pow(2,256))<sp/>-<sp/>1</highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Set<sp/>mp<sp/>start<sp/>to<sp/>use<sp/>spawn<sp/>so<sp/>CUDA<sp/>doesn&apos;t<sp/>complain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">with</highlight><highlight class="normal"><sp/><ref refid="classbittensor_1_1utils_1_1registration_1_1_using_spawn_start_method" kindref="compound">UsingSpawnStartMethod</ref>(force=</highlight><highlight class="keyword">True</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr_block<sp/>=<sp/>multiprocessing.Array(</highlight><highlight class="stringliteral">&apos;h&apos;</highlight><highlight class="normal">,<sp/>64,<sp/>lock=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">#<sp/>byte<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr_block_num<sp/>=<sp/>multiprocessing.Value(</highlight><highlight class="stringliteral">&apos;i&apos;</highlight><highlight class="normal">,<sp/>0,<sp/>lock=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">#<sp/>int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr_diff<sp/>=<sp/>multiprocessing.Array(</highlight><highlight class="stringliteral">&apos;Q&apos;</highlight><highlight class="normal">,<sp/>[0,<sp/>0],<sp/>lock=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">#<sp/>[high,<sp/>low]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_processes<sp/>=<sp/>len(dev_id)</highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Establish<sp/>communication<sp/>queues</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stopEvent<sp/>=<sp/>multiprocessing.Event()</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stopEvent.clear()</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solution_queue<sp/>=<sp/>multiprocessing.Queue()</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_queues<sp/>=<sp/>[multiprocessing.Queue()<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>_<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(num_processes)]</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_block<sp/>=<sp/>multiprocessing.Lock()</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Start<sp/>workers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solvers<sp/>=<sp/>[<sp/><ref refid="classbittensor_1_1utils_1_1registration_1_1_c_u_d_a_solver" kindref="compound">CUDASolver</ref>(i,<sp/>num_processes,<sp/>update_interval,<sp/>finished_queues[i],<sp/>solution_queue,<sp/>stopEvent,<sp/>curr_block,<sp/>curr_block_num,<sp/>curr_diff,<sp/>check_block,<sp/>limit,<sp/>dev_id[i],<sp/>TPB)</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(num_processes)<sp/>]</highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Get<sp/>first<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block_number<sp/>=<sp/>subtensor.get_current_block()</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>difficulty<sp/>=<sp/>subtensor.difficulty</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block_hash<sp/>=<sp/>subtensor.substrate.get_block_hash(<sp/>block_number<sp/>)</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>block_hash<sp/>==<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block_hash<sp/>=<sp/>subtensor.substrate.get_block_hash(<sp/>block_number<sp/>)</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block_bytes<sp/>=<sp/>block_hash.encode(</highlight><highlight class="stringliteral">&apos;utf-8&apos;</highlight><highlight class="normal">)[2:]</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>old_block_number<sp/>=<sp/>block_number</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Set<sp/>to<sp/>current<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>update_curr_block(curr_diff,<sp/>curr_block,<sp/>curr_block_num,<sp/>block_number,<sp/>block_bytes,<sp/>difficulty,<sp/>check_block)</highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Set<sp/>new<sp/>block<sp/>events<sp/>for<sp/>each<sp/>solver<sp/>to<sp/>start<sp/>at<sp/>the<sp/>initial<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>worker<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>solvers:</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>worker.newBlockEvent.set()</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>worker<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>solvers:</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>worker.start()<sp/></highlight><highlight class="comment">#<sp/>start<sp/>the<sp/>solver<sp/>processes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start_time<sp/>=<sp/>time.time()<sp/></highlight><highlight class="comment">#<sp/>time<sp/>that<sp/>the<sp/>registration<sp/>started</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time_last<sp/>=<sp/>start_time<sp/></highlight><highlight class="comment">#<sp/>time<sp/>that<sp/>the<sp/>last<sp/>work<sp/>blocks<sp/>completed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr_stats<sp/>=<sp/><ref refid="classbittensor_1_1utils_1_1registration_1_1_registration_statistics" kindref="compound">RegistrationStatistics</ref>(</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time_spent_total<sp/>=<sp/>0.0,</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time_average<sp/>=<sp/>0.0,</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rounds_total<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time_spent<sp/>=<sp/>0.0,</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash_rate_perpetual<sp/>=<sp/>0.0,</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash_rate<sp/>=<sp/>0.0,<sp/></highlight><highlight class="comment">#<sp/>EWMA<sp/>hash_rate<sp/>(H/s)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>difficulty<sp/>=<sp/>difficulty,</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block_number<sp/>=<sp/>block_number,</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block_hash<sp/>=<sp/>block_hash</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start_time_perpetual<sp/>=<sp/>time.time()</highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>console<sp/>=<sp/>bittensor.__console__</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logger<sp/>=<sp/><ref refid="classbittensor_1_1utils_1_1registration_1_1_registration_statistics_logger" kindref="compound">RegistrationStatisticsLogger</ref>(console,<sp/>output_in_place)</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logger.start()</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash_rates<sp/>=<sp/>[0]<sp/>*<sp/>n_samples<sp/></highlight><highlight class="comment">#<sp/>The<sp/>last<sp/>n<sp/>true<sp/>hash_rates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>weights<sp/>=<sp/>[alpha_<sp/>**<sp/>i<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(n_samples)]<sp/></highlight><highlight class="comment">#<sp/>weights<sp/>decay<sp/>by<sp/>alpha</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solution<sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>wallet.is_registered(subtensor):</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Wait<sp/>until<sp/>a<sp/>solver<sp/>finds<sp/>a<sp/>solution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solution<sp/>=<sp/>solution_queue.get(block=</highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>timeout=0.15)</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>solution<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>Empty:</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>No<sp/>solution<sp/>found,<sp/>try<sp/>again</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">pass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>check<sp/>for<sp/>new<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>old_block_number<sp/>=<sp/>check_for_newest_block_and_update(</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subtensor<sp/>=<sp/>subtensor,</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr_diff=curr_diff,</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr_block=curr_block,</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr_block_num=curr_block_num,</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>old_block_number=old_block_number,</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr_stats=curr_stats,</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>update_curr_block=update_curr_block,</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_block=check_block,</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solvers=solvers</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_time<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Get<sp/>times<sp/>for<sp/>each<sp/>solver</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>finished_queue<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>finished_queues:</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>proc_num<sp/>=<sp/>finished_queue.get(timeout=0.1)</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_time<sp/>+=<sp/>1</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>Empty:</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time_now<sp/>=<sp/>time.time()<sp/></highlight><highlight class="comment">#<sp/>get<sp/>current<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time_since_last<sp/>=<sp/>time_now<sp/>-<sp/>time_last<sp/></highlight><highlight class="comment">#<sp/>get<sp/>time<sp/>since<sp/>last<sp/>work<sp/>block(s)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>num_time<sp/>&gt;<sp/>0<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>time_since_last<sp/>&gt;<sp/>0.0:</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>create<sp/>EWMA<sp/>of<sp/>the<sp/>hash_rate<sp/>to<sp/>make<sp/>measure<sp/>more<sp/>robust</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash_rate_<sp/>=<sp/>(num_time<sp/>*<sp/>TPB<sp/>*<sp/>update_interval)<sp/>/<sp/>time_since_last</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash_rates.append(hash_rate_)</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash_rates.pop(0)<sp/></highlight><highlight class="comment">#<sp/>remove<sp/>the<sp/>0th<sp/>data<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr_stats.hash_rate<sp/>=<sp/>sum([hash_rates[i]*weights[i]<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(n_samples)])/(sum(weights))</highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>update<sp/>time<sp/>last<sp/>to<sp/>now</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time_last<sp/>=<sp/>time_now</highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr_stats.time_average<sp/>=<sp/>(curr_stats.time_average*curr_stats.rounds_total<sp/>+<sp/>curr_stats.time_spent)/(curr_stats.rounds_total+num_time)</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr_stats.rounds_total<sp/>+=<sp/>num_time</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Update<sp/>stats</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr_stats.time_spent<sp/>=<sp/>time_since_last</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_time_spent_total<sp/>=<sp/>time_now<sp/>-<sp/>start_time_perpetual</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr_stats.hash_rate_perpetual<sp/>=<sp/>(curr_stats.rounds_total<sp/>*<sp/>(TPB<sp/>*<sp/>update_interval))/<sp/>new_time_spent_total</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr_stats.time_spent_total<sp/>=<sp/>new_time_spent_total</highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Update<sp/>the<sp/>logger</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logger.update(curr_stats,<sp/>verbose=log_verbose)</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>exited<sp/>while,<sp/>found_solution<sp/>contains<sp/>the<sp/>nonce<sp/>or<sp/>wallet<sp/>is<sp/>registered</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stopEvent.set()<sp/></highlight><highlight class="comment">#<sp/>stop<sp/>all<sp/>other<sp/>processes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logger.stop()</highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>terminate<sp/>and<sp/>wait<sp/>for<sp/>all<sp/>solvers<sp/>to<sp/>exit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>terminate_workers_and_wait_for_exit(solvers)</highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>solution</highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">terminate_workers_and_wait_for_exit(workers:<sp/>List[multiprocessing.Process])<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>worker<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>workers:</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>worker.terminate()</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>worker.join()</highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">create_pow(</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/>subtensor,</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/>wallet,</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/>output_in_place:<sp/>bool<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/>cuda:<sp/>bool<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/>dev_id:<sp/>Union[List[int],<sp/>int]<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/>tpb:<sp/>int<sp/>=<sp/>256,</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/>num_processes:<sp/>int<sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/>update_interval:<sp/>int<sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/>log_verbose:<sp/>bool<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/>)<sp/>-&gt;<sp/>Optional[Dict[str,<sp/>Any]]:</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>cuda:</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solution:<sp/>POWSolution<sp/>=<sp/>solve_for_difficulty_fast_cuda(<sp/>subtensor,<sp/>wallet,<sp/>output_in_place=output_in_place,<sp/>\</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dev_id=dev_id,<sp/>TPB=tpb,<sp/>update_interval=update_interval,<sp/>log_verbose=log_verbose</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solution:<sp/>POWSolution<sp/>=<sp/>solve_for_difficulty_fast(<sp/>subtensor,<sp/>wallet,<sp/>output_in_place=output_in_place,<sp/>\</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_processes=num_processes,<sp/>update_interval=update_interval,<sp/>log_verbose=log_verbose</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>solution<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;nonce&apos;</highlight><highlight class="normal">:<sp/>solution.nonce,<sp/></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;difficulty&apos;</highlight><highlight class="normal">:<sp/>solution.difficulty,</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;block_number&apos;</highlight><highlight class="normal">:<sp/>solution.block_number,<sp/></highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;work&apos;</highlight><highlight class="normal">:<sp/>binascii.hexlify(solution.seal)</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
    </programlisting>
    <location file="/Users/macthrasher/bittensor/bittensor/utils/registration.py"/>
  </compounddef>
</doxygen>
