<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="namespacebittensor_1_1utils" kind="namespace" language="Python">
    <compoundname>bittensor::utils</compoundname>
    <innernamespace refid="namespacebittensor_1_1utils_1_1balance">bittensor::utils::balance</innernamespace>
    <innernamespace refid="namespacebittensor_1_1utils_1_1codes">bittensor::utils::codes</innernamespace>
    <innernamespace refid="namespacebittensor_1_1utils_1_1networking">bittensor::utils::networking</innernamespace>
    <innernamespace refid="namespacebittensor_1_1utils_1_1register__cuda">bittensor::utils::register_cuda</innernamespace>
    <innernamespace refid="namespacebittensor_1_1utils_1_1registration">bittensor::utils::registration</innernamespace>
    <innernamespace refid="namespacebittensor_1_1utils_1_1stats">bittensor::utils::stats</innernamespace>
    <innernamespace refid="namespacebittensor_1_1utils_1_1test__utils">bittensor::utils::test_utils</innernamespace>
    <innernamespace refid="namespacebittensor_1_1utils_1_1tokenizer__utils">bittensor::utils::tokenizer_utils</innernamespace>
    <innernamespace refid="namespacebittensor_1_1utils_1_1weight__utils">bittensor::utils::weight_utils</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="utils_2____init_____8py_1ae020c1b849a7b801b2c98257d18f487d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type> &apos;pandas.DataFrame&apos;</type>
        <definition> &apos;pandas.DataFrame&apos; bittensor.utils.indexed_values_to_dataframe</definition>
        <argsstring>(Union[str, int] prefix, Union[list, torch.LongTensor] index, Union[list, torch.Tensor] values, bool filter_zeros=False)</argsstring>
        <name>indexed_values_to_dataframe</name>
        <qualifiedname>bittensor.utils.indexed_values_to_dataframe</qualifiedname>
        <param>
          <type>Union</type>
          <declname>prefix</declname>
          <array>[str, int]</array>
        </param>
        <param>
          <type>Union</type>
          <declname>index</declname>
          <array>[list, torch.LongTensor]</array>
        </param>
        <param>
          <type>Union</type>
          <declname>values</declname>
          <array>[list, torch.Tensor]</array>
        </param>
        <param>
          <type>bool</type>
          <declname>filter_zeros</declname>
          <defval>False</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/macthrasher/bittensor/bittensor/utils/__init__.py" line="13" column="1" bodyfile="/Users/macthrasher/bittensor/bittensor/utils/__init__.py" bodystart="18" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="utils_2____init_____8py_1a8d034b6de37fe5f6e008a33eccca19ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def bittensor.utils.unbiased_topk</definition>
        <argsstring>(values, k, dim=0, sorted=True, largest=True)</argsstring>
        <name>unbiased_topk</name>
        <qualifiedname>bittensor.utils.unbiased_topk</qualifiedname>
        <param>
          <type>values</type>
          <defname>values</defname>
        </param>
        <param>
          <type>k</type>
          <defname>k</defname>
        </param>
        <param>
          <type>dim</type>
          <defname>dim</defname>
          <defval>0</defval>
        </param>
        <param>
          <type>sorted</type>
          <defname>sorted</defname>
          <defval>True</defval>
        </param>
        <param>
          <type>largest</type>
          <defname>largest</defname>
          <defval>True</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim> Selects topk as in torch.topk but does not bias lower indices when values are equal.
    Args:
        values: (torch.Tensor)
            Values to index into.
        k: (int):
            Number to take.
        
    Return:
        topk: (torch.Tensor):
            topk k values.
        indices: (torch.LongTensor)
            indices of the topk values.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/macthrasher/bittensor/bittensor/utils/__init__.py" line="42" column="1" bodyfile="/Users/macthrasher/bittensor/bittensor/utils/__init__.py" bodystart="42" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="utils_2____init_____8py_1ae91d503bc0725dc1ce90ccc1fabb93a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def bittensor.utils.version_checking</definition>
        <argsstring>()</argsstring>
        <name>version_checking</name>
        <qualifiedname>bittensor.utils.version_checking</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/macthrasher/bittensor/bittensor/utils/__init__.py" line="62" column="1" bodyfile="/Users/macthrasher/bittensor/bittensor/utils/__init__.py" bodystart="62" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="utils_2____init_____8py_1a7a83f768b14e07240bc063fb0da141b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition> bool bittensor.utils.is_valid_ss58_address</definition>
        <argsstring>(str address)</argsstring>
        <name>is_valid_ss58_address</name>
        <qualifiedname>bittensor.utils.is_valid_ss58_address</qualifiedname>
        <param>
          <type>str</type>
          <declname>address</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Checks if the given address is a valid ss58 address.

Args:
    address(str): The address to check.

Returns:
    True if the address is a valid ss58 address for Bittensor, False otherwise.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/macthrasher/bittensor/bittensor/utils/__init__.py" line="71" column="1" bodyfile="/Users/macthrasher/bittensor/bittensor/utils/__init__.py" bodystart="71" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="utils_2____init_____8py_1a0c46167dbf94117a378a876dcd5ee791" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition> bool bittensor.utils.is_valid_ed25519_pubkey</definition>
        <argsstring>(Union[str, bytes] public_key)</argsstring>
        <name>is_valid_ed25519_pubkey</name>
        <qualifiedname>bittensor.utils.is_valid_ed25519_pubkey</qualifiedname>
        <param>
          <type>Union</type>
          <declname>public_key</declname>
          <array>[str, bytes]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Checks if the given public_key is a valid ed25519 key.

Args:
    public_key(Union[str, bytes]): The public_key to check.

Returns:    
    True if the public_key is a valid ed25519 key, False otherwise.</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/macthrasher/bittensor/bittensor/utils/__init__.py" line="86" column="1" bodyfile="/Users/macthrasher/bittensor/bittensor/utils/__init__.py" bodystart="86" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="utils_2____init_____8py_1ae0c34d76649b64c0a5578d01a27e92a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition> bool bittensor.utils.is_valid_bittensor_address_or_public_key</definition>
        <argsstring>(Union[str, bytes] address)</argsstring>
        <name>is_valid_bittensor_address_or_public_key</name>
        <qualifiedname>bittensor.utils.is_valid_bittensor_address_or_public_key</qualifiedname>
        <param>
          <type>Union</type>
          <declname>address</declname>
          <array>[str, bytes]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Checks if the given address is a valid destination address.

Args:
    address(Union[str, bytes]): The address to check.

Returns:
    True if the address is a valid destination address, False otherwise.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/macthrasher/bittensor/bittensor/utils/__init__.py" line="118" column="1" bodyfile="/Users/macthrasher/bittensor/bittensor/utils/__init__.py" bodystart="118" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="utils_2____init_____8py_1a396a689c13a7ff5ea6b0ddbae5e98103" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Callable[[str], bool]</type>
        <definition> Callable[[str], bool] bittensor.utils.strtobool_with_default</definition>
        <argsstring>(bool default)</argsstring>
        <name>strtobool_with_default</name>
        <qualifiedname>bittensor.utils.strtobool_with_default</qualifiedname>
        <param>
          <type>bool</type>
          <declname>default</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Creates a strtobool function with a default value.

Args:
    default(bool): The default value to return if the string is empty.

Returns:
    The strtobool function with the default value.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/macthrasher/bittensor/bittensor/utils/__init__.py" line="142" column="1" bodyfile="/Users/macthrasher/bittensor/bittensor/utils/__init__.py" bodystart="142" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="utils_2____init_____8py_1a6c59976283b7fb98e252598354835be8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition> bool bittensor.utils.strtobool</definition>
        <argsstring>(str val)</argsstring>
        <name>strtobool</name>
        <qualifiedname>bittensor.utils.strtobool</qualifiedname>
        <param>
          <type>str</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Converts a string to a boolean value.

truth-y values are &apos;y&apos;, &apos;yes&apos;, &apos;t&apos;, &apos;true&apos;, &apos;on&apos;, and &apos;1&apos;;
false-y values are &apos;n&apos;, &apos;no&apos;, &apos;f&apos;, &apos;false&apos;, &apos;off&apos;, and &apos;0&apos;.

Raises ValueError if &apos;val&apos; is anything else.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/macthrasher/bittensor/bittensor/utils/__init__.py" line="155" column="1" bodyfile="/Users/macthrasher/bittensor/bittensor/utils/__init__.py" bodystart="155" bodyend="172"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/Users/macthrasher/bittensor/bittensor/utils/__init__.py" line="1" column="1"/>
  </compounddef>
</doxygen>
