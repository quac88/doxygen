<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="__subtensor_2____init_____8py" kind="file" language="Python">
    <compoundname>__init__.py</compoundname>
    <innerclass refid="classbittensor_1_1__subtensor_1_1subtensor" prot="public">bittensor::_subtensor::subtensor</innerclass>
    <innernamespace refid="namespacebittensor">bittensor</innernamespace>
    <innernamespace refid="namespacebittensor_1_1__subtensor">bittensor::_subtensor</innernamespace>
      <sectiondef kind="var">
      <memberdef kind="variable" id="__subtensor_2____init_____8py_1a4dccd81352b6c81fc7fe9947e8e45a0f" prot="public" static="no" mutable="no">
        <type>logger</type>
        <definition>logger bittensor::_subtensor.logger</definition>
        <argsstring></argsstring>
        <name>logger</name>
        <qualifiedname>bittensor._subtensor.logger</qualifiedname>
        <initializer>=  logger.opt(colors=True)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/macthrasher/bittensor/bittensor/_subtensor/__init__.py" line="30" column="1" bodyfile="/Users/macthrasher/bittensor/bittensor/_subtensor/__init__.py" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="__subtensor_2____init_____8py_1a33a9d068261cf0571d5f0fbf1f41816f" prot="private" static="no" mutable="no">
        <type>dict</type>
        <definition>dict bittensor::_subtensor.__type_registery__</definition>
        <argsstring></argsstring>
        <name>__type_registery__</name>
        <qualifiedname>bittensor._subtensor.__type_registery__</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/macthrasher/bittensor/bittensor/_subtensor/__init__.py" line="32" column="1" bodyfile="/Users/macthrasher/bittensor/bittensor/_subtensor/__init__.py" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="__subtensor_2____init_____8py_1a4961bcc94a5b994a406ac8846c6b4f24" prot="public" static="no" mutable="no">
        <type>str</type>
        <definition>str bittensor::_subtensor.GLOBAL_SUBTENSOR_MOCK_PROCESS_NAME</definition>
        <argsstring></argsstring>
        <name>GLOBAL_SUBTENSOR_MOCK_PROCESS_NAME</name>
        <qualifiedname>bittensor._subtensor.GLOBAL_SUBTENSOR_MOCK_PROCESS_NAME</qualifiedname>
        <initializer>=  &apos;node-subtensor&apos;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/macthrasher/bittensor/bittensor/_subtensor/__init__.py" line="64" column="1" bodyfile="/Users/macthrasher/bittensor/bittensor/_subtensor/__init__.py" bodystart="64" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">#<sp/>The<sp/>MIT<sp/>License<sp/>(MIT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Copyright<sp/>©<sp/>2021<sp/>Yuma<sp/>Rao</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/>obtaining<sp/>a<sp/>copy<sp/>of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">#<sp/>documentation<sp/>files<sp/>(the<sp/>“Software”),<sp/>to<sp/>deal<sp/>in<sp/>the<sp/>Software<sp/>without<sp/>restriction,<sp/>including<sp/>without<sp/>limitation<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">#<sp/>the<sp/>rights<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>merge,<sp/>publish,<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/>sell<sp/>copies<sp/>of<sp/>the<sp/>Software,<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">#<sp/>and<sp/>to<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is<sp/>furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">#<sp/>The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/>included<sp/>in<sp/>all<sp/>copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">#<sp/>the<sp/>Software.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">#<sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>“AS<sp/>IS”,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">#<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">#<sp/>THE<sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">#<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">#<sp/>DEALINGS<sp/>IN<sp/>THE<sp/>SOFTWARE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>argparse</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>copy</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>os</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>bittensor</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>loguru<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>logger</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>substrateinterface<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>SubstrateInterface</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>torch.cuda<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>is_available<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>is_cuda_available</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacebittensor_1_1utils" kindref="compound">bittensor.utils</ref><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>strtobool_with_default</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>.<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>subtensor_impl,<sp/>subtensor_mock</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal">logger<sp/>=<sp/>logger.opt(colors=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal">__type_registery__<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;runtime_id&quot;</highlight><highlight class="normal">:<sp/>2,</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;types&quot;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Balance&quot;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&quot;u64&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;NeuronMetadataOf&quot;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&quot;struct&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;type_mapping&quot;</highlight><highlight class="normal">:<sp/>[</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight><highlight class="stringliteral">&quot;version&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;u32&quot;</highlight><highlight class="normal">],</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight><highlight class="stringliteral">&quot;ip&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;u128&quot;</highlight><highlight class="normal">],<sp/></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight><highlight class="stringliteral">&quot;port&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;u16&quot;</highlight><highlight class="normal">],<sp/></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight><highlight class="stringliteral">&quot;ip_type&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;u8&quot;</highlight><highlight class="normal">],<sp/></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight><highlight class="stringliteral">&quot;uid&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;u32&quot;</highlight><highlight class="normal">],<sp/></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight><highlight class="stringliteral">&quot;modality&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;u8&quot;</highlight><highlight class="normal">],<sp/></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight><highlight class="stringliteral">&quot;hotkey&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;AccountId&quot;</highlight><highlight class="normal">],<sp/></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight><highlight class="stringliteral">&quot;coldkey&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;AccountId&quot;</highlight><highlight class="normal">],<sp/></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight><highlight class="stringliteral">&quot;active&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;u32&quot;</highlight><highlight class="normal">],</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight><highlight class="stringliteral">&quot;last_update&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;u64&quot;</highlight><highlight class="normal">],</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight><highlight class="stringliteral">&quot;priority&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;u64&quot;</highlight><highlight class="normal">],</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight><highlight class="stringliteral">&quot;stake&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;u64&quot;</highlight><highlight class="normal">],</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight><highlight class="stringliteral">&quot;rank&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;u64&quot;</highlight><highlight class="normal">],</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight><highlight class="stringliteral">&quot;trust&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;u64&quot;</highlight><highlight class="normal">],</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight><highlight class="stringliteral">&quot;consensus&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;u64&quot;</highlight><highlight class="normal">],</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight><highlight class="stringliteral">&quot;incentive&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;u64&quot;</highlight><highlight class="normal">],</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight><highlight class="stringliteral">&quot;dividends&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;u64&quot;</highlight><highlight class="normal">],</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight><highlight class="stringliteral">&quot;emission&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;u64&quot;</highlight><highlight class="normal">],</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight><highlight class="stringliteral">&quot;bonds&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Vec&lt;(u32,<sp/>u64)&gt;&quot;</highlight><highlight class="normal">],</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight><highlight class="stringliteral">&quot;weights&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Vec&lt;(u32,<sp/>u32)&gt;&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal">}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal">GLOBAL_SUBTENSOR_MOCK_PROCESS_NAME<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;node-subtensor&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="classbittensor_1_1__subtensor_1_1subtensor" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classbittensor_1_1__subtensor_1_1subtensor" kindref="compound">subtensor</ref>:</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Factory<sp/>Class<sp/>for<sp/>both<sp/>bittensor.Subtensor<sp/>and<sp/>Mock_Subtensor<sp/>Classes</highlight></codeline>
<codeline lineno="68"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="69"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>The<sp/>Subtensor<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">handles<sp/>interactions<sp/>with<sp/>the<sp/>substrate<sp/><ref refid="classbittensor_1_1__subtensor_1_1subtensor" kindref="compound">subtensor</ref><sp/>chain.</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>By<sp/>default,<sp/>the<sp/>Subtensor<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">connects<sp/>to<sp/>the<sp/>Nakamoto<sp/>which<sp/>serves<sp/>as<sp/>the<sp/>main<sp/><ref refid="namespacebittensor" kindref="compound">bittensor</ref><sp/>network.</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="73"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="74"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbittensor_1_1__subtensor_1_1subtensor_1a9094f0afe953e3b39c1482174175ce22" kindref="member">__new__</ref>(</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cls,<sp/></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config:<sp/></highlight><highlight class="stringliteral">&apos;bittensor.config&apos;</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>network:<sp/>str<sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chain_endpoint:<sp/>str<sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mock:<sp/>bool<sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>-&gt;<sp/></highlight><highlight class="stringliteral">&apos;bittensor.Subtensor&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&quot;&quot;&quot;<sp/>Initializes<sp/>a<sp/>subtensor<sp/>chain<sp/>interface.</highlight></codeline>
<codeline lineno="82"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="83"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config<sp/>(:obj:`<ref refid="classbittensor_1_1__config_1_1config__impl_1_1_config" kindref="compound">bittensor.Config</ref>`,<sp/>`optional`):<sp/></highlight></codeline>
<codeline lineno="84"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bittensor.subtensor.config()</highlight></codeline>
<codeline lineno="85"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>network<sp/>(default=&apos;local&apos;</highlight><highlight class="normal">,<sp/>type=str)</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>subtensor<sp/>network<sp/>flag.<sp/>The<sp/>likely<sp/>choices<sp/>are:</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--<sp/>local<sp/>(local<sp/>running<sp/>network)</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--<sp/>nakamoto<sp/>(main<sp/>network)</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--<sp/>nobunaga<sp/>(staging<sp/>network)</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--<sp/>mock<sp/>(mock<sp/>network<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>testing.)</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>this<sp/>option<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>set<sp/>it<sp/>overloads<sp/>subtensor.chain_endpoint<sp/></highlight><highlight class="keyword">with</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>an<sp/>entry<sp/>point<sp/>node<sp/></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>that<sp/>network.</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chain_endpoint<sp/>(default=</highlight><highlight class="keywordtype">None</highlight><highlight class="normal">,<sp/>type=str)</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>subtensor<sp/>endpoint<sp/>flag.<sp/>If<sp/>set,<sp/>overrides<sp/>the<sp/>network<sp/>argument.</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mock<sp/>(bool,<sp/>`optional`):</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returned<sp/>object<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>mocks<sp/>the<sp/>underlying<sp/>chain<sp/>connection.</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="98"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>config<sp/>==<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:<sp/>config<sp/>=<sp/>subtensor.config()</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config<sp/>=<sp/>copy.deepcopy(<sp/>config<sp/>)</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Returns<sp/>a<sp/>mocked<sp/>connection<sp/>with<sp/>a<sp/>background<sp/>chain<sp/>connection.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config.subtensor._mock<sp/>=<sp/>_mock<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>_mock<sp/>!=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>config.subtensor._mock</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>config.subtensor._mock<sp/>==<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>network<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;mock&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>config.subtensor.get(</highlight><highlight class="stringliteral">&apos;network&apos;</highlight><highlight class="normal">,<sp/>bittensor.defaults.subtensor.network)<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;mock&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config.subtensor._mock<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>subtensor_mock.mock_subtensor.mock()</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Determine<sp/>config.subtensor.chain_endpoint<sp/>and<sp/>config.subtensor.network<sp/>config.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>If<sp/>chain_endpoint<sp/>is<sp/>set,<sp/>we<sp/>override<sp/>the<sp/>network<sp/>flag,<sp/>otherwise,<sp/>the<sp/>chain_endpoint<sp/>is<sp/>assigned<sp/>by<sp/>the<sp/>network.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Argument<sp/>importance:<sp/>chain_endpoint<sp/>&gt;<sp/>network<sp/>&gt;<sp/>config.subtensor.chain_endpoint<sp/>&gt;<sp/>config.subtensor.network</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Select<sp/>using<sp/>chain_endpoint<sp/>arg.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>chain_endpoint<sp/>!=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config.subtensor.chain_endpoint<sp/>=<sp/>chain_endpoint</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config.subtensor.network<sp/>=<sp/>network</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Select<sp/>using<sp/>network<sp/>arg.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>network<sp/>!=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config.subtensor.chain_endpoint<sp/>=<sp/>subtensor.determine_chain_endpoint(<sp/>network<sp/>)</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config.subtensor.network<sp/>=<sp/>network</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Select<sp/>using<sp/>config.subtensor.chain_endpoint</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>config.subtensor.chain_endpoint<sp/>!=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config.subtensor.chain_endpoint<sp/>=<sp/>config.subtensor.chain_endpoint</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config.subtensor.network<sp/>=<sp/>config.subtensor.get(</highlight><highlight class="stringliteral">&apos;network&apos;</highlight><highlight class="normal">,<sp/>bittensor.defaults.subtensor.network)</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Select<sp/>using<sp/>config.subtensor.network</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>config.subtensor.get(</highlight><highlight class="stringliteral">&apos;network&apos;</highlight><highlight class="normal">,<sp/>bittensor.defaults.subtensor.network)<sp/>!=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config.subtensor.chain_endpoint<sp/>=<sp/>subtensor.determine_chain_endpoint(<sp/>config.subtensor.get(</highlight><highlight class="stringliteral">&apos;network&apos;</highlight><highlight class="normal">,<sp/>bittensor.defaults.subtensor.network)<sp/>)</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config.subtensor.network<sp/>=<sp/>config.subtensor.get(</highlight><highlight class="stringliteral">&apos;network&apos;</highlight><highlight class="normal">,<sp/>bittensor.defaults.subtensor.network)</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Fallback<sp/>to<sp/>defaults.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config.subtensor.chain_endpoint<sp/>=<sp/>subtensor.determine_chain_endpoint(<sp/>bittensor.defaults.subtensor.network<sp/>)</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config.subtensor.network<sp/>=<sp/>bittensor.defaults.subtensor.network</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>make<sp/>sure<sp/>it&apos;s<sp/>wss://<sp/>or<sp/>ws://</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>If<sp/>it&apos;s<sp/>bellagene<sp/>(parachain<sp/>testnet)<sp/>then<sp/>it<sp/>has<sp/>to<sp/>be<sp/>wss</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>endpoint_url:<sp/>str<sp/>=<sp/>config.subtensor.chain_endpoint</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>endpoint_url[0:6]<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;wss://&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>endpoint_url[0:5]<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;ws://&quot;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>config.subtensor.network<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;bellagene&quot;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>endpoint_url<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;wss://{}&quot;</highlight><highlight class="normal">.format(endpoint_url)</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>endpoint_url<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ws://{}&quot;</highlight><highlight class="normal">.format(endpoint_url)</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>substrate<sp/>=<sp/>SubstrateInterface(</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss58_format<sp/>=<sp/>bittensor.__ss58_format__,</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_registry_preset=</highlight><highlight class="stringliteral">&apos;substrate-node-template&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_registry<sp/>=<sp/>__type_registery__,</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>url<sp/>=<sp/>endpoint_url,</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>use_remote_preset=</highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subtensor.check_config(<sp/>config<sp/>)</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classbittensor_1_1__subtensor_1_1subtensor__impl_1_1_subtensor" kindref="compound">subtensor_impl.Subtensor</ref>(<sp/></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>substrate<sp/>=<sp/>substrate,</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>network<sp/>=<sp/>config.subtensor.get(</highlight><highlight class="stringliteral">&apos;network&apos;</highlight><highlight class="normal">,<sp/>bittensor.defaults.subtensor.network),</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chain_endpoint<sp/>=<sp/>config.subtensor.chain_endpoint,</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">@staticmethod</highlight><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbittensor_1_1__config_1_1config" kindref="compound">config</ref>()<sp/>-&gt;<sp/>&apos;bittensor.Config&apos;:</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser<sp/>=<sp/>argparse.ArgumentParser()</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subtensor.add_args(<sp/>parser<sp/>)</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classbittensor_1_1__config_1_1config" kindref="compound">bittensor.config</ref>(<sp/>parser<sp/>)</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">@classmethod</highlight><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbittensor_1_1__subtensor_1_1subtensor_1aa334fe4e5112e8fa64a2bf255d02dd23" kindref="member">help</ref>(cls):</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>Print<sp/>help<sp/>to<sp/>stdout</highlight></codeline>
<codeline lineno="169"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="170"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser<sp/>=<sp/>argparse.ArgumentParser()</highlight></codeline>
<codeline lineno="171"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cls.<ref refid="classbittensor_1_1__subtensor_1_1subtensor_1ab2a96f88c69af04bf2f0cab8c46445d4" kindref="member">add_args</ref>(<sp/>parser<sp/>)</highlight></codeline>
<codeline lineno="172"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">print</highlight><highlight class="normal"><sp/>(cls.<ref refid="classbittensor_1_1__subtensor_1_1subtensor_1a9094f0afe953e3b39c1482174175ce22" kindref="member">__new__</ref>.__doc__)</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser.print_help()</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">@classmethod</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">add_args(cls,<sp/>parser:<sp/>argparse.ArgumentParser,<sp/>prefix:<sp/>str<sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"><sp/>):</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prefix_str<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>prefix<sp/>==<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>prefix<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;.&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser.add_argument(</highlight><highlight class="stringliteral">&apos;--&apos;</highlight><highlight class="normal"><sp/>+<sp/>prefix_str<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;subtensor.network&apos;</highlight><highlight class="normal">,<sp/>default<sp/>=<sp/>bittensor.defaults.subtensor.network,<sp/>type=str,</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>help=</highlight><highlight class="stringliteral">&apos;&apos;&apos;The<sp/>subtensor<sp/>network<sp/>flag.<sp/>The<sp/>likely<sp/>choices<sp/>are:</highlight></codeline>
<codeline lineno="181"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--<sp/>nobunaga<sp/>(staging<sp/>network)</highlight></codeline>
<codeline lineno="182"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--<sp/>nakamoto<sp/>(master<sp/>network)</highlight></codeline>
<codeline lineno="183"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--<sp/>local<sp/>(local<sp/>running<sp/>network)</highlight></codeline>
<codeline lineno="184"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--<sp/>mock<sp/>(creates<sp/>a<sp/>mock<sp/>connection<sp/>(</highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>testing))</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>this<sp/>option<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>set<sp/>it<sp/>overloads<sp/>subtensor.chain_endpoint<sp/></highlight><highlight class="keyword">with</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>an<sp/>entry<sp/>point<sp/>node<sp/></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>that<sp/>network.</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;)</highlight></codeline>
<codeline lineno="188"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser.add_argument(&apos;--&apos;</highlight><highlight class="normal"><sp/>+<sp/>prefix_str<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;subtensor.chain_endpoint&apos;</highlight><highlight class="normal">,<sp/>default<sp/>=<sp/>bittensor.defaults.subtensor.chain_endpoint,<sp/>type=str,<sp/></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>help=</highlight><highlight class="stringliteral">&apos;&apos;&apos;The<sp/>subtensor<sp/>endpoint<sp/>flag.<sp/>If<sp/>set,<sp/>overrides<sp/>the<sp/>--network<sp/>flag.</highlight></codeline>
<codeline lineno="190"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;&apos;&apos;)<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="191"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser.add_argument(&apos;--&apos;</highlight><highlight class="normal"><sp/>+<sp/>prefix_str<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;subtensor._mock&apos;</highlight><highlight class="normal">,<sp/>action=</highlight><highlight class="stringliteral">&apos;store_true&apos;</highlight><highlight class="normal">,<sp/>help=</highlight><highlight class="stringliteral">&apos;To<sp/>turn<sp/>on<sp/>subtensor<sp/>mocking<sp/>for<sp/>testing<sp/>purposes.&apos;</highlight><highlight class="normal">,<sp/>default=bittensor.defaults.subtensor._mock)</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>registration<sp/>args.<sp/>Used<sp/>for<sp/>register<sp/>and<sp/>re-register<sp/>and<sp/>anything<sp/>that<sp/>calls<sp/>register.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser.add_argument(</highlight><highlight class="stringliteral">&apos;--&apos;</highlight><highlight class="normal"><sp/>+<sp/>prefix_str<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;subtensor.register.num_processes&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;-n&apos;</highlight><highlight class="normal">,<sp/>dest=prefix_str<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;subtensor.register.num_processes&apos;</highlight><highlight class="normal">,<sp/>help=</highlight><highlight class="stringliteral">&quot;Number<sp/>of<sp/>processors<sp/>to<sp/>use<sp/>for<sp/>registration&quot;</highlight><highlight class="normal">,<sp/>type=int,<sp/>default=bittensor.defaults.subtensor.register.num_processes)</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser.add_argument(</highlight><highlight class="stringliteral">&apos;--&apos;</highlight><highlight class="normal"><sp/>+<sp/>prefix_str<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;subtensor.register.update_interval&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;--&apos;</highlight><highlight class="normal"><sp/>+<sp/>prefix_str<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;subtensor.register.cuda.update_interval&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;--&apos;</highlight><highlight class="normal"><sp/>+<sp/>prefix_str<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;cuda.update_interval&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;-u&apos;</highlight><highlight class="normal">,<sp/>help=</highlight><highlight class="stringliteral">&quot;The<sp/>number<sp/>of<sp/>nonces<sp/>to<sp/>process<sp/>before<sp/>checking<sp/>for<sp/>next<sp/>block<sp/>during<sp/>registration&quot;</highlight><highlight class="normal">,<sp/>type=int,<sp/>default=bittensor.defaults.subtensor.register.update_interval)</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser.add_argument(</highlight><highlight class="stringliteral">&apos;--&apos;</highlight><highlight class="normal"><sp/>+<sp/>prefix_str<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;subtensor.register.no_output_in_place&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;--&apos;</highlight><highlight class="normal"><sp/>+<sp/>prefix_str<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;no_output_in_place&apos;</highlight><highlight class="normal">,<sp/>dest=</highlight><highlight class="stringliteral">&quot;subtensor.register.output_in_place&quot;</highlight><highlight class="normal">,<sp/>help=</highlight><highlight class="stringliteral">&quot;Whether<sp/>to<sp/>not<sp/>ouput<sp/>the<sp/>registration<sp/>statistics<sp/>in-place.<sp/>Set<sp/>flag<sp/>to<sp/>disable<sp/>output<sp/>in-place.&quot;</highlight><highlight class="normal">,<sp/>action=</highlight><highlight class="stringliteral">&apos;store_false&apos;</highlight><highlight class="normal">,<sp/>required=</highlight><highlight class="keyword">False</highlight><highlight class="normal">,<sp/>default=bittensor.defaults.subtensor.register.output_in_place)</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser.add_argument(</highlight><highlight class="stringliteral">&apos;--&apos;</highlight><highlight class="normal"><sp/>+<sp/>prefix_str<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;subtensor.register.verbose&apos;</highlight><highlight class="normal">,<sp/>help=</highlight><highlight class="stringliteral">&quot;Whether<sp/>to<sp/>ouput<sp/>the<sp/>registration<sp/>statistics<sp/>verbosely.&quot;</highlight><highlight class="normal">,<sp/>action=</highlight><highlight class="stringliteral">&apos;store_true&apos;</highlight><highlight class="normal">,<sp/>required=</highlight><highlight class="keyword">False</highlight><highlight class="normal">,<sp/>default=bittensor.defaults.subtensor.register.verbose)</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser.add_argument(<sp/></highlight><highlight class="stringliteral">&apos;--&apos;</highlight><highlight class="normal"><sp/>+<sp/>prefix_str<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;subtensor.register.cuda.use_cuda&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;--&apos;</highlight><highlight class="normal"><sp/>+<sp/>prefix_str<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;cuda&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;--&apos;</highlight><highlight class="normal"><sp/>+<sp/>prefix_str<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;cuda.use_cuda&apos;</highlight><highlight class="normal">,<sp/>default=argparse.SUPPRESS,<sp/>help=</highlight><highlight class="stringliteral">&apos;&apos;&apos;Set<sp/>flag<sp/>to<sp/>use<sp/>CUDA<sp/>to<sp/>register.&apos;&apos;&apos;</highlight><highlight class="normal">,<sp/>action=</highlight><highlight class="stringliteral">&quot;store_true&quot;</highlight><highlight class="normal">,<sp/>required=</highlight><highlight class="keyword">False</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser.add_argument(<sp/></highlight><highlight class="stringliteral">&apos;--&apos;</highlight><highlight class="normal"><sp/>+<sp/>prefix_str<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;subtensor.register.cuda.no_cuda&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;--&apos;</highlight><highlight class="normal"><sp/>+<sp/>prefix_str<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;no_cuda&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;--&apos;</highlight><highlight class="normal"><sp/>+<sp/>prefix_str<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;cuda.no_cuda&apos;</highlight><highlight class="normal">,<sp/>dest=prefix_str<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;subtensor.register.cuda.use_cuda&apos;</highlight><highlight class="normal">,<sp/>default=argparse.SUPPRESS,<sp/>help=</highlight><highlight class="stringliteral">&apos;&apos;&apos;Set<sp/>flag<sp/>to<sp/>not<sp/>use<sp/>CUDA<sp/>for<sp/>registration&apos;&apos;&apos;</highlight><highlight class="normal">,<sp/>action=</highlight><highlight class="stringliteral">&quot;store_false&quot;</highlight><highlight class="normal">,<sp/>required=</highlight><highlight class="keyword">False</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser.add_argument(<sp/></highlight><highlight class="stringliteral">&apos;--&apos;</highlight><highlight class="normal"><sp/>+<sp/>prefix_str<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;subtensor.register.cuda.dev_id&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;--&apos;</highlight><highlight class="normal"><sp/>+<sp/>prefix_str<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;cuda.dev_id&apos;</highlight><highlight class="normal">,<sp/><sp/>type=int,<sp/>nargs=</highlight><highlight class="stringliteral">&apos;+&apos;</highlight><highlight class="normal">,<sp/>default=argparse.SUPPRESS,<sp/>help=</highlight><highlight class="stringliteral">&apos;&apos;&apos;Set<sp/>the<sp/>CUDA<sp/>device<sp/>id(s).<sp/>Goes<sp/>by<sp/>the<sp/>order<sp/>of<sp/>speed.<sp/>(i.e.<sp/>0<sp/>is<sp/>the<sp/>fastest).&apos;&apos;&apos;</highlight><highlight class="normal">,<sp/>required=</highlight><highlight class="keyword">False</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser.add_argument(<sp/></highlight><highlight class="stringliteral">&apos;--&apos;</highlight><highlight class="normal"><sp/>+<sp/>prefix_str<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;subtensor.register.cuda.TPB&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;--&apos;</highlight><highlight class="normal"><sp/>+<sp/>prefix_str<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;cuda.TPB&apos;</highlight><highlight class="normal">,<sp/>type=int,<sp/>default=bittensor.defaults.subtensor.register.cuda.TPB,<sp/>help=</highlight><highlight class="stringliteral">&apos;&apos;&apos;Set<sp/>the<sp/>number<sp/>of<sp/>Threads<sp/>Per<sp/>Block<sp/>for<sp/>CUDA.&apos;&apos;&apos;</highlight><highlight class="normal">,<sp/>required=</highlight><highlight class="keyword">False</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>argparse.ArgumentError:</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>re-parsing<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">pass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">@classmethod</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbittensor_1_1__subtensor_1_1subtensor_1a183604333b50b2f333de25a9342e4281" kindref="member">add_defaults</ref>(cls,<sp/>defaults<sp/>):</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>Adds<sp/>parser<sp/>defaults<sp/>to<sp/>object<sp/>from<sp/>enviroment<sp/>variables.</highlight></codeline>
<codeline lineno="212"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="213"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>defaults.subtensor<sp/>=<sp/><ref refid="classbittensor_1_1__config_1_1config__impl_1_1_config" kindref="compound">bittensor.Config</ref>()</highlight></codeline>
<codeline lineno="214"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>defaults.subtensor.network<sp/>=<sp/>os.getenv(&apos;BT_SUBTENSOR_NETWORK&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>os.getenv(</highlight><highlight class="stringliteral">&apos;BT_SUBTENSOR_NETWORK&apos;</highlight><highlight class="normal">)<sp/>!=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;nakamoto&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>defaults.subtensor.chain_endpoint<sp/>=<sp/>os.getenv(</highlight><highlight class="stringliteral">&apos;BT_SUBTENSOR_CHAIN_ENDPOINT&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>os.getenv(</highlight><highlight class="stringliteral">&apos;BT_SUBTENSOR_CHAIN_ENDPOINT&apos;</highlight><highlight class="normal">)<sp/>!=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>defaults.subtensor._mock<sp/>=<sp/>os.getenv(</highlight><highlight class="stringliteral">&apos;BT_SUBTENSOR_MOCK&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>os.getenv(</highlight><highlight class="stringliteral">&apos;BT_SUBTENSOR_MOCK&apos;</highlight><highlight class="normal">)<sp/>!=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>defaults.subtensor.register<sp/>=<sp/><ref refid="classbittensor_1_1__config_1_1config__impl_1_1_config" kindref="compound">bittensor.Config</ref>()</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>defaults.subtensor.register.num_processes<sp/>=<sp/>os.getenv(</highlight><highlight class="stringliteral">&apos;BT_SUBTENSOR_REGISTER_NUM_PROCESSES&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>os.getenv(</highlight><highlight class="stringliteral">&apos;BT_SUBTENSOR_REGISTER_NUM_PROCESSES&apos;</highlight><highlight class="normal">)<sp/>!=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">#<sp/>uses<sp/>processor<sp/>count<sp/>by<sp/>default<sp/>within<sp/>the<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>defaults.subtensor.register.update_interval<sp/>=<sp/>os.getenv(</highlight><highlight class="stringliteral">&apos;BT_SUBTENSOR_REGISTER_UPDATE_INTERVAL&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>os.getenv(</highlight><highlight class="stringliteral">&apos;BT_SUBTENSOR_REGISTER_UPDATE_INTERVAL&apos;</highlight><highlight class="normal">)<sp/>!=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>50_000</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>defaults.subtensor.register.output_in_place<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>defaults.subtensor.register.verbose<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>defaults.subtensor.register.cuda<sp/>=<sp/><ref refid="classbittensor_1_1__config_1_1config__impl_1_1_config" kindref="compound">bittensor.Config</ref>()</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>defaults.subtensor.register.cuda.dev_id<sp/>=<sp/>[0]</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>defaults.subtensor.register.cuda.use_cuda<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>defaults.subtensor.register.cuda.TPB<sp/>=<sp/>256</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">@staticmethod</highlight><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">check_config(<sp/>config:<sp/></highlight><highlight class="stringliteral">&apos;bittensor.Config&apos;</highlight><highlight class="normal"><sp/>):</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>config.subtensor</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#assert<sp/>config.subtensor.network<sp/>!=<sp/>None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>config.subtensor.get(</highlight><highlight class="stringliteral">&apos;register&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>config.subtensor.register.get(</highlight><highlight class="stringliteral">&apos;cuda&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>all((isinstance(x,<sp/>int)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>isinstance(x,<sp/>str)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>x.isnumeric()<sp/>)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>x<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>config.subtensor.register.cuda.get(</highlight><highlight class="stringliteral">&apos;dev_id&apos;</highlight><highlight class="normal">,<sp/>[]))</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>config.subtensor.register.cuda.get(</highlight><highlight class="stringliteral">&apos;use_cuda&apos;</highlight><highlight class="normal">,<sp/>bittensor.defaults.subtensor.register.cuda.use_cuda):</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>cubit</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>ImportError:</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>ImportError(</highlight><highlight class="stringliteral">&apos;CUDA<sp/>registration<sp/>is<sp/>enabled<sp/>but<sp/>cubit<sp/>is<sp/>not<sp/>installed.<sp/>Please<sp/>install<sp/>cubit.&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>is_cuda_available():</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>RuntimeError(</highlight><highlight class="stringliteral">&apos;CUDA<sp/>registration<sp/>is<sp/>enabled<sp/>but<sp/>no<sp/>CUDA<sp/>devices<sp/>are<sp/>detected.&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">@staticmethod</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">determine_chain_endpoint(network:<sp/>str):</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>network<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;nakamoto&quot;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Main<sp/>network.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bittensor.__nakamoto_entrypoint__</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>network<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;nobunaga&quot;</highlight><highlight class="normal">:<sp/></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Staging<sp/>network.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bittensor.__nobunaga_entrypoint__</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>network<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;bellagene&quot;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Parachain<sp/>test<sp/>net</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bittensor.__bellagene_entrypoint__</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>network<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;local&quot;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Local<sp/>chain.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bittensor.__local_entrypoint__</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>network<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;mock&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bittensor.__mock_entrypoint__</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bittensor.__local_entrypoint__</highlight></codeline>
    </programlisting>
    <location file="/Users/macthrasher/bittensor/bittensor/_subtensor/__init__.py"/>
  </compounddef>
</doxygen>
