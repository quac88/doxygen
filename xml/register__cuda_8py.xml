<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="register__cuda_8py" kind="file" language="Python">
    <compoundname>register_cuda.py</compoundname>
    <innernamespace refid="namespacebittensor">bittensor</innernamespace>
    <innernamespace refid="namespacebittensor_1_1utils">bittensor::utils</innernamespace>
    <innernamespace refid="namespacebittensor_1_1utils_1_1register__cuda">bittensor::utils::register_cuda</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="register__cuda_8py_1a95fe0b17fa446eabe38bd29cf40f76c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Tuple[np.int64, bytes]</type>
        <definition> Tuple[np.int64, bytes] bittensor.utils.register_cuda.solve_cuda</definition>
        <argsstring>(np.int64 nonce_start, np.int64 update_interval, int TPB, bytes block_bytes, int bn, int difficulty, int limit, int dev_id=0)</argsstring>
        <name>solve_cuda</name>
        <qualifiedname>bittensor.utils.register_cuda.solve_cuda</qualifiedname>
        <param>
          <type>np.int64</type>
          <declname>nonce_start</declname>
        </param>
        <param>
          <type>np.int64</type>
          <declname>update_interval</declname>
        </param>
        <param>
          <type>int</type>
          <declname>TPB</declname>
        </param>
        <param>
          <type>bytes</type>
          <declname>block_bytes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bn</declname>
        </param>
        <param>
          <type>int</type>
          <declname>difficulty</declname>
        </param>
        <param>
          <type>int</type>
          <declname>limit</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dev_id</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Solves the PoW problem using CUDA.
Args:
    nonce_start: int64
        Starting nonce.
    update_interval: int64
        Number of nonces to solve before updating block information.
    TPB: int
        Threads per block.
    block_bytes: bytes
        Bytes of the block hash. 64 bytes.
    difficulty: int256
        Difficulty of the PoW problem.
    limit: int256
        Upper limit of the nonce.
    dev_id: int (default=0)
        The CUDA device ID
Returns:
    Tuple[int64, bytes]
        Tuple of the nonce and the seal corresponding to the solution.  
        Returns -1 for nonce if no solution is found.     
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/macthrasher/bittensor/bittensor/utils/register_cuda.py" line="13" column="1" bodyfile="/Users/macthrasher/bittensor/bittensor/utils/register_cuda.py" bodystart="13" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="register__cuda_8py_1ac5a6adddffc94aa767b7b31e5d1331ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def bittensor.utils.register_cuda.reset_cuda</definition>
        <argsstring>()</argsstring>
        <name>reset_cuda</name>
        <qualifiedname>bittensor.utils.register_cuda.reset_cuda</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Resets the CUDA environment.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/macthrasher/bittensor/bittensor/utils/register_cuda.py" line="80" column="1" bodyfile="/Users/macthrasher/bittensor/bittensor/utils/register_cuda.py" bodystart="80" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="register__cuda_8py_1ab920653b0447fc74606a2bda341b71b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>str</type>
        <definition> str bittensor.utils.register_cuda.log_cuda_errors</definition>
        <argsstring>()</argsstring>
        <name>log_cuda_errors</name>
        <qualifiedname>bittensor.utils.register_cuda.log_cuda_errors</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Logs any CUDA errors.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/macthrasher/bittensor/bittensor/utils/register_cuda.py" line="91" column="1" bodyfile="/Users/macthrasher/bittensor/bittensor/utils/register_cuda.py" bodystart="91" bodyend="111"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="keyword">import</highlight><highlight class="normal"><sp/>binascii</highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>hashlib</highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>math</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>typing<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>Tuple</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>numpy<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>np</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>Crypto.Hash<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>keccak</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>contextlib<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>redirect_stdout</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>io</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">solve_cuda(nonce_start:<sp/>np.int64,<sp/>update_interval:<sp/>np.int64,<sp/>TPB:<sp/>int,<sp/>block_bytes:<sp/>bytes,<sp/>bn:<sp/>int,<sp/>difficulty:<sp/>int,<sp/>limit:<sp/>int,<sp/>dev_id:<sp/>int<sp/>=<sp/>0)<sp/>-&gt;<sp/>Tuple[np.int64,<sp/>bytes]:</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="15"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Solves<sp/>the<sp/>PoW<sp/>problem<sp/>using<sp/>CUDA.</highlight></codeline>
<codeline lineno="16"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="17"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nonce_start:<sp/>int64</highlight></codeline>
<codeline lineno="18"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Starting<sp/>nonce.</highlight></codeline>
<codeline lineno="19"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>update_interval:<sp/>int64</highlight></codeline>
<codeline lineno="20"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Number<sp/>of<sp/>nonces<sp/>to<sp/>solve<sp/>before<sp/>updating<sp/>block<sp/>information.</highlight></codeline>
<codeline lineno="21"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TPB:<sp/>int</highlight></codeline>
<codeline lineno="22"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Threads<sp/>per<sp/>block.</highlight></codeline>
<codeline lineno="23"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block_bytes:<sp/>bytes</highlight></codeline>
<codeline lineno="24"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Bytes<sp/>of<sp/>the<sp/>block<sp/>hash.<sp/>64<sp/>bytes.</highlight></codeline>
<codeline lineno="25"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>difficulty:<sp/>int256</highlight></codeline>
<codeline lineno="26"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Difficulty<sp/>of<sp/>the<sp/>PoW<sp/>problem.</highlight></codeline>
<codeline lineno="27"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>limit:<sp/>int256</highlight></codeline>
<codeline lineno="28"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Upper<sp/>limit<sp/>of<sp/>the<sp/>nonce.</highlight></codeline>
<codeline lineno="29"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dev_id:<sp/>int<sp/>(default=0)</highlight></codeline>
<codeline lineno="30"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>CUDA<sp/>device<sp/>ID</highlight></codeline>
<codeline lineno="31"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Returns:</highlight></codeline>
<codeline lineno="32"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tuple[int64,<sp/>bytes]</highlight></codeline>
<codeline lineno="33"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tuple<sp/>of<sp/>the<sp/>nonce<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>the<sp/>seal<sp/>corresponding<sp/>to<sp/>the<sp/>solution.<sp/><sp/></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns<sp/>-1<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>nonce<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>no<sp/>solution<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>found.<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/></highlight></codeline>
<codeline lineno="36"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="37"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>cubit</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>ImportError:</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>ImportError(</highlight><highlight class="stringliteral">&quot;Please<sp/>install<sp/>cubit&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>upper<sp/>=<sp/>int(limit<sp/>//<sp/>difficulty)</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>upper_bytes<sp/>=<sp/>upper.to_bytes(32,<sp/>byteorder=</highlight><highlight class="stringliteral">&apos;little&apos;</highlight><highlight class="normal">,<sp/>signed=</highlight><highlight class="keyword">False</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">seal_meets_difficulty(<sp/>seal:bytes,<sp/>difficulty:int<sp/>):</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seal_number<sp/>=<sp/>int.from_bytes(seal,<sp/></highlight><highlight class="stringliteral">&quot;big&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>product<sp/>=<sp/>seal_number<sp/>*<sp/>difficulty</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>limit<sp/>=<sp/>int(math.pow(2,256))-<sp/>1<sp/><sp/></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>product<sp/>&lt;<sp/>limit</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">hex_bytes_to_u8_list(<sp/>hex_bytes:<sp/>bytes<sp/>):</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hex_chunks<sp/>=<sp/>[int(hex_bytes[i:i+2],<sp/>16)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(0,<sp/>len(hex_bytes),<sp/>2)]</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hex_chunks</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">create_seal_hash(<sp/>block_bytes:bytes,<sp/>nonce:int<sp/>)<sp/>-&gt;<sp/>bytes:</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nonce_bytes<sp/>=<sp/>binascii.hexlify(nonce.to_bytes(8,<sp/></highlight><highlight class="stringliteral">&apos;little&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pre_seal<sp/>=<sp/>nonce_bytes<sp/>+<sp/>block_bytes</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seal_sh256<sp/>=<sp/>hashlib.sha256(<sp/>bytearray(hex_bytes_to_u8_list(pre_seal))<sp/>).digest()</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kec<sp/>=<sp/>keccak.new(digest_bits=256)</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seal<sp/>=<sp/>kec.update(<sp/>seal_sh256<sp/>).digest()</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>seal</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Call<sp/>cython<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>int<sp/>blockSize,<sp/>uint64<sp/>nonce_start,<sp/>uint64<sp/>update_interval,<sp/>const<sp/>unsigned<sp/>char[:]<sp/>limit,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>const<sp/>unsigned<sp/>char[:]<sp/>block_bytes,<sp/>int<sp/>dev_id</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>solution<sp/>=<sp/>cubit.solve_cuda(TPB,<sp/>nonce_start,<sp/>update_interval,<sp/>upper_bytes,<sp/>block_bytes,<sp/>dev_id)<sp/></highlight><highlight class="comment">#<sp/>0<sp/>is<sp/>first<sp/>GPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>seal<sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>solution<sp/>!=<sp/>-1:</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seal<sp/>=<sp/>create_seal_hash(block_bytes,<sp/>solution)</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>seal_meets_difficulty(seal,<sp/>difficulty):</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>solution,<sp/>seal</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1,<sp/>b</highlight><highlight class="stringliteral">&apos;\x00&apos;</highlight><highlight class="normal"><sp/>*<sp/>32</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>solution,<sp/>seal</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">reset_cuda():</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="82"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Resets<sp/>the<sp/>CUDA<sp/>environment.</highlight></codeline>
<codeline lineno="83"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="84"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>cubit</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>ImportError:</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>ImportError(</highlight><highlight class="stringliteral">&quot;Please<sp/>install<sp/>cubit&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>cubit.reset_cuda()</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">log_cuda_errors()<sp/>-&gt;<sp/>str:</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="93"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Logs<sp/>any<sp/>CUDA<sp/>errors.</highlight></codeline>
<codeline lineno="94"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="95"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>cubit</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>ImportError:</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>ImportError(</highlight><highlight class="stringliteral">&quot;Please<sp/>install<sp/>cubit&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>f<sp/>=<sp/>io.StringIO()</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">with</highlight><highlight class="normal"><sp/>redirect_stdout(f):</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cubit.log_cuda_errors()</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>=<sp/>f.getvalue()</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/macthrasher/bittensor/bittensor/utils/register_cuda.py"/>
  </compounddef>
</doxygen>
